{
  "version": "",
  "flags": [
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DamageFireTypes",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations that can be (in random order) displayed as \"fires\" springing up on damaged buildings."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "OreTwinkle",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played to create the ore 'twinkle' effect."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BarrelExplode",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies an Animation that is played when an OverlayType with Explodes=yes is destroyed."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BarrelDebris",
      "value_type": "vector<VoxelAnimation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This flag specifies a list of VoxelAnims from which one is randomly chosen and spawned as debris when an OverlayType with Explodes=yes is destroyed."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BarrelParticle",
      "value_type": "ParticleSystem",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies a ParticleSystem that is spawned after an OverlayType with Explodes=yes is destroyed. BarrelParticle = must be a valid particle system, listed in [ ParticleSystems ], otherwise an Internal Error may occur."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NukeTakeOff",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation used as the \"nuclear missile taking off\" when a Super Weapon with Type =MultiMissile \n is activated."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Wake",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is used as a wake effect when an object is moving on or over water, with two exceptions: \n  Will not be displayed for InfantryTypes . Will not be displayed for objects with Underwater=yes ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropPod",
      "value_type": "vector<Animation>",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": null
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DeadBodies",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This flag specifies a list of Animations , one of which is randomly played when an InfantryType is killed by a warhead with InfDeath=1 or InfDeath=2 . The animation will start to play once the Die1 or Die2 sub-sequences end. \n These animations will not play for InfantryTypes with NotHuman=yes . \n  Individual override \n  In Red Alert 2 , [General]→ DeadBodies can be overridden for individual InfantryTypes ↓ . \n  For InfantryTypes \n  Flag: DeadBodies File(s): rules(md).ini Values: Comma-separated list of strings . (Limited to: Animations ) Applicable to: InfantryTypes This flag acts as an individual override for [General] → DeadBodies ↑ . Automatic List Inclusion Animations used as values for this flag are automatically listed under the internal [Animations] array. However no harm can be done by listing them manually."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MetallicDebris",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations that are used as possible debris when an object is destroyed which specifies a number of debris, but doesn't define the precise debris to use. Also used (in YR only) when a warhead specifies a number of debris to spawn with each impact, since warhead-level debris control is not implemented."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BridgeExplosions",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations that are (in random order) played as explosion effects for bridge destruction."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IonBlast",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation played when a Super Weapon with Type=IonCannon hits the ground (and/or its target). Both this animation and the one set under IonBeam are played at the same time. In Yuri's Revenge , a Super Weapon with Type=GeneticConverter also uses this animation as the \"blast wave\". \n  RockPatch Info \n  In RockPatch version CE and higher, this animation is also played when any Super Weapon with Type=IonCannon strikes the designated location along with the animation specified in IonBeam . As this anim is used with the Genetic Mutator as well, if you are using both Super Weapon types, then try to use an animation suitable to both."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IonBeam",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the \"beam\" of a striking Ion Cannon, or, if replaced by a modder, simply the first animation played when a Super Weapon with Type=IonCannon is activated. \n  RockPatch Info \n  This animation is played if you fire a Super Weapon with Type=IonCannon in Yuri's Revenge, so long as you are using RockPatch CE or higher. \n  See also \n  Tiled"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WeatherConClouds",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations that are used by Super Weapons with Type =LightningStorm \n to depict lightning clouds."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WeatherConBolts",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations that are used by Super Weapons with Type =LightningStorm \n to depict lightning bolts."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WeatherConBoltExplosion",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The warhead specified as [General] → LightningWarhead= will always use this animation instead of what you specify in its AnimList , except if that warhead is tagged Conventional=yes and detonated over water, in which case the normal [CombatDamage] → SplashList= logic takes over. Originally used by the Lightning Storm Superweapon."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorWarhead",
      "value_type": "WarheadType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the warhead used by Super Weapons which have Type =PsychicDominator \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorFirstAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the first animation played when a Super Weapon with Type =PsychicDominator \n is activated."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorSecondAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the second animation played when a super Weapon with Type =PsychicDominator \n is activated. Both this animation and DominatorFirstAnim \n are played at the same time."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorFireAtPercentage",
      "value_type": "int",
      "default_value": "50",
      "adds_to_list": "",
      "desc": "When a Super Weapon with Type =PsychicDominator is fired, the animation defined in DominatorFirstAnim = is played. After that animation has played this percentage of its frames, the actual warhead of the Super Weapon (defined by DominatorWarhead ) fires. \n  Note: This flag takes an integer value, and appends a percent sign to it internally, do not specify a float/percentage value here."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorCaptureRange",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Specifies the range, in cells, within which a Super Weapon with Type =PsychicDominator will permanently mind control units. \n  Note: if you set this to 0, the unit(s) occupying the target cell will still be mind controlled."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DominatorDamage",
      "value_type": "int",
      "default_value": "50",
      "adds_to_list": "",
      "desc": "When a Super Weapon with Type =PsychicDominator \n is activated, it will (after a certain delay) detonate a pseudo weapon which inflicts this much damage using the warhead specified in DominatorWarhead \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoPlacement",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is played when a Super Weapon with Type =ChronoSphere \n is activated."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoBeam",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Is supposed to specify an animation that is played when a Super Weapon with Type =ChronoSphere \n is fired, but actually doesn't do anything."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoBlast",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "When a Super Weapon with Type =ChronoWarp \n is activated, this animation is played over the area previously targeted by a SuperWeapon with Type =ChronoSphere \n (the teleportation source)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoBlastDest",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "When a Super Weapon with Type =ChronoWarp \n is activated, this animation is played over its target area (teleportation destination)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WarpIn",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Is supposed to specify an animation that is played when a teleporting unit arrives at the destination cell, but is actually unused, as the game plays the WarpOut = \n animation instead."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WarpOut",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is played when a teleporting unit teleports, in both source and destination cells."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WarpAway",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is played after an object has been destroyed by a warhead with Temporal =yes \n set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IronCurtainInvokeAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is played when a SuperWeapon with Type =IronCurtain \n is activated."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ForceShieldInvokeAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is displayed when a superweapon with Type =ForceShield \n is activated."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WeaponNullifyAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a unit under the Iron Curtain effect is being attacked."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoSparkle1",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played over an object while a warhead with Temporal =yes \n is attacking it."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryExplode",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =3 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "FlamingInfantry",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =4 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryHeadPop",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =6 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryNuked",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =7 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryVirus",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =8 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryBrute",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =10 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryMutate",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played when a warhead with InfDeath =9 \n kills an InfantryType without NotHuman =yes \n ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Behind",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is played as an indicator of units being hidden behind other objects, if ShowHidden =yes \n is set in ra2(md).ini \n (in other words, when \"Show Hidden Objects\" is checked in Game Options)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MoveFlash",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that gets played when you order your units to move to a certain cell."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Parachute",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation used by landing paratroopers."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BombParachute",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation used as a parachute for falling bombs. This was hardcoded in Red Alert, and transformed into a flag, but not used, in later games."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropZoneAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation that is displayed as drop zone flare. For more information, see map trigger action #8. \n  See Also \n  DropZoneRadius"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "EMPulseSparkles",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies an animation that is played over units affected by an Electro Magnetic Pulse (a warhead with EMEffect =yes ). \n With the RockPatch , working EMP logic can be re-enabled, so this tag is actually usable."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LargeVisceroid",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The type representing the large Visceroid resulting from the merger of two small Visceroids that came within cell range of each other. \n In Tiberian Sun , this has to be set to a valid type if there are SmallVisceroid=yes units, otherwise merging will result in an IE. \n LargeVisceroid is read in Red Alert 2 and Yuri's Revenge , but as Visceroids will not merge, it is obsolete. \n  On VehicleTypes \n  Flag: LargeVisceroid File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: VehicleTypes Defines whether this unit is a small Visceroid. Visceroids randomly wander around on their own, are immune to EMP and Jellyfish , use attack animations, retreat to the nearest patch of Tiberium when damaged into yellow health, and have a few more special properties. Large Visceroids do not try to merge with other Visceroids. This can be used to trigger trains to move without needing map triggers, although they will be unstoppable. In Red Alert 2 and Yuri's Revenge Visceroids will not retreat to patches of Tiberium. See also SmallVisceroid Jellyfish"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SmallVisceroid",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The type of the unit to be created when TiberiumDeathToVisceroid=yes and infantry units either die of BehavesLike=Gas particles or of Tiberium damage if TiberiumProof=no . The units are owned by the first country of the side Neutral . \n If infantry can 'transmogrify', you have to set this tag or IEs will occur. \n SmallVisceroid is read in Red Alert 2 and Yuri's Revenge , but as there is no Tiberium damage, it is obsolete. \n  On VehicleTypes \n  Flag: SmallVisceroid File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: VehicleTypes Defines whether this unit is a small Visceroid. Visceroids randomly wander around on their own, are immune to EMP and Jellyfish , use attack animations, retreat to the nearest patch of Tiberium when damaged into yellow health, and have a few more special properties. Small Visceroids in particular merge into a single [General] → LargeVisceroid= if two units with SmallVisceroid=yes come within one cell range of each other. If you use this tag in Tiberian Sun , you have to set [General] → LargeVisceroid= to a vaild type, otherwise merging will result in an IE. In Red Alert 2 and Yuri's Revenge Visceroids will not retreat to patches of Tiberium. See also LargeVisceroid Jellyfish TiberiumProof TiberiumDeathToVisceroid TiberiumTransmogrify"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TiberiumHeal",
      "value_type": "float",
      "default_value": "0.0166667",
      "adds_to_list": "",
      "desc": "This flag specifies the number of minutes between restoring the amount of hitpoints defined by RepairStep (for VehicleTypes and AircraftTypes ) and IRepairStep (for InfantryTypes ) to applicable TechnoTypes with TiberiumHeal=yes ↓ that are positioned above OverlayTypes with Tiberium=yes . \n \n  For InfantryTypes, VehicleTypes, and AircraftTypes \n  Flag: TiberiumHeal File(s): Rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: false Applicable to: InfantryTypes , VehicleTypes , AircraftTypes Applicable TechnoTypes with this flag set to true and that are positioned above OverlayTypes with Tiberium=yes , are restored hitpoints defined by RepairStep (for VehicleTypes and AircraftTypes) and IRepairStep (for InfantryTypes) at a rate defined by TiberiumHeal ↑ (in [General] ). The Tiberian Sun engine makes no special check for whether or not an AircraftType with TiberiumHeal=yes is in flight or not when restoring hitpoints for being over Tiberium. In other words, aircraft are not required to land in order to heal from Tiberium."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SelfHealInfantryFrames",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "Number of frames between healing infantry by the amount specified by SelfHealInfantryAmount= when the player has captured a structure with a InfantryGainSelfHeal= specified. This is an amendment to the Hospital=yes logic that was attached to structures in standard Red Alert 2. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SelfHealInfantryAmount",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "If a BuildingType's InfantryGainSelfHeal is set to a value greater than zero, all InfantryTypes on the map belonging to the BuildingType's owner receive InfantryGainSelfHeal * SelfHealInfantryAmount points to their Strength each SelfHealInfantryFrames number of frames, until Strength reaches the InfantryType's maximum value (it does not overflow)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SelfHealUnitFrames",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "Number of frames between healing units by the amount specified by SelfHealUnitAmount= when the player has captured a structure with a UnitsGainSelfHeal= specified. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SelfHealUnitAmount",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Number of Strength= points to restore every SelfHealUnitFrames= when the player owns a structure with a UnitsGainSelfHeal= specified. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisitePower",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as POWER in the prerequisite system. For more information, see The Prerequisite System ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteFactory",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as FACTORY in the prerequisite system . \n  Bugs/Side-Effects/Unexpected Limitations \n When determining if it can build a building that has FACTORY as its prerequisite , the AI actually checks for buildings listed in BuildWeapons and not PrerequisiteFactory ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteBarracks",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as BARRACKS in the prerequisite system . \n  Bugs/Side-Effects/Unexpected Limitations \n When determining if it can build a building that has BARRACKS as its prerequisite , the AI actually checks for buildings listed in BuildBarracks and not PrerequisiteBarracks ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteRadar",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as RADAR in the prerequisite system. For more information, see The Prerequisite System ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteTech",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as TECH in the prerequisite system. For more information, see The Prerequisite System ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteProc",
      "value_type": "generic>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists BuildingTypes that count as PROC in the prerequisite system. For more information, see The Prerequisite System ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ZoomInFactor",
      "value_type": "float",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "The following information has not yet been verified. If you can contribute, please do so. \n This is utilized by the DirectDraw routine which allows the game to zoom in on a waypoint or the players Radar screen through the relevant actions in a map file, and determines the factor of that zoom as a multiple of the current rate of the zoom."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RevealByHeight",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The following information has not yet been verified. If you can contribute, please do so. \n  \n Determines the number of adjacent cells which are revealed by the unit as a result of it being higher up on the ground (e.g. on the edge of a cliff and looking down)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AllowShroudedSubteranneanMoves",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines if subterranean units can be selected and their health bars seen by players when they are under the shroud."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AircraftFogReveal",
      "value_type": "int",
      "default_value": "6",
      "adds_to_list": "",
      "desc": "This flag defines how many adjacent cells are revealed by aerial units due to their height above the ground."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MinLowPowerProductionSpeed",
      "value_type": "float",
      "default_value": "0.5",
      "adds_to_list": "",
      "desc": "Minimum production speed as a result of the player having low power. This applies after LowPowerPenaltyModifier= is applied (see below)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaxLowPowerProductionSpeed",
      "value_type": "float",
      "default_value": "0.9",
      "adds_to_list": "",
      "desc": "Maximum speed you can build things at when you have low power. This is new in Red Alert 2 and was implemented because most of the time you will be short of 10 or 20 power units (so 99% power is treated as this percentage)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LowPowerPenaltyModifier",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This determines if you get a 'double penalty' or 'half penalty' to production speed as a result of low power. This is multiplied by the number of power units you are short of to get the actual penalty to build speed. This defaults to a value of 1, so 2 would mean a 30% shortage of power thus a 60% penalty, and 0.5 would mean a 15% penalty."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MultipleFactory",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Controls the bonus multiplier to building and unit production speed when multiple factories are present. Applies to all factory types. \n  In Tiberian Sun and Firestorm \n  For every nth factory, the production speed is calculated with the following formula, provided that n > 1 : \n  Build speed = 100% * MultipleFactory * (n-1) \n  Due to the nature of this formula, the production speed bonus behaves rather irrationally. See the following examples: \n  If 0.5 < MultipleFactory < 1.0 , building a second factory slows down the production speed, while building more than two factories increases it. If 0.33... < MultipleFactory < 0.5 , you need more than three factories to increase the production speed. And so on. If MultipleFactory=1.0 , building a second factory gives no bonus at all, but getting a third factory doubles the production speed. \n  In Red Alert 2 and Yuri's Revenge \n Contrary to previous C&C games, MultipleFactory is now a linear, cumulative multiplier to factory production speed, with lower values meaning faster speed. For example, when MultipleFactory=0.8 you get a build rate of 1.0 for having one factory, 0.8 for having two, 0.64 for having three, 0.512 for having four, etc."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaximumCheerRate",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "How often, in frames, a team is allowed to cheer when commanded to from the keyboard hotkey (as defined in KEYBOARD.INI) or from the Advanced Command Bar (if defined in UI.INI)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TreeFlammability",
      "value_type": "float",
      "default_value": "0.1",
      "adds_to_list": "",
      "desc": "The chance a tree is ignited by an adjacent tree that is on fire. \n Each burning tree terrain object has a 1% probability each frame of game time to try to ignite trees next to it. If this happens, all terrain objects in the eight surrounding cells are handled separately, each now having a TreeFlammability chance of being ignited as if hit by a Sparky=yes warhead. \n In other words: A tree next to a burning tree has a 0.01 * TreeFlammability chance of being ignited each frame (15 frames equal 1 second). The average time until being ignited is 50 frames / TreeFlammability . \n Forest fires are not available in Red Alert 2 and Yuri's Revenge . \n  Average time to ignite \n  TreeFlammability Average time to ignite 1.00 ( 100% ) 50 frames (about 3 seconds) 0.70 ( 70% ) ~71 frames (about 5 seconds) 0.50 ( 50% ) 100 frames (about 7 seconds) 0.20 ( 20% ) 250 frames (about 17 seconds) 0.10 ( 10% ) 500 frames (about 33 seconds) 0.07 ( 7% ) ~714 frames (about 47 seconds) 0.05 ( 5% ) 1000 frames (about 67 seconds) 0.02 ( 2% ) 2500 frames (about 167 seconds) 0.01 ( 1% ) 5000 frames (about 333 seconds) \n  See also \n  Sparky"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MissileROTVar",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "According to the rules(md).ini comment, this flag would've defined the rate of turn fluctuation percentage of guided missiles ( projectiles with ROT greater than 1). It's read but not used."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MissileSafetyAltitude",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "The height, in leptons, above ground level that a missile fired at an air target that dies will fly to before detonating."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MissileSpeedVar",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "According to the rules(md).ini comment, this flag would've defined the speed fluctuation percentage of guided missiles ( projectiles with ROT greater than 1). It's read but not used."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropPodWeapon",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This tag defines an optional weapon mounted on a unit with the Drop Pod Locomotor = which is automatically fired as it descends. \n If this weapon is defined, its Report list has to contain at least one item, otherwise an Internal Error will occur. \n If and only if this weapon is defined, the descending Drop Pod will use the animation type SMOKEY to create a smoke trailer. If the animation SMOKEY is not defined, an Internal Error will occur."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropPodHeight",
      "value_type": "int",
      "default_value": "1500",
      "adds_to_list": "",
      "desc": "The height above ground level, in leptons, that a unit with the Drop Pod Locomotor= appears at."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropPodSpeed",
      "value_type": "int",
      "default_value": "40",
      "adds_to_list": "",
      "desc": "The speed of descent of a unit with the Drop Pod Locomotor=."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DropPodAngle",
      "value_type": "float",
      "default_value": "1.5708",
      "adds_to_list": "",
      "desc": "The angle of descent for a unit with the Drop Pod Locomotor=. Measured in radians as the CLSID makes them drop in a diagonal line (0.40 is flat, 1.18 is very steep)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CrewEscape",
      "value_type": "float",
      "default_value": "0.5",
      "adds_to_list": "",
      "desc": "Percentage chance that crew will escape from a destroyed object that has Crewed=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TunnelSpeed",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This flag determines how fast vehicles with the subterranean locomotor will travel vertically, i.e. when submerging to or emerging from the ground. Together with the unit's ROT setting, it also affects how fast the unit rotates as it begins to burrow. Higher values indicate faster speed. \n  Note: This flag does not control how fast units move horizontally when underground, nor how fast they rotate when emerging from the ground – the former setting is hardcoded, while the latter is solely controlled by the unit's ROT ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverDampen",
      "value_type": "float",
      "default_value": "0.8",
      "adds_to_list": "",
      "desc": "The percentage dampening affect on hover vehicle 'bounciness'. Used by the Locomotor= for hover vehicles and affects them all."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverBob",
      "value_type": "float",
      "default_value": "30",
      "adds_to_list": "",
      "desc": "The time, in minutes, between hover 'bobs'."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverHeight",
      "value_type": "int",
      "default_value": "120",
      "adds_to_list": "",
      "desc": "The height above ground level, in leptons, that vehicles hover. Used by the Locomotor= for hover vehicles and affects them all."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverBoost",
      "value_type": "float",
      "default_value": "1.3",
      "adds_to_list": "",
      "desc": "The percentage adjustment to the units normal Speed= when travelling straight."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverAcceleration",
      "value_type": "float",
      "default_value": "0.03",
      "adds_to_list": "",
      "desc": "The time, in minutes, to accelerate to full speed."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HoverBrake",
      "value_type": "float",
      "default_value": "0.03",
      "adds_to_list": "",
      "desc": "The time, in minutes, to decelerate to a full stop."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranRatio",
      "value_type": "float",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "This flag determines how many times the own value in credits a unit must destroy more than in order to be promoted. It is based on the Cost = values of objects and a straight multiplier.\nNote that this isn't limited to enemy objects. Civilian/Neutral, as well as your very own objects when Temporal =yes weapons are involved, count too. \n Note the actual promotion only happens AFTER a unit has destroyed MORE than VeteranRatio * Cost = . \n  Example \n  The default setting for VeteranRatio is 3.0, the default price for a GI is 200 and the default price for a Conscript is 100.\nTherefore, in order to gain veterancy, a GI would have to destroy objects worth 200 * 3.0 + 1 == 601 credits for a promotion of one level. That could be, for example, more than six Conscripts, more than one Robot tank, or more than two Flak Troopers. The Conscript, however, only has to destroy 100 * 3.0 + 1 == 301 credits worth of shit to get promoted, meaning more than two GIs would be enough. \n As you'll surely recognize, this means two things: \n  Destroying an expensive object with a cheap unit results in a very high chance of instant or very soon promotion. Expensive units need to destroy a lot of stuff to get promoted (1 Prism Tank --> $1200 * 3.0 + 1 == $3601 == at least 37 Conscripts). \n  Exceptions \n Objects flagged as DontScore =yes \n or Insignificant =yes \n do not count as kills, and therefore don't add to the total amount of credits destroyed by a unit. As such, they don't bring them closer to promotion."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranCombat",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is one of the several Veteran Factors that control the bonuses given by VeteranAbilities and EliteAbilities . \n Contrary to popular belief, these bonuses do not stack, meaning that a FIREPOWER elite bonus will not further increase the damage dealt by a unit with a FIREPOWER veteran bonus. \n  In Tiberian Sun \n  VeteranCombat is an additive multiplier to damage dealt by the object's Primary , Secondary , and, in case of EliteAbilities=FIREPOWER , Elite weapons. \n  Damage * (1.0 + VeteranCombat) \n  Example: If the unit's weapon deals 100 base Damage , then the hit would be increased to 125 (assuming VeteranCombat=0.25 ). \n  100 * (1.0 + 0.25) = 125 \n  In Red Alert 2 \n  Similar to TS, except the math has been simplified. VeteranCombat is now a direct multiplier to the base Damage inflicted by the weapon (s) of objects that benefit from the FIREPOWER promotional bonus. \n Example: If the unit's weapon deals 100 base Damage , then the hit would be increased to 110 (assuming VeteranCombat=1.1 ). \n  100 * 1.1 = 110 \n  Bugs/Side-Effects/Unexpected Limitations \n  VeteranCombat has no effect if the weapon uses a sonic wave ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranSpeed",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is one of the several Veteran Factors that control the bonuses given by VeteranAbilities and EliteAbilities . VeteranSpeed is a straight multiplier to the Speed of units that benefit from the FASTER promotional bonus. Contrary to popular belief, these bonuses do not stack, meaning that a FASTER elite bonus will not further increase the maximum movement speed of a unit with a FASTER veteran bonus. \n Example: if the unit's Speed is 5, then it would be increased to 6 (assuming VeteranSpeed=1.2 ). \n  5 * 1.2 = 6."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranSight",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is one of the several Veteran Factors that control the bonuses given by VeteranAbilities and EliteAbilities . VeteranSight is a straight multiplier to the Sight of units that benefit from the SIGHT promotional bonus. Contrary to popular belief, these bonuses do not stack, meaning that a SIGHT elite bonus will not further increase the sight of a unit with a SIGHT veteran bonus. \n Example: if the unit's Sight is 6, then it would be increased to 9 (assuming VeteranSight=1.5 ). \n  6 * 1.5 = 9. \n  \n The comment, \"; multiplier to sight !!!going past ten is a hard code Vegas crash!!!\", seems not to be applicable in the Tiberian Sun  engine , as the limit for Sight is in fact 11, not 10. Yes, it works."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranArmor",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is one of the several Veteran Factors that control the bonuses given by VeteranAbilities and EliteAbilities . VeteranArmor divides received damage by the specified factor for units that benefit from the STRONGER promotional bonus. Contrary to popular belief, these bonuses do not stack, meaning that a STRONGER elite bonus will not further increase the armor of a unit with a STRONGER veteran bonus. \n Example: if the unit's Strength is 1000, and each hit deals 100 base damage, it would take 16 hits to destroy the unit (assuming VeteranArmor=1.5 ). \n  100 / 1.5 = 66.666666. Decimals are dropped. 66 * 16 = 1056. \n  See Also \n  Armor Multipliers"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranROF",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is one of the several veteran factors that control the bonuses given by VeteranAbilities and EliteAbilities . VeteranROF alters the ROF of the Primary and Secondary , and (in case of EliteAbilities=ROF ) Elite weapons of units that benefit from the ROF promotional bonus. Contrary to popular belief, these bonuses do not stack, meaning that a ROF elite bonus will not further modify the rate of fire of a unit with a ROF veteran bonus. \n  In Tiberian Sun and Firestorm \n  VeteranROF acts as a divisor to ROF : \n  [New ROF] = ROF / (1.0 + VeteranROF) \n  Example: if the weapon's ROF is 30, then it would be decreased to 25 (assuming VeteranROF=0.2 ). \n  30 / (1.0 + 0.2) = 25 \n  In Red Alert 2 and Yuri's Revenge \n  Like most of the other veteran factors, VeteranROF has been simplified; it is now a straight multiplier to ROF . \n Example: if the weapon's ROF is 20, then it would be decreased to 12 (assuming VeteranROF=0.6 ). \n  20 * 0.6 = 12. \n  Note: Since ROF is really the delay between shots, smaller numbers yield faster firing. Values of VeteranROF greater than 1.0 actually decrease the firing rate of the unit. \n  Bugs/Side-Effects/Unexpected Limitations \n  VeteranROF has no effect if the weapon uses a sonic wave or has an attached particle system ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeteranCap",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies the number of levels of promotion available in the game, counted from 0 (zero). Setting this to a number higher than \"2\" will cause problems with everything related to veterancy, as the game does not know how to deal with the additional levels."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ExplosiveVoxelDebris",
      "value_type": "vector<VoxelAnimation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of VoxelAnims which can be spawned as debris from explosions."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BridgeVoxelMax",
      "value_type": "int",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "Logic related to BridgeVoxelMax , as a whole or in part, is obsolete in Tiberian Sun to Yuri's Revenge . \n  Used to control maximum debris from each destroyed bridge section. Debris in question being presumably ExplosiveVoxelDebris . \n This entry is read but is not used."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TireVoxelDebris",
      "value_type": "VoxelAnimation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The VoxelAnim that appears as tire debris from destroyed vehicles."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ScrapVoxelDebris",
      "value_type": "VoxelAnimation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The VoxelAnim that appears as scrap debris from vehicles."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CloakingStages",
      "value_type": "int",
      "default_value": "9",
      "adds_to_list": "",
      "desc": "When an object cloaks/decloaks (or, in case of submarine units in Red Alert 2 , submerges/emerges), it turns invisible/visible in steps of increasing/decreasing translucency. This flag determines the number of those steps. \n Higher number of stages means slower overall cloaking, adjusted further by CloakingSpeed for objects with inherent stealth ability . \n  See Also \n  CloakingSpeed CloakDelay Cloakable"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ShipSinkingWeight",
      "value_type": "float",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "Objects with Naval=yes (i.e. ships) and Weight= set higher than this value will sink when destroyed instead of exploding."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IceCrackingWeight",
      "value_type": "float",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Vehicles with a higher weight than this value will cause ice to crack when they move on it. Moving onto an already cracked ice will cause the ice to break and the unit to sink through and disappear. \n Although the flag is parsed, this logic does not work in Red Alert 2 as the ice  tile  sets themselves are not parsed from the terrain control INI files as they were in Tiberian Sun ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IceBreakingWeight",
      "value_type": "float",
      "default_value": "4",
      "adds_to_list": "",
      "desc": "Vehicles with a higher weight than this value will break through ice (cracked or not) when they move on it and sink and disappear. \n Although the flag is parsed, this logic does not work in Red Alert 2 as the ice tile sets themselves are not parsed from the terrain control INI files as they were in Tiberian Sun . \n  Bugs/Side-Effects/Unexpected Limitations \n Vehicles weighing more than this value will not only sink when moving on ice, but upon moving to any water tile, regardless if the units are amphibious or hovering . This means the vehicles will even sink through low bridges. Like the ice logic in general, this effect/bug is only applicable to snow maps, however."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CliffBackImpassability",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines how impassable the terrain behind cliffs is. Basically, the flag controls how far away from the edge of a cliff a structure has to be placed, or how near to the edge of a cliff a unit can move. This is done by changing the LandType of certain cells next to and behind cliffs to Rock . 2 is the only value that will work correctly, and even then the game will assume that all cliffs are 4 cells high."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PlacementDelay",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "The number of minutes to pass before the AI tries to place an object on the map if a temporary blockage is detected (for example a moving unit is in the way). Can be used to slow down or speed up the rate of AI base production."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TrackedUphill",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "When a VehicleType with the Drive Locomotor and SpeedType=Track is moving from one cell to another, and the destination cell is elevated higher than the source one, this multiplier is applied to their normal Speed. \n  See Also \n  WheeledUphill WheeledDownhill TrackedDownhill"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TrackedDownhill",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "When a VehicleType with the Drive Locomotor and SpeedType=Track is moving from one cell to another, and the destination cell is elevated lower than the source one, this multiplier is applied to their normal Speed. \n  See Also \n  WheeledUphill WheeledDownhill TrackedUphill"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WheeledUphill",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "When a VehicleType with the Drive Locomotor (except those with SpeedType=Track ) is moving from one cell to another, and the destination cell is elevated higher than the source one, this multiplier is applied to their normal Speed. \n  See Also \n  WheeledDownhill TrackedUphill TrackedDownhill"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WheeledDownhill",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "When a VehicleType with the Drive Locomotor (except those with SpeedType=Track ) is moving from one cell to another, and the destination cell is elevated lower than the source one, this multiplier is applied to their normal Speed. \n  See Also \n  WheeledUphill TrackedUphill TrackedDownhill"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WindDirection",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Defines the direction of the simulated wind system. The flag accepts values from 0 to 7, where each number represents a point of the compass. 0 is for North (top-right in the player's view), and increasing numbers rotate clockwise on the compass. \n The wind causes gas particle systems move into the direction defined in WindDirection. However, it is disabled by default in each particle system. To enable it, change the value of the WindEffect flag to anything between 1-5 (0 is no effect). Increasing numbers cause the wind to have stronger effect on the corresponding particles."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CameraRange",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Logic related to CameraRange , as a whole or in part, is obsolete in Tiberian Sun to Yuri's Revenge . \n Distance, in cells, around a 'camera' weapon to reveal the map. If you Camera to a weapon, this tells the game that the weapon inflicts no damage but instead reveals the map for this number of cells around the 'target'. This is a useful way to make a 'spy plane' type weapon."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "FlightLevel",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "Specifies the height (in leptons ) that this aircraft will fly at. The value in [ General ] serves as a default value in case a particular aircraft doesn't specify a custom value. \n  See also \n  CruiseHeight - for JumpJet units"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ParachuteMaxFallRate",
      "value_type": "int",
      "default_value": "-3",
      "adds_to_list": "",
      "desc": "This can be used to determine the speed, in cells per second, at which units with a parachute fall to the ground."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NoParachuteMaxFallRate",
      "value_type": "int",
      "default_value": "-100",
      "adds_to_list": "",
      "desc": "This can be used to determine the speed, in cells per second, at which units without a parachute fall to the ground. This seems to be used for objects like planes which crash from the sky."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RepairBay",
      "value_type": "vector<BuildingType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "For AI purposes this lists the structures to send units to when they are in need of repair. Must be valid structure names from the [BuildingTypes]list and be defined as all structures are."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GDIGateOne",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "For Allied AI base building and targeting purposes this defines the structure to be used as a NW - SE gate within a wall. Must be a valid structure name from the [BuildingTypes]list and be defined as all structures are. It is unknown if the AI uses this in Red Alert 2, although the gate logic itself does work."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GDIGateTwo",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "For Allied AI base building and targeting purposes this defines the structure to be used as a NE - SW gate within a wall. Must be a valid structure name from the [BuildingTypes]list and be defined as all structures are. It is unknown if the AI uses this in Red Alert 2, although the gate logic itself does work."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NodGateOne",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "For Soviet AI base building and targeting purposes this defines the structure to be used as a NW - SE gate within a wall. Must be a valid structure name from the [BuildingTypes]list and be defined as all structures are. It is unknown if the AI uses this in Red Alert 2, although the gate logic itself does work."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NodGateTwo",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "For Soviet AI base building and targeting purposes this defines the structure to be used as a NE - SW gate within a wall. Must be a valid structure name from the [BuildingTypes]list and be defined as all structures are. It is unknown if the AI uses this in Red Alert 2, although the gate logic itself does work."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WallTower",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "For Allied AI base building and targeting purposes this defines the structure to be used as a defensive structure which forms part of a wall and hence can be built within one. Must be a valid structure name from the [BuildingTypes]list and be defined as all structures are."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Shipyard",
      "value_type": "vector<BuildingType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "For AI base building and targeting purposes this lists the structures to be used as a Naval Yard. Must be valid structures name from the [BuildingTypes]list and be defined as all structures are."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GDIPowerPlant",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The powerplant listed here will be built by the GDI (or Allied) AI whenever it needs power, however AIBuildThis = still applies, and as such the first powerplant is built from the AIBuildThis que \n  see also \n  NodAdvancedPower NodRegularPower ThirdPowerPlant"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NodRegularPower",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The powerplant listed here will be built by the Nod (or soviet) AI whenever it needs power, however AIBuildThis = still applies, and as such the first powerplant is built from the AIBuildThis que \n  see also \n  NodAdvancedPower GDIPowerPlant ThirdPowerPlant"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NodAdvancedPower",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This tag will cause the soviet AI to build exactly one of the listed type of powerplant instead of a normal type of powerplant, assuming that AIBasePlanningSide = has been set correctly \n  see also \n  ThirdPowerPlant NodRegularPower GDIPowerPlant"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThirdPowerPlant",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The powerplant listed here will be built by the Yuri AI whenever it needs power, however AIBuildThis = still applies, and as such the first powerplant is built from the AIBuildThis que \n  see also \n  NodAdvancedPower NodRegularPower GDIPowerPlant"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrerequisiteProcAlternate",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies a single VehicleType that counts as PROC for prerequisite listing. Meaning, If a certain object's Prerequisite \n includes PROC \n , building this VehicleType will count as fulfilling a requirement for generic PROC prerequisite. For more info, see The Prerequisite System ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BaseUnit",
      "value_type": "vector<VehicleType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This lists the VehicleType(s) that is considered an MCV: it is capable of deploying into a structure with ConstructionYard =yes set. This is used when the game determines which unit the player will always get when starting a skirmish. \n In the absence of a Construction Yard, this unit also counts as \"home base\" for centering the camera on the player's base using the appropriate keyboard shortcut. This is also important when the \" Short Game \" game option is set, as the player will not automatically lose when he controls a Base Unit but no structures. \n Although the unit specified does not have to be an MCV, or even a VehicleType necessarily, doing otherwise will result in quirky behavior. \n \n  In TS and FS \n  Only one VehicleType should be specified here as the game is hardcoded to share a single MCV unit between playable Sides . \n \n  In RA2 \n  A comma-separated list of two VehicleTypes should be used. The first is the Allied MCV and the second is the Soviet's. \n \n  In YR \n A comma-separated list of three VehicleTypes should be used. In addition to the Allies' and the Soviet's, an MCV for Yuri's Side is parsed."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HarvesterUnit",
      "value_type": "vector<VehicleType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This lists the preferred units to build for Ore mining purposes. Must be valid unit names from the [VehicleTypes]list and be defined as all units are."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PadAircraft",
      "value_type": "vector<AircraftType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This statement must be present and must include only valid AircraftTypes , otherwise you will get an IE upon entering the game (the moment when you gain control over your units at the very beginning of a session). \n The first aircraft on this list is spawned whenever a BuildingType with HoverPad=yes is constructed and [General] → SeparateAircraft=no is set. The aircraft will appear docked to the building regardless of whether or not the building has Helipad=yes set. \n In Red Alert 2 , this flag also lists the AircraftTypes that must dock with a BuildingType that has Helipad=yes set. This list should include all aircraft with AirportBound=yes set in order to make sure that production is not continued when subsequently produced aircraft would have nowhere to land. Failure to list such aircraft results in the first AirportBound aircraft beyond the number of available docks switching to \"On Hold\" state about 40% into the construction process and never completing."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Paratrooper",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Logic related to Paratrooper , as a whole or in part, is obsolete in Tiberian Sun to Yuri's Revenge . \n  Presumably, this flag would have defined the infantry that parachutes from an aircraft . Such a logic exists in Red Alert but it isn't tied to any rules.ini key. \n This flag is read but it does nothing. \n  There is a PParatrooper tag in [General], which is actually a spelling mistake of Westwood. \n  See also \n  Pilot Crew"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SecretInfantry",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This flag specifies the InfantryTypes that can be granted as bonuses by BuildingTypes with SecretLab=yes set. \n  For [BuildingTypes] \n  Flag: SecretInfantry File(s): rules(md).ini Values: Strings : Normal text. (Limited to: InfantryTypes) Applicable to: BuildingTypes This flag specifies a single InfantryType that should be granted as a bonus by this building, if it also has SecretLab=yes . Note that if this flag is set, the secret lab loses any randomness and will always grant this InfantryType. See also SecretUnit SecretBuilding Secret Lab System"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SecretUnits",
      "value_type": "vector<VehicleType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This flag defines the VehicleTypes that can be granted as bonuses by SecretLab=yes buildings."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SecretBuildings",
      "value_type": "vector<BuildingType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This flag defines the BuildingTypes that can be granted as bonuses by SecretLab=yes buildings."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoDelay",
      "value_type": "int",
      "default_value": "60",
      "adds_to_list": "",
      "desc": "The delay, in frames, that units remain 'static' after teleporting by any method."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoReinfDelay",
      "value_type": "int",
      "default_value": "60",
      "adds_to_list": "",
      "desc": "ChronoReinfDelay specifies the delay in frames that units will take to fully \"phase in\" after being given to a player via the \"reinforce by chronoshift\" map trigger. This is needed because the units are simply created where they are reinforced to, rather than being teleported some distance; thus the normal chronoshift algorithm cannot be used to determine the delay."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoDistanceFactor",
      "value_type": "int",
      "default_value": "32",
      "adds_to_list": "",
      "desc": "This flag is used in determining the time in frames that it takes for a unit with Locomotor={4A582747-9839-11d1-B709-00A024DDAFD1} (chronoshift) to phase in 1 after moving to a new location. \n If [General] → ChronoTrigger=yes and the unit moves a sufficient distance in leptons of at least [General] → ChronoRangeMinimum , the following formula is used to calculate phase in time: \n  time = distance / ChronoDistanceFactor \n  Actual phase-in time can never be less than [General] → ChronoMinimumDelay . \n  See also \n  ChronoMinimumDelay ChronoTrigger ChronoRangeMinimum \n  Notes \n  1 ↑ While a unit is phasing in it cannot move or fire any weapons , but it can still take damage and perform some auxilliary functions such as deploying."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoTrigger",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This flag determines whether or not the amount of time in frames that it takes for a unit with Locomotor={4A582747-9839-11d1-B709-00A024DDAFD1} (chronoshift) to phase in 1 after moving to a new location, should be a function of the distance traveled. \n If ChronoTrigger=yes and the unit moves a sufficient distance in leptons of at least [General] → ChronoRangeMinimum , phase-in time depends on [General] → ChronoDistanceFactor . Otherwise, the time will always be equal to [General] → ChronoMinimumDelay . \n  See also \n  ChronoMinimumDelay ChronoDistanceFactor ChronoRangeMinimum \n  Notes \n  1 ↑ While a unit is phasing in it cannot move or fire any weapons , but it can still take damage and perform some auxilliary functions such as deploying."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoMinimumDelay",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the minimum amount of time in frames that it takes for a unit with Locomotor={4A582747-9839-11d1-B709-00A024DDAFD1} (chronoshift) to phase in 1 after moving to a new location. \n Phase-in time may only be longer than ChronoMinimumDelay if [General] → ChronoTrigger=yes and the unit moves a sufficient distance in leptons of at least [General] → ChronoRangeMinimum . In that case, the exact time depends on [General] → ChronoDistanceFactor . \n  See also \n  ChronoTrigger ChronoDistanceFactor ChronoRangeMinimum \n  Notes \n  1 ↑ While a unit is phasing in it cannot move or fire any weapons , but it can still take damage and perform some auxilliary functions such as deploying."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoRangeMinimum",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the distance in leptons , within which a unit with Locomotor={4A582747-9839-11d1-B709-00A024DDAFD1} (chronoshift) can move in order to retain a phase-in 1 time equal to [General] → ChronoMinimumDelay . \n If the unit moves a sufficient distance of at least ChronoRangeMinimum and [General] → ChronoTrigger=yes , the exact phase-in time depends on [General] → ChronoDistanceFactor . Otherwise, the time will always be equal to [General] → ChronoMinimumDelay . \n  See also \n  ChronoMinimumDelay ChronoTrigger ChronoDistanceFactor \n  Notes \n  1 ↑ While a unit is phasing in it cannot move or fire any weapons , but it can still take damage and perform some auxilliary functions such as deploying."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AlliedDisguise",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the default InfantryType that a spy trained by an Allied army will appear as if his MakeUpKit weapon has not yet been used. This is set to a valid infantry unit that is listed in the InfantryTypes list and is defined as per all other infantry units. \n  See also \n  DefaultDisguise"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovietDisguise",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This defines the default InfantryType that a spy will appear as to a Soviet army if his MakeUpKit weapon has not been used (which will only be the case if the enemy has no infantry units on the map). You should ensure this is set to a valid infantry unit, and ensure that infantry unit is listed in the [InfantryTypes] list and is defined as per all other infantry units."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThirdDisguise",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This defines the default InfantryType that a spy will appear as to a Yuri army if his MakeUpKit weapon has not been used (which will only be the case if the enemy has no infantry units on the map). You should ensure this is set to a valid infantry unit, and ensure that infantry unit is listed in the [InfantryTypes] list and is defined as per all other infantry units. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpyPowerBlackout",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Time, in frames, for which a spy will shut down the enemy power when he infiltrates any power plant."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpyMoneyStealPercent",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "The percentage of total credits possessed by an enemy player, that will be stolen by a Agent =yes infantry, after it enters a structure with a positive Storage value. \n  See also \n  Infiltration system"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AttackCursorOnDisguise",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not you automatically get an 'attack' cursor on an object with CanDisguise=yes set, even if they have not been detected as being disguised."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PurifierBonus",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "Percentage added to the value of the harvested ore each time a unit unloads ore on a structure with ResourceDestination =yes . This is an added value, not a multiplier, and it is applied once per each structure with OrePurifier =yes the player owns. \n  Notes \n Although it doesn't really matter for Red Alert 2 and Yuri's Revenge, as tiberium storage logic is disabled, the tag doesn't actually increase the amount of ore the player receives, but instead gives extra funds per each unload."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Engineer",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Defines an InfantryType that will spawn from a destroyed construction yard. However, Red Alert 2 (and Yuri's Revenge) do not distinguish between factions so the Engineer spawned will always be the infantry defined by this tag. \n  Flag: Engineer File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: InfantryTypes Determines whether this InfantryType has the properties of an engineer, which allows that infantry to enter any structure that has BridgeRepairHut=yes set, capture any structure that has Capturable=yes set and to repair any structures owned by that player. In Red Alert 2 and Yuri's Revenge , this also prevents infantry from using a weapon on any object, should they be given one, except if the weapon has a warhead with BombDisarm=yes set, in which case it will be able to target and successfully be used on objects which have an IvanBomb attached. Weapons of any kind can be force-fired on the ground."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Technician",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Defines an InfantryType that is used as crew for the unplayable sides. These sides are the ones not named \"GDI\" or \"Nod\" in TS, and the first two or three defined sides in RA2 and YR respectively. \n Technicians also have a 15% probability to spawn as survivors instead of ordinary crew from units and buildings if the unit or building is armed, i.e. it has a weapon or it is occupied. This does not apply in case the game already determined an Engineer should be spawned. \n If at least one crewed building can spawn a technician on destruction or when selling, Technician has to be set to a valid InfantryType, otherwise the game will crash in both cases. \n  See also \n  Crew System Crew Engineer"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Pilot",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Logic related to Pilot , as a whole or in part, is obsolete in Tiberian Sun to Yuri's Revenge . \n  Presumably, this flag would have defined the infantry that parachutes from an aircraft when it is destroyed while in flight. Such a logic exists in Red Alert but it isn't tied to any rules.ini key. \n This flag is read but it does nothing. \n  See also \n  Paratrooper Crew"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AlliedCrew",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the InfantryType that emerges from a destroyed unit or building for Countries on Side , \"GDI\" 1 . This must be set to a valid InfantryType, otherwise IEs could arise. \n  See also \n  SovietCrew ThirdCrew Crew System \n  Footnotes \n  1 ↑ Note that \"GDI\" is residual from Tiberian Sun and is treated as the Allied side in Red Alert 2 ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovietCrew",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the InfantryType that emerges from a destroyed unit or building for Countries on Side , \"Nod\" 1 . This must be set to a valid InfantryType, otherwise IEs could arise. \n  See also \n  AlliedCrew ThirdCrew Crew System \n  Footnotes \n  1 ↑ Note that \"Nod\" is residual from Tiberian Sun and is treated as the Soviet side in Red Alert 2 ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThirdCrew",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the InfantryType that emerges from a destroyed unit or building for Countries on Side , \"ThirdSide\". This must be set to a valid InfantryType, otherwise IEs could arise. \n  See also \n  AlliedCrew SovietCrew Crew System"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CurleyShuffle",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no', and determines if helicopter-like aircraft will move in-between shots at a target. If set to 'no', the aircraft will hover over their target until they have used all of their ammo, or kill it*. Named after American comedian Jerome 'Curly' Howard (with a typo, of course), one of the Three Stooges. \n  Bugs/Side-Effects/Unexpected Limitations \n * In Tiberian Sun , if disabled, all armed aircraft with a ROT>1 projectile (i.e. those that don't perform a 'sweep' over their target, like the Orca Bomber, but instead hover over or near it) will not expend their ammo unless they change their position. The aircraft will continue to fire at the target endlessly until it is destroyed, or the aircraft switches its position."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "FineDiffControl",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Logic related to FineDiffControl , as a whole or in part, is obsolete in Tiberian Sun to Yuri's Revenge . \n In RA this allows finer difficulty control for the campaign."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TeamDelays",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Intervals, in frames, between the AI checking for and creating teams. Listed by difficulty level Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIHateDelays",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This flag controls the delay, in frames, that the AI will wait before choosing an enemy. Usually this is the closest player not allied to the AI, unless another player attacks the AI first. Although the AI may have multiple enemies, it will focus its attacks entirely on one player at a time. The AI will only switch focus to another player when the previous enemy is defeated, or when another enemy player constantly attacks it. \n Prior to selecting an enemy, the AI will only build its basedefense teams; after selection it will actively build its whole array of AI trigger teams. \n The values are listed in order of difficulty - Easy (Brutal AI), Medium, Hard (Easy AI). \n Only applicable in multiplayer. In singleplayer maps, allies and enemies are explicitly designated via house settings and triggers ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIAlternateProductionCreditCutoff",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "This flag denotes the credit amount at which the AI will stop recklessly spending money. \n If you are editing the AI, a higher value here will result in your AI spending more conservatively."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIUseTurbineUpgradeProbability",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Note: This tag is not in the rules file by default. It needs to be added to the appropriate section manually. \n This is the percentage chance that the AI will upgrade its power plants, as opposed to constructing new ones."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NodAIBuildsWalls",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not the AI will build walls when it is a Soviet army. Appears to have no effect as structures can now have the ProtectWithWall= tag which makes the AI more effective at wall deployment. In either case, the AI has never been any good at building walls and the 'new' wall logic that was implemented in Tiberian Sun (where you could string wall sections together as determined by their GuardRange= ) simply causes more problems and the AI eventually makes its own base practically impassable - this in turn causes the game to slow to a crawl as the AI tries to move its units."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIBuildsWalls",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "In Tiberian Sun \n  In Tiberian Sun and Firestorm , when set to yes, this flag will cause the GDI AI to build walls. With the introduction of the new wall logic in one of the Tiberian Sun patches, the AI tends to block off its own base due to the inability to construct walls properly, thus leading to major performance hits due to pathfinding. Therefore it is probably better to keep this tag set to no. \n  In Red Alert 2 \n In Red Alert 2 and Yuri's Revenge , this flag has no effect and has been superseded by the ProtectWithWall logic, which enables the AI to construct walls around BuildingTypes with ProtectWithWall=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "FillEarliestTeamProbability",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "The probability that the AI will fill its earliest TeamTypes by building the required members. Listed by difficulty level, Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MinimumAIDefensiveTeams",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "If UseMinDefenseRule is set, the AI will strive to create this many IsBaseDefense=yes TeamTypes before even trying to create other Teams (all AITriggerTypes which don't include such teams will be treated as if their conditions haven't been met yet). See also MaximumAIDefensiveTeams . \n \n  Warning : The default INI files contain commented out or unexplained usage of this flag/section which, when restored (often simply out of curiousity), results in problems that are hard to trace and are seemingly unrelated. \n In unmodded Red Alert 2 and Yuri's Revenge , Soviet AI will not be able to fulfill this requirement if it's raised, and will get stuck. Make sure to give it more such TeamTypes or relax the Max limitation on the existing one before raising this value."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaximumAIDefensiveTeams",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "When an AI house has no less than this many TeamTypes with IsBaseDefense=yes active, it will start thinking that any trigger including at least one such team doesn't have all of its conditions met and thus cannot be executed. See also MinimumAIDefensiveTeams and UseMinDefenseRule ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TotalAITeamCap",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "The total number of team types the AI will aspire to have at any one time to assign to specific missions. These are in addition to general unit creation and 'pool' teams which may be created by the relevant Action= in a map file. Listed by difficulty level, Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "UseMinDefenseRule",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "If this is set, the AI will strive to create at least MinimumAIDefensiveTeams  TeamTypes with IsBaseDefense=yes set before even trying to create other Teams (all AITriggerTypes which don't include such teams will be treated as if their conditions haven't been met yet). See also MaximumAIDefensiveTeams ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DissolveUnfilledTeamDelay",
      "value_type": "int",
      "default_value": "5000",
      "adds_to_list": "",
      "desc": "The time, in frames, that the AI will wait before dissolving an AI trigger team that has no members. Applies only to multiplayer games. NOTE: you should not lower this number, particularly if you have edited AI.INI and increased the size of the TaskForces or included expensive units (or those which could otherwise be time consuming for the AI to build) - doing so may mean that the AI would not use those TaskForces as it may not be able to assemble them before this time limit, meaning they will be dissolved and thus unused."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AISafeDistance",
      "value_type": "int",
      "default_value": "8",
      "adds_to_list": "",
      "desc": "Whenever the AI is instructed to gather at the enemy base through a script, it will gather this number of cells from the centre of the enemy base."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIMinorSuperReadyPercent",
      "value_type": "float",
      "default_value": "0.8",
      "adds_to_list": "",
      "desc": "This flag denotes the earliest point at which the AI will start considering the use of the Chrono Sphere or Iron Curtain in its triggers. This value is the percentage charge of the super weapon. When this point is reached, the function initiates."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HarvesterTooFarDistance",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "If a War Miner is further than this from the refinery it wants, it will move next to it instead of reserving it and refigure things out when it stops. This value should be small to approximate the wait/time concern versus driving to the next refinery. Overall, this speeds up the income of credits from harvested Ore and Gems."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChronoHarvTooFarDistance",
      "value_type": "int",
      "default_value": "50",
      "adds_to_list": "",
      "desc": "This is used to tell the game how far to have them test for ore. This prevents them from driving to far away and being an easy target for enemies. This is calculated from the last refinery a harvester visited, so a new refinery that a Chrono Harvester is directed to determines the center of this circle. If no ore is found in this distance, the miner does not move unless ordered to do so."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AlliedBaseDefenseCounts",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists a number of Allied faction base defense structures that AI will construct. This takes the form of a numbered list, with one value for each difficulty level. The values are ordered in \"Brutal\", \"Medium\", \"Easy\"."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovietBaseDefenseCounts",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists a number of Soviet faction base defense structures that AI will construct. This takes the form of a numbered list, with one value for each difficulty level. The values are ordered in \"Brutal\", \"Medium\", \"Easy\"."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThirdBaseDefenseCounts",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Lists a number of Yuri faction base defense structures that AI will construct. This takes the form of a numbered list, with one value for each difficulty level. The values are ordered in \"Brutal\", \"Medium\", \"Easy\"."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIPickWallDefensePercent",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Whenever the AI chooses to construct a base defense, there is a chance it will choose to build a wall rather than an actual base defense, as long as there are structures with ProtectWithWall=yes set that are lacking walls. This is that percentage chance listed by difficulty level - Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIRestrictReplaceTime",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "After an AI-owned structure is damaged, it will restrict building replacement to buildings that have Wall or both ResourceGatherer & ResourceDestination (e.g deployed Slave Miner; this also obeys AISlaveMinerNumber ) set, a positive Power value (e.g power plants) or a weapon (e.g base defenses) only for this amount of frames."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThreatPerOccupant",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "The increase to an occupied (garrisoned) structures' ThreatPosed= value per occupant."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ApproachTargetResetMultiplier",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The approach target position should be recalculated if the target is further away than the weapon range times this. ApproachTarget is an AI script action which picks a target within its weapons Range= and if it gets further away than that range times this value the AI knows the target is moving and that it will need to re-figure where it is. This can be overridden in the units' entry with the CanApproachTarget= statement."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CampaignMoneyDeltaEasy",
      "value_type": "int",
      "default_value": "5000",
      "adds_to_list": "",
      "desc": "This value is added to the Easy difficulty level credits amount for all houses which have PlayerControl=yes assigned. This is added at the time the houses are read - it is the only thing that is known at that time so it can't be the player's house only. Change this value to adjust the amount of money someone starts with on a map."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CampaignMoneyDeltaHard",
      "value_type": "int",
      "default_value": "-5000",
      "adds_to_list": "",
      "desc": "This value is added to the Brutal difficulty level credits amount for all houses which have PlayerControl=yes assigned. This is added at the time the houses are read - it is the only thing that is known at that time so it can't be the player's house only. Change this value to adjust the amount of money someone starts with on a map."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GuardAreaTargetingDelay",
      "value_type": "int",
      "default_value": "36",
      "adds_to_list": "",
      "desc": "Used to provide explicit control of targeting rates in frames, when engaged in guard mode."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "NormalTargetingDelay",
      "value_type": "int",
      "default_value": "27",
      "adds_to_list": "",
      "desc": "Used to provide explicit control of targeting rates in frames, when not engaged in a mission or AI trigger."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AINavalYardAdjacency",
      "value_type": "int",
      "default_value": "20",
      "adds_to_list": "",
      "desc": "This flag denotes the maximum distance, in cells, that the AI can place a Naval Yard from its base."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DisabledDisguiseDetectionPercent",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "The percentage chance that an individual unit will detect a Mirage Tank which is fake-blinking (after firing). This is per unit, so even a lowish number is near enough automatic when then the AI has several units nearby. In other words, the more units that are near a disguised Mirage Tank which fires, the more likely it is to be discovered. Listed by difficulty level, Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIAutoDeployFrameDelay",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "The number of frames the AI will wait before deploying GIs assigned to guard an area, in order to stop their idle animation from playing. This tag requires a numerical list containing three numbers, one for each difficulty level. They are ordered as follows: Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaximumBuildingPlacementFailures",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "If the AI gets hung up on thinking it can place something but being unable to clear the space (too jammed with units for example) then it abandons that action after this many failures. The AI will wait for the number of frames specified in PlacementDelay= before trying again so that you can tell how long it will try for it."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TiberiumShortScan",
      "value_type": "float",
      "default_value": "1536",
      "adds_to_list": "",
      "desc": "The radius in cells to scan for more Ore when harvesting a single patch. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TiberiumLongScan",
      "value_type": "float",
      "default_value": "8192",
      "adds_to_list": "",
      "desc": "The radius in cells to scan for more Ore when looking for a new patch. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SlaveMinerShortScan",
      "value_type": "float",
      "default_value": "1280",
      "adds_to_list": "",
      "desc": "The Slave Miner looks this far to decide if it needs to move closer to Ore, but the new spot needs to be SlaveMinerScanCorrection= (see below) cells better to warrant moving for it. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SlaveMinerSlaveScan",
      "value_type": "float",
      "default_value": "4096",
      "adds_to_list": "",
      "desc": "Slaves scan longer than the miner since they trust if things could get better, the Slave Miner itself would move. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SlaveMinerLongScan",
      "value_type": "float",
      "default_value": "20480",
      "adds_to_list": "",
      "desc": "The Slave Miner looks this far, in cells, when searching for a patch of Ore to harvest. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SlaveMinerScanCorrection",
      "value_type": "float",
      "default_value": "768",
      "adds_to_list": "",
      "desc": "When a deployed Slave Miner decides it needs to scoot forward to get closer to the Ore, there needs to be a spot that is this much better in cells to bother getting up. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SlaveMinerKickFrameDelay",
      "value_type": "int",
      "default_value": "",
      "adds_to_list": "",
      "desc": "If the Slave Miner is in guard mode for this long (in frames), it will try to look for Ore again at SlaveMinerShortScan= range to find ore and wake up. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AISuperDefenseProbability",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Whenever a super weapon is targeted within the AI's AISuperDefenseDistance , and the super weapon has AIDefendAgainst=yes , then there is this percentage chance that the AI will fire its Force Shield, or super weapon with Type=ForceShield in order to defend against it.\nOrdered by difficulty - Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AISuperDefenseFrames",
      "value_type": "int",
      "default_value": "25",
      "adds_to_list": "",
      "desc": "Whenever an enemy super weapon is fired, the AI will wait at the most this number of frames before firing its Force Shield. This is incase the Force Shield is nearly ready, but still not when the super weapon is fired."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AISuperDefenseDistance",
      "value_type": "float",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "If an enemy super weapon is targeted at most this number of cells from the centre of an AI base, the targeted AI will consider firing its Force Shield."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureNormal",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Used by the AI for mind control logic. This flag determines the probability of the AI performing a certain action when it mind controls an enemy unit. \n There are four missions that the AI could order the mind controlled unit to perform: \n  Mission What happens Add to Capturer's Team The unit is recruited into the TeamType of the capturing unit, and carries out its associated ScriptType. Send to Grinder The unit is sent to a Grinder structure and destroyed. Only works if the computer actually has a Grinder. A structure is defined as a Grinder if it has Grinding=yes . Send to Bio Reactor The unit is sent to a Bio Reactor and is put in to generate power. Only works for InfantryTypes, and only if a Bio Reactor structure is present. A structure is defined as a Bio Reactor if it has InfantryAbsorb=yes or UnitAbsorb=yes . Send to Hunt If in doubt, the AI will just tell the unit to charge at the enemy and attack. \n  \n This is also the order that the missions appear in the percentage list for this tag. This is a percentage list, so all four values should total up to 100. However, don't include the percentage sign (%) on the number values."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureWounded",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Used by the mind control logic to determine what action to follow whenever a badly damaged unit is mind controlled. The percentage of their full health that denotes \"wounded\" is defined in the AICaptureWoundedMark tag. \n There are four possible missions the AI can execute upon mind controlling a wounded unit: \n  Mission What happens Add to Capturer's Team The unit is recruited into the TeamType of the capturing unit, and carries out its associated ScriptType. Send to Grinder The unit is sent to a Grinder structure and destroyed. Only works if the computer actually has a Grinder. A structure is defined as a Grinder if it has Grinding=yes . Send to Bio Reactor The unit is sent to a Bio Reactor and is put in to generate power. Only works for InfantryTypes, and only if a Bio Reactor structure is present. A structure is defined as a Bio Reactor if it has InfantryAbsorb=yes or UnitAbsorb=yes . Send to Hunt If in doubt, the AI will just tell the unit to charge at the enemy and attack. \n  \n This flag contains four values, each representing the weight/probability of the AI sending the unit to the corresponding mission. The missions above follow from left to right in the displayed order. These values should add up to 100 total shares."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureLowPower",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Used by the mind control logic to determine what mission to perform when a unit is mind controlled. This tag's values are only utilised in the event that the computer player is low on power (i.e. their power drain exceeds the provision). \n Only four missions apply to this tag: \n  Mission What happens Add to Capturer's Team The unit is recruited into the TeamType of the capturing unit, and carries out its associated ScriptType. Send to Grinder The unit is sent to a Grinder structure and destroyed. Only works if the computer actually has a Grinder. A structure is defined as a Grinder if it has Grinding=yes . Send to Bio Reactor The unit is sent to a Bio Reactor and is put in to generate power. Only works for InfantryTypes, and only if a Bio Reactor structure is present. A structure is defined as a Bio Reactor if it has InfantryAbsorb=yes or UnitAbsorb=yes . Send to Hunt If in doubt, the AI will just tell the unit to charge at the enemy and attack. \n  \n The values are entered in that order from left to right. As it is a percentage list, the total of the four values should be 100. However, do not use percentage signs on this list."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureLowMoney",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This flag determines the priority the AI will place missions for mind controlled units when it is low on money. The AI is defined as being low on money whenever its credits are below the value in the AICaptureLowMoneyMark flag. \n This flag contains four values, each representing the weight/probability of the AI sending the unit to the corresponding mission. In order from left to right they represent: \"Add to Capturer's Team\", \"Send to Grinder\", \"Send to Bio Reactor\", \"Send to Hunt.\" These values should add up to 100 total shares. \n  Mission What happens Add to Capturer's Team The unit is recruited into the TeamType of the capturing unit, and carries out its associated ScriptType. Send to Grinder The unit is sent to a Grinder structure and destroyed. Only works if the computer actually has a Grinder. A structure is defined as a Grinder if it has Grinding=yes . Send to Bio Reactor The unit is sent to a Bio Reactor and is put in to generate power. Only works for InfantryTypes, and only if a Bio Reactor structure is present. A structure is defined as a Bio Reactor if it has InfantryAbsorb=yes or UnitAbsorb=yes . Send to Hunt If in doubt, the AI will just tell the unit to charge at the enemy and attack."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureLowMoneyMark",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Used by the AICaptureLowMoney tag to determine exactly how many credits constitute the AI being on \"low money\". When this number is reached, or the number of credits is below it, the AI will use AICaptureLowMoney to decide on a course of action whenever a unit is mind controlled."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AICaptureWoundedMark",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This value is employed by the AICaptureWounded tag to determine what percentage of total health constitutes being \"wounded\". This percentage should be specified as a floating point number (i.e. .25 = 25%). When the captured unit only has this percentage of its maximum ((TTL|Strength)) or less, then the values of AICaptureWounded are followed instead of AICaptureNormal ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MultiplayerAICM",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Each AI player whose house / country is MultiplayPassive=no gets an additional amount of cash at the beginning of the match. The amount is: \n  int availMoney = House->Available_Money(); // in this case that is the money that house starts with int AICM = Rules->MultiplayerAICM[House->AI_Difficulty];\nint bonus = AICM * 0.01 * availMoney;\nHouse->GiveMoney(bonus); \n  In other words, this value is a percentage of the starting credits that the AI gets on top of the usual starting amount. \n  See Also \n  AIVirtualPurifiers"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIVirtualPurifiers",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "These are the multipliers to the AI's harvested money bonus for multiplayer games only. They default to hard coded values for the single player campaign. Listed by difficulty level, Brutal, Medium, Easy. \n This tag does not apply to AIs in single-player campaign missions."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AISlaveMinerNumber",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This flag denotes the number of Slave Miners that the AI will aim to own. The values are listed in order of difficulty level - Brutal, Medium, Easy."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HarvestersPerRefinery",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This was hard coded in previous C&C games but can now be used to define how many Ore Miners the AI should build to service each refinery it has. This is used in map files to override the TeamTypes used by the AI and gives the AI a little more 'intelligence'. For example, take two maps - one has an abundance of Ore, the other has very little. If the comp only builds one Ore Miner when it plays on the map with little Ore, its resources will be limited very quickly and income will be slow because the human player will build lots of Ore Miners to grab what little Ore there is very quickly. If the comp builds more Ore Miners on the same map, it will gather all that Ore quicker meaning the human player will have to destroy those Ore Miners to gain control of the Ore fields, and that in turn triggers a lot of AI attack events. In short, this tries to make the computer act more 'human' when gathering resources depending on the map it plays on, and helps when engaged in Mega Wealth mode by over-riding the AI Auto Production triggers thus preventing it making more harvesters when they are not needed. In Yuri's Revenge, this is a list of 3 numbers representing Allied, Soviet and Yuri sides respectively."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIExtraRefineries",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This flag defines how many additional Ore Refineries that the AI should build after constructing their initial refinery. \n This takes the form of a numbered list, with one value for each difficulty level. The values are ordered in \"Brutal\", \"Medium\", \"Easy\". \n This value is hardcoded in Red Alert 2 , and is only available in Yuri's Revenge ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AmerParaDropInf",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This defines which InfantryTypes are dropped by a SuperWeapon with Type = \"AmerParaDrop\" set. Multiple entries should be separated by commas."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AmerParaDropNum",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This defines how many of each InfantryType is dropped when a SuperWeapon with Type = \"AmerParaDrop\" set is invoked. The number of arguments for this tag must be the same as the number of arguments for AmerParaDropInf , or you will receive an IE ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AllyParaDropInf",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This tells the game what infantry to use for the Allies' standard paradrop (when they capture a BuildingType with a SuperWeapon that has Type = ParaDrop). These can be separated by commas, enabling multiple InfantryTypes to be dropped at once."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AllyParaDropNum",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Tells the game how many of each InfantryType listed under AllyParaDropInf are to be dropped when an Allied player owns a BuildingType with a SuperWeapon that has Type = \"ParaDrop\". There should be an equal number of entries in both this tag and AllyParaDropInf ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovParaDropInf",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This defines the InfantryType that is dropped as a paratooper for the Soviets when they use a Super Weapon with Type=ParaDrop. You should ensure this is set to a valid infantry unit, and ensure that infantry unit is listed in the [InfantryTypes] list and is defined as per all other infantry units. You can actually force the planes to drop different types of infantry here with more than one plane, by listing them separated by commas - but you must ensure that there is an equal number set (see below) for each infantry unit or the game will generate an Internal Error."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovParaDropNum",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the number of each of the above infantry units to be dropped for a Soviet side with a Super Weapon with Type=ParaDrop. You should ensure that there is a number listed here for each infantry type you have specified with SovParaDropInf=."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "YuriParaDropInf",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "This defines the InfantryType that is dropped as a paratooper for Yuri players when they use a Super Weapon with Type=ParaDrop. You should ensure this is set to a valid infantry unit, and ensure that infantry unit is listed in the [InfantryTypes] list and is defined as per all other infantry units. You can actually force the planes to drop different types of infantry here with more than one plane, by listing them separated by commas - but you must ensure that there is an equal number set (see below) for each infantry unit or the game will generate an Internal Error. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "YuriParaDropNum",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the number of each of the above infantry units to be dropped for a Yuri player with a Super Weapon with Type= ParaDrop. You should ensure that there is a number listed here for each infantry type you have specified with YuriParaDropInf= . \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AnimToInfantry",
      "value_type": "vector<InfantryType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of InfantryTypes from which an InfantryType can be selected for creation on completion of an animation with MakeInfantry=X set (where X is the list index (zero-based) of the InfantryType from AnimToInfantry ). \n  See Also \n  MakeInfantry Mutation"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonConYardValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with ConstructionYard=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonWarFactoryValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with WeaponsFactory=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonPowerValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with positive Power value when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonTechCenterValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects listed under [ AI ] BuildTech when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonEngineerValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with Engineer=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonThiefValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with Thief=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonHarvesterValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with Harvester=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonMCVValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects listed in [ General ] BaseUnit when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonAPCValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with Category=Transport when evaluating possible AI offensive Super Weapon targets. See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonBaseDefenseValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with IsBaseDefense=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonPlugValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with IsPlug=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonHelipadValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with HoverPad=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting . \n  Note: this flag cannot be responsible for Helipad=yes , because it would cause IEs in unmodded YR, where Airforce Command has Helipad=yes , and this flag is commented out, but the IE doesn't occur until you create a structure with HoverPad=yes ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AIIonCannonTempleValue",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the \"priority\" of objects with IsTemple=yes when evaluating possible AI offensive Super Weapon targets (when AI is hard, nomal, and easy, left to right). See AI SW Targeting ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CloakDelay",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Specifies the delay, in minutes (per 900 frames ), that all cloaked objects (submarines in Red Alert 2 ) are forced to remain revealed/emerged before becoming able to cloak/submerge again. \n  See Also \n  CloakingStages CloakingSpeed Cloakable"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GameSpeedBias",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This flag acts as a global multiplier to the speed of all units in the game. It does not affect the speed of projectiles or animations. \n  Important Note: Curiously, this also acts as a direct multiplier to BuildSpeed , thus increasing/decreasing the rate at which all buildings and units are built."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BaseBias",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This represents the multiplier to the threat target value of an enemy object when it is close to your base, meaning it will take a higher priority when base defenses and units in a defense mission evaluate potential targets. Increasing this value makes the AI more sensitive to threats against its base(s)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SeparateAircraft",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not certain BuildingTypes , such as helipads, will not spawn an AircraftType when constructed. The aircraft appears docked to the building regardless of whether or not the building has Helipad=yes set. \n  In Red Alert \n  In Red Alert and its expansions, if SeparateAircraft=no , helipads are hardcoded to spawn a certain aircraft depending on the side constructing them. \n  In Tiberian Sun and Red Alert 2 \n In Tiberian Sun and Red Alert 2 and their expansions, if SeparateAircraft=no , all buildings with HoverPad=yes spawn the first aircraft listed in [General] → PadAircraft= ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BaseDefenseDelay",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "Time, in minutes, between the AI sending response teams to deal with threats to its base(s). These response teams are usually AI TeamTypes from the AI.INI file which have been specifically recruited for this purpose ('pool' teams)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SuspendPriority",
      "value_type": "int",
      "default_value": "20",
      "adds_to_list": "",
      "desc": "AI teams with less than this Priority= will suspend during base defense ops - in other words they abandon their current mission and defend the base unless that mission has a high Priority= (e.g. deploy MCV)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SuspendDelay",
      "value_type": "float",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Time, in minutes, that suspended AI teams will remain suspended."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SurvivorRate",
      "value_type": "int",
      "default_value": "0.5",
      "adds_to_list": "",
      "desc": "This flag specifies a factor in determining how many infantry should eject from a sold or destroyed building . \n  Number of Survivors = [BuildingType]->Cost * SurvivorRate / SurvivorDivisor \n  Example: A building with Cost=1000 is sold, SurvivorRate=0.1 , and SurvivorDivisor=100 . 1000 * 0.1 / 100 = 1 infantry unit is ejected. \n The specific infantry units that are recovered are set by Crew in Red Alert and Tiberian Sun . In Red Alert 2 and Yuri's Revenge , each side can have its own survivor infantry with AlliedCrew , SovietCrew , and ThirdCrew ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AlliedSurvivorDivisor",
      "value_type": "int",
      "default_value": "200",
      "adds_to_list": "",
      "desc": "Should be a value from 0 - 100. The divisor into SurvivorRate= used to determine the number of survivors for Allied armies. In the above example, you could set SurvivorRate= to 0.2 which would yield 200 credits worth of survivors instead, then set this value to 100 and you would only get 200 credits worth (i.e. 1 GI). This can be used to manipulate the ratio of survivors and is useful if you have implemented a strong economy system but don't want a load of survivors from destroyed structures as a result."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SovietSurvivorDivisor",
      "value_type": "int",
      "default_value": "300",
      "adds_to_list": "",
      "desc": "Should be a value from 0 - 100. The divisor into SurvivorRate= used to determine the number of survivors for Soviet armies. In the above example, you could set SurvivorRate= to 0.2 which would yield 200 credits worth of survivors instead, then set this value to 50 and you would only get 100 credits worth (i.e. 1 Conscript). This can be used to manipulate the ratio of survivors and is useful if you have implemented a strong economy system but don't want a load of survivors from destroyed structures as a result."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ThirdSurvivorDivisor",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Should be a value from 0 - 100. The divisor into SurvivorRate= used to determine the number of survivors for Yuri's army. In the above example, you could set SurvivorRate= to 0.2 which would yield 200 credits worth of survivors instead, then set this value to 100 and you would get 200 credits worth (i.e. 1 Initiate). This can be used to manipulate the ratio of survivors and is useful if you have implemented a strong economy system but don't want a load of survivors from destroyed structures as a result. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ReloadRate",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Number of minutes it takes to reload each ammo pip for units when docked with their co-ordinating structure (e.g. aircraft types docked with a helipad)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BuildupTime",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Average number of minutes that structure build-up animations run. Although it is parsed (and therefore should not be deleted) this is not used much in Red Alert 2, as being a DirectX-based application it derives this value from the average frame rate (FPS). It is also not necessary because the Normalized=yes statement that appears in many animations' ART.INI entries ensures that this animation sequence is timed to coincide with the FPS."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HarvesterDumpRate",
      "value_type": "float",
      "default_value": "0.016",
      "adds_to_list": "",
      "desc": "Specifies the time, in minutes (900 frames ), it takes for a Harvester/Ore Miner to empty each \"bail\" of Tiberium/ore when docked with a refinery . \n It's worth noting that this flag is undocumented and unlisted in unmodified rules(md).ini ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "HarvesterLoadRate",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Specifies the rate at which Harvesters/Ore Miners scoop up Tiberium/Ore. \n Note that the rate must be 1 or higher , or the unit will never fill up. \n It's also worth noting that this flag is undocumented and unlisted in unmodified rules(md).ini ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BuildSpeed",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Number of minutes it takes to produce an item costing 1000 credits."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DamageDelay",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Defines the minutes between applying trivial structure damage when low on power. Every building owned by the player that has Power < 0 and health above ConditionYellow will receive 1 hitpoint of damage. Damage is delivered by the warhead AP in Red Alert , or C4Warhead in Tiberian Sun ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GrowthRate",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "In Red Alert , Counterstrike and Aftermath \n  Number of minutes to elapse between Ore growth if OreGrows is enabled. \n  In Tiberian Sun , Red Alert 2 and Yuri's Revenge \n This flag is still read by the engine but has no code tied to it. Tiberium/ore growth is now controlled by the Growth flag of each Tiberium/ore type ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RefundPercent",
      "value_type": "float",
      "default_value": "0.5",
      "adds_to_list": "",
      "desc": "Percentage of the Cost of the object to be refunded when it is sold. Also applies to objects sent to a Cloning or Grinding structure. Soylent overrides this value."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RepairPercent",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "This flag controls how much it costs to repair VehicleTypes docked with a BuildingType with UnitRepair=yes set, and BuildingTypes that are being repaired using a gameplay function (the \"wrench\" tool). \n The cost to recover RepairStep hitpoints every RepairRate minutes can be calculated by the following formula 1 : \n  \"repair step cost\" = RepairPercent * ( Cost / ( Strength / RepairStep) ) \n  If the result is a floating point value , all decimal places are ignored. Also, if the result is less than 1, it is bumped up to 1. \n \n  Notes \n  1 ↑ The division done in this formula is integer division, which means that any decimal places will be knocked off; i.e. 5/2 = 2, not 2.5. \n  References \n  Relevant pseudocode is available at http://dc.strategy-x.com/src2/TechnoTypeClass/GetRepairStepCost.cpp ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RepairStep",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "RepairStep specifies the number of hitpoints that are recovered: \n  Every RepairRate minutes for BuildingTypes being repaired using a gameplay function (the \"wrench\" tool). Every URepairRate minutes for VehicleTypes and AircraftTypes being repaired by a BuildingType with UnitRepair=yes . Every TiberiumHeal 1 minutes for VehicleTypes and AircraftTypes with TiberiumHeal=yes that are positioned above OverlayTypes with Tiberium=yes . \n  Bugs/Side-Effects/Unexpected Limitations \n  If an object gets damaged, but not killed, and this value is higher than its Strength , then the game will crash once repair starts. This applies all types of repair that make use of the RepairStep tag. \n  Footnotes \n  1 ↑ Note that TiberiumHeal is only parsed in Tiberian Sun and will not have any effect in Red Alert 2 ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IRepairStep",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "IRepairStep specifies the number of hitpoints that are recovered: \n  Every IRepairRate minutes for InfantryTypes being healed by a BuildingType with Hospital=yes . Every TiberiumHeal 1 minutes for InfantryTypes with TiberiumHeal=yes that are positioned above OverlayTypes with Tiberium=yes . \n  \n  Footnotes \n  1 ↑ Note that TiberiumHeal is only parsed in Tiberian Sun and will not have any effect in Red Alert 2 ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RepairRate",
      "value_type": "float",
      "default_value": "0.016",
      "adds_to_list": "",
      "desc": "RepairRate specifies the number of minutes between: \n  Applying RepairStep to structures using the Wrench tool. Applying the next step of healing for units with SelfHealing=yes or the SELF_HEAL promotional bonus."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "URepairRate",
      "value_type": "float",
      "default_value": "0.016",
      "adds_to_list": "",
      "desc": "URepairRate specifies the number of minutes between applying RepairStep to units being repaired by a structure with UnitRepair=yes ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "IRepairRate",
      "value_type": "float",
      "default_value": "0.016",
      "adds_to_list": "",
      "desc": "IRepairRate specifies the number of minutes between applying IRepairStep to InfantryTypes being repaired by a structure with Hospital=yes ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "Stray",
      "value_type": "float",
      "default_value": "512",
      "adds_to_list": "",
      "desc": "Radius, in cells , that AI-controlled team members can stray from their position without causing them to regroup. This stops the AI teams from breaking up too much which would render their collective purpose useless. \n  Note for Map Editing \n  This also determines the minimum distance between a team's origin and its destination for the team to actually move there. If the distance is this or less, then the team will assume it's already in its destination and will not move further. \n In other words, if you create or reinforce a team at a waypoint , and in the team's script you have that team move to another waypoint or target that's within this many cells from the team's origin waypoint, then the team thinks it's already reached its destination and will proceed to the next mission in the script."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RelaxedStray",
      "value_type": "float",
      "default_value": "512",
      "adds_to_list": "",
      "desc": "Gather actions by the AI will use this number (in cells) instead of Stray= allowing for bigger teams in AI triggers & team types."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "GuardModeStray",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "The number of cells away an AI controlled unit can get from the unit it is guarding before it is told to move."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CloseEnough",
      "value_type": "float",
      "default_value": "640",
      "adds_to_list": "",
      "desc": "If an AI controlled unit is trying to get a location which is blocked, it will abort movement when it gets this close (in cells) to that intended destination. This stops the AI hanging up and trying to move units into blocked cells."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "BlendedFog",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This determines whether the 'fog' is blended ('yes') or dithered ('no'). These are two methods used by DirectX fog-table emulation to produce specific graphical effects. As far as I can tell, this is unused in Red Alert 2 as the 'Fog Of War' appears to have been disabled although FOG.SHP (the alpha-image used to create the fog) is still in the game files and referred to by the game code."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AttackingAircraftSightRange",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "Default to aircraft sight range when the aircraft is in an attack mission. Effectively obsolete, as the sight range is overriden by the aircraft type's Sight value. \n  Bugs/Side-Effects/Unexpected Limitations \n  In Red Alert 2 , using a value too high causes spawned missiles to reveal the map, as warned by this developer comment in rules(md).ini : \n  AttackingAircraftSightRange=2 ; //gs 6 Makes the V3 ping the map. Hi, welcome to dumb ideas."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LeptonsPerSightIncrease",
      "value_type": "int",
      "default_value": "50",
      "adds_to_list": "",
      "desc": "Height above ground level, in leptons , that a unit has to climb to before it gets a bonus to its sight range. \n Note that the value used in unmodified rules(md).ini , 2000 , is more than all the height levels combined, meaning that the logic is effectively disabled. \n  Bugs/Side-Effects/Unexpected Limitations \n  This is an absolute height measure between the unit and the ground (0) height level, not relative to the unit and surrounding terrain. As such, if the logic is enabled, a unit will always see farther while moving at high terrain than at low terrain. \n  See Also \n  LeptonsPerFireIncrease"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TiberiumTransmogrify",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Possibly meant to be the chance infantry units dying of Tiberium causes 'transmogrify' into small Visceroids, or related to trees mutating into blossom trees. This flag is read, but never used anywhere. \n  See also \n  SmallVisceroid TiberiumDeathToVisceroid"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningDeferment",
      "value_type": "int",
      "default_value": "250",
      "adds_to_list": "",
      "desc": "Note that there are no Ion Storms in Red Alert 2 - again, this is residual from Tiberian Sun and these statements are now used for specific controls for Super Weapons with Type =LightningStorm. This statement defines the number of frames between the creation of the Weather Storm being announced to all players and its actual appearance, thus providing a small warning to its intended victim. Its useful to have this warning, because the Weather Storm also makes the whole map darken so other players will be aware that this is about to happen."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningDamage",
      "value_type": "int",
      "default_value": "200",
      "adds_to_list": "",
      "desc": "The amount of damage done with each hit by a lightning bolt from a Super Weapon with Type =LightningStorm."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningStormDuration",
      "value_type": "int",
      "default_value": "900",
      "adds_to_list": "",
      "desc": "The default duration of a Super Weapon with Type =LightningStorm in frames, although this gets overridden by the trigger in map files (if present) which allows you to specify how long the storm will last. The higher this number, the longer the storm will last. \n  The value -1 represents infinite time."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningHitDelay",
      "value_type": "int",
      "default_value": "90",
      "adds_to_list": "",
      "desc": "How often, in frames, the direct target (as chosen above) gets hit. The lower this number, the more often it gets hit."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningScatterDelay",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "The delay in frames between random lightning bolts from a Super Weapon with Type =LightningStorm. Decreasing this appears to inflict a serious hit on game speed and performance as the game has to perform many calculations for each shot - slowing this process down will thus slow the game down. \n  It not only controls the interval, but also the number of clouds generated each time. Of course, under Ares , you can use the Lightning.ScatterDelay and Lightning.ScatterCount statements to define them separately."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningCellSpread",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "In the same way that weapons can affect cells around them, so does a Super Weapon with Type=WeatherStorm. This is a N x N square and determines how far away the damage from random bolts can go."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningSeparation",
      "value_type": "int",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "The distance in cells between each weather cloud and lightning bolt from a Super Weapon with Type =LightningStorm."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningWarhead",
      "value_type": "WarheadType",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The warhead used by the lightning strike itself from a Super Weapon with Type =LightningStorm, which must also be listed in the [Warheads] section and be defined in the same way all other warheads are. \n  Bugs/Side-Effects/Unexpected Limitations \n If a weapon also uses this warhead, its AnimList will be overwritten by WeatherConBoltExplosion ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "LightningPrintText",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not the text appears that tells players a Super Weapon with Type=WeatherStorm has just been launched. The game is hard coded to display the text contained in the strings TXT_LIGHTNING_STORM and TXT_LIGHTNING_STORM_APPROACHING in the CSF files so even with this enabled you can still adjust the text that appears."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ForceShieldRadius",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Specifies the radius in cells affected by a Super Weapon with Type=ForceShield. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ForceShieldDuration",
      "value_type": "int",
      "default_value": "400",
      "adds_to_list": "",
      "desc": "Specifies the duration in frames of a Super Weapon with Type=ForceShield. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ForceShieldBlackoutDuration",
      "value_type": "int",
      "default_value": "800",
      "adds_to_list": "",
      "desc": "Specifies the duration in frames that the affected objects will have the 'blackout' lighting effect when a Super Weapon with Type=ForceShield is invoked. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ForceShieldPlayFadeSoundTime",
      "value_type": "int",
      "default_value": "50",
      "adds_to_list": "",
      "desc": "This flag specifies the number of frames short of ForceShieldDuration to start playing the sound specified by SpecialSound on a SuperWeaponType with Type=ForceShield after it has been activated. \n This is used to adjust the timing of the sound effect so that it ends as the Force Shield wears off. For desirable results, the value should be smaller than ForceShieldDuration but greater than 0, even though any integer value is possible."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MutateExplosion",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to yes then the super weapon with Type=GeneticMutator will detonate the warhead specified by MutateExplosionWarhead with 10,000 damage. If set to no then the super weapon will subject each InfantryType in a 3x3 area to a one-shot-kill using the warhead specified by MutateWarhead ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismType",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This is used by the PrismSupportBeam logic. Defines which structure the Prism Cannon is, it has to be a valid building. You can only define one structure."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismSupportModifier",
      "value_type": "float",
      "default_value": "100",
      "adds_to_list": "",
      "desc": "This flag specifies a multiplier to damage when a building designated as PrismType fires its weapon supported by other buildings of the same type. \n Actual damage done by a linked PrismType is calculated like this: \n  // naming: PSM.ini - the value specified for this flag in the rules.ini file\n// DamageMultiplier is 1.0 on normal projectiles\n\nProjectile->DamageMultiplier = ( ( (NumberOfSupportingPrisms * ( PSM.ini * 100) + 100) * 256 ) / 100 ) / 256; \n  Bugs/Side-Effects/Unexpected Limitations \n This flag is parsed in an incorrect way: after reading its value from the INI file, it's multiplied by 100 before being saved internally. Due to the fact that the ini parser reads each flag in [General] whenever the [General] section is present in the file, and if it can't interpret the flag's value properly (say, the flag was not redeclared), it falls back to the value the flag already has. Which means, if the [General] section is present in the mpmode file/map, but this flag is not, then its value is multiplied by 100 again for each such case. Which results in a severely overpowered weapon."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismSupportMax",
      "value_type": "int",
      "default_value": "8",
      "adds_to_list": "",
      "desc": "The maximum number of support beams that may assist a Prism Cannon when firing."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismSupportDelay",
      "value_type": "int",
      "default_value": "100",
      "adds_to_list": "",
      "desc": "Firing a support beam makes a Prism Cannon go 'offline' for this long in frames, thus determines the delay between shots."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismSupportDuration",
      "value_type": "int",
      "default_value": "15",
      "adds_to_list": "",
      "desc": "A support beam is visible for this long in frames."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "PrismSupportHeight",
      "value_type": "int",
      "default_value": "300",
      "adds_to_list": "",
      "desc": "A support beam is aimed this many leptons above the target building (i.e. the Prism Cannon it is supporting). Measured in leptons."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketPauseFrames",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Number of frames the V3 Rocket pauses on the launcher before tilting prior to launch."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketTiltFrames",
      "value_type": "int",
      "default_value": "60",
      "adds_to_list": "",
      "desc": "Number of frames it takes for the V3 Rocket to tilt into its firing position."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketPitchInitial",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Starting pitch of the V3 Rocket before tilting up. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketPitchFinal",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Ending pitch of the V3 Rocket after tilting up into firing position. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketTurnRate",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Pitch manoeuvrability of the V3 Rocket when in the air. Same variable used by Aircraft. \n  Negative Values \n  Putting a negative value here will result in the V3 Rocket spinning continuously in a circle \n For example, putting a big negative integer like -0.8 will result in a very small circle, while putting an extremely small negative integer like 0.00000001 will result in an extremely large circle \n Kenosis demonstrates negaive turn rate https://ppmforums.com/viewtopic.php?t=35446"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketRaiseRate",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies how much the missile will raise each turn on the launcher. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketAcceleration",
      "value_type": "float",
      "default_value": "0.04",
      "adds_to_list": "",
      "desc": "This much is added to the V3 Rocket's acceleration every frame during the launch process."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketAltitude",
      "value_type": "int",
      "default_value": "768",
      "adds_to_list": "",
      "desc": "Cruising altitude above ground level (in leptons). At this height the V3 Rocket begins levelling off."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketDamage",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "An exploding V3 Rocket does this much damage (at the center of the explosion)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketEliteDamage",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "An exploding V3 Rocket (if the launcher is at Elite status) does this much damage (at the center of the explosion)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketBodyLength",
      "value_type": "int",
      "default_value": "256",
      "adds_to_list": "",
      "desc": "The body of the V3 Rocket is this long (in leptons), Used to calculate trajectory and travel path, best not to change unless you change the image of the V3 Rocket itself."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketLazyCurve",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "V3RocketLazyCurve , DMislLazyCurve and CMislLazyCurve are part of the Rocket/Missile control sections of Rules(md).ini 's [General] section. They control whether the V3 Rocket, Dreadnought missile or Boomer Cruise Missile fly in a big, lazy curve, respectively. The term \"Lazy Curve\" alludes to the big arc the V3 Rocket travels along, as opposed to the more direct or even unguided path of all missiles in the game. As such, this is only set to \"yes\" on V3RocketLazyCurve , while DMislLazyCurve and CMislLazyCurve are both set to \"no\". \n The Boomer Sub, and with it the Boomer Cruise Missile and CMislLazyCurve are only available in Yuri's Revenge . \n  Warning! \n  Using LazyCurve with a V3RocketPitchFinal or DMislPitchFinal of 1 (vertical) will cause the spawned missile to fly straight up and never come back down no matter where the target is. \n  See also \n  Arcing"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "V3RocketType",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The object in the game which represents the V3 Rocket. This should be an aircraft type listed in the [AircraftTypes] section and have its own entry defined as per all other aircraft. It is not known if you can specify more than one object here - if so, you could successfully spawn another missile which would act exactly like the V3 Rocket."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislPauseFrames",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Number of frames the Dreadnaught Missile pauses on the launcher before tilting prior to launch."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislTiltFrames",
      "value_type": "int",
      "default_value": "60",
      "adds_to_list": "",
      "desc": "Number of frames it takes for the Dreadnaught Missile to tilt into its firing position."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislPitchInitial",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Starting pitch of the Dreadnaught Missile before tilting up. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislPitchFinal",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Ending pitch of the Dreadnaught Missile after tilting up into firing position. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislTurnRate",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Pitch manoeuvrability of the Dreadnaught Missile when in the air. Same variable used by Aircraft. \n  Negative Values \n  Putting a negative value here will result in the V3 Rocket spinning continuously in a circle \n For example, putting a big negative integer like -0.8 will result in a very small circle, while putting an extremely small negative integer like 0.00000001 will result in an extremely large circle \n Kenosis demonstrates negaive turn rate https://ppmforums.com/viewtopic.php?t=35446"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislRaiseRate",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies how much the missile will raise each turn on the launcher. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislAcceleration",
      "value_type": "float",
      "default_value": "0.04",
      "adds_to_list": "",
      "desc": "This much is added to the Dreadnaught Missile's acceleration every frame during the launch process."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislAltitude",
      "value_type": "int",
      "default_value": "768",
      "adds_to_list": "",
      "desc": "Cruising altitude above ground level (in leptons). At this height the Dreadnaught Missile begins levelling off."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislDamage",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "An exploding Dreadnaught Missile does this much damage (at the center of the explosion)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislEliteDamage",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "An exploding Dreadnaught Missile (if the launcher is at Elite status) does this much damage (at the center of the explosion)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislBodyLength",
      "value_type": "int",
      "default_value": "128",
      "adds_to_list": "",
      "desc": "The body of the Dreadnaught Missile is this long (in leptons), Used to calculate trajectory and travel path, best not to change unless you change the image of the Dreadnaught Missile itself."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislLazyCurve",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "V3RocketLazyCurve , DMislLazyCurve and CMislLazyCurve are part of the Rocket/Missile control sections of Rules(md).ini 's [General] section. They control whether the V3 Rocket, Dreadnought missile or Boomer Cruise Missile fly in a big, lazy curve, respectively. The term \"Lazy Curve\" alludes to the big arc the V3 Rocket travels along, as opposed to the more direct or even unguided path of all missiles in the game. As such, this is only set to \"yes\" on V3RocketLazyCurve , while DMislLazyCurve and CMislLazyCurve are both set to \"no\". \n The Boomer Sub, and with it the Boomer Cruise Missile and CMislLazyCurve are only available in Yuri's Revenge . \n  Warning! \n  Using LazyCurve with a V3RocketPitchFinal or DMislPitchFinal of 1 (vertical) will cause the spawned missile to fly straight up and never come back down no matter where the target is. \n  See also \n  Arcing"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DMislType",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The object in the game which represents the Dreadnaught Missile. This should be an aircraft type listed in the [AircraftTypes] section and have its own entry defined as per all other aircraft. It is not known if you can specify more than one object here - if so, you could successfully spawn another missile which would act exactly like the Dreadnaught Missile."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislPauseFrames",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Number of frames the Cruise Missile pauses on the launcher before tilting prior to launch. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislTiltFrames",
      "value_type": "int",
      "default_value": "30",
      "adds_to_list": "",
      "desc": "Number of frames it takes for the Cruise Missile to tilt into its firing position. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislPitchInitial",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Starting pitch of the Cruise Missile before tilting up. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up). \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislPitchFinal",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Ending pitch of the Dreadnaught Missile after tilting up into firing position. Should be between 0.00 (horizontally flat) and 1.00 (vertically stood up). \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislTurnRate",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies how much the missile will raise each turn on the launcher. \n  Negative Values \n  Putting a negative value here will result in the V3 Rocket spinning continuously in a circle \n For example, putting a big negative integer like -0.8 will result in a very small circle, while putting an extremely small negative integer like 0.00000001 will result in an extremely large circle \n Kenosis demonstrates negaive turn rate https://ppmforums.com/viewtopic.php?t=35446 \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislRaiseRate",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislAcceleration",
      "value_type": "float",
      "default_value": "0.06",
      "adds_to_list": "",
      "desc": "This much is added to the Cruise Missile's acceleration every frame during the launch process. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislAltitude",
      "value_type": "int",
      "default_value": "768",
      "adds_to_list": "",
      "desc": "Cruising altitude above ground level (in leptons). At this height the Cruise Missile begins levelling off. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislDamage",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "An exploding Cruise Missile does this much damage (at the center of the explosion). \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislEliteDamage",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "An exploding Cruise Missile (if the launcher is at Elite status) does this much damage (at the center of the explosion). \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislBodyLength",
      "value_type": "int",
      "default_value": "128",
      "adds_to_list": "",
      "desc": "The body of the Cruise Missile is this long (in leptons), Used to calculate trajectory and travel path, best not to change unless you change the image of the Dreadnaught Missile itself. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislLazyCurve",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "V3RocketLazyCurve , DMislLazyCurve and CMislLazyCurve are part of the Rocket/Missile control sections of Rules(md).ini 's [General] section. They control whether the V3 Rocket, Dreadnought missile or Boomer Cruise Missile fly in a big, lazy curve, respectively. The term \"Lazy Curve\" alludes to the big arc the V3 Rocket travels along, as opposed to the more direct or even unguided path of all missiles in the game. As such, this is only set to \"yes\" on V3RocketLazyCurve , while DMislLazyCurve and CMislLazyCurve are both set to \"no\". \n The Boomer Sub, and with it the Boomer Cruise Missile and CMislLazyCurve are only available in Yuri's Revenge . \n  Warning! \n  Using LazyCurve with a V3RocketPitchFinal or DMislPitchFinal of 1 (vertical) will cause the spawned missile to fly straight up and never come back down no matter where the target is. \n  See also \n  Arcing"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "CMislType",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "The object in the game which represents the Cruise Missile. This should be an aircraft type listed in the [AircraftTypes] section and have its own entry defined as per all other aircraft. It is not known if you can specify more than one object here - if so, you could successfully spawn another missile which would act exactly like the Dreadnaught Missile. \n (Yuri's Revenge Only)"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ParadropRadius",
      "value_type": "int",
      "default_value": "1024",
      "adds_to_list": "",
      "desc": "Paratroopers will drop from the plane generated by a Super Weapon with Type=ParaDrop or Type=AmerParaDrop if it is this many leptons from the drop site (center of the cell) selected by the player."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightMovementRadius",
      "value_type": "int",
      "default_value": "2000",
      "adds_to_list": "",
      "desc": "Specifies the distance between the owner building and the foci of the ellipse drawn by the spotlight. See Spotlights for the full explanation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightLocationRadius",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "Specifies the minimum distance (in leptons) from the foci to the spotlight's path. See Spotlights for the full explanation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightSpeed",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Specifies the speed of the spotlight's movement. See Spotlights for the full explanation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightAcceleration",
      "value_type": "float",
      "default_value": "0.005",
      "adds_to_list": "",
      "desc": "Specifies the spotlight's (de-)acceleration. See Spotlights for the full explanation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightAngle",
      "value_type": "float",
      "default_value": "20",
      "adds_to_list": "",
      "desc": "Specifies the angle (in radians), which will be drawn before the spotlight stops and draws the same angle in the reverse direction. See Spotlights for the full explanation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "SpotlightRadius",
      "value_type": "int",
      "default_value": "175",
      "adds_to_list": "",
      "desc": "This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n Appears to control the width of the falling light beam (the blob on the ground remains unchanged, the part between the tower and the ground appears to widen/thinnen according to this, but the effect is incomplete and yields nothing useful whatsoever)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RevealTriggerRadius",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "Specifies the range, in cells, that shall be revealed when a map trigger calls the 'reveal around waypoint' action. Since this is derived the same way as Sight = \n , it cannot exceed 11."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ChargeToDrainRatio",
      "value_type": "float",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "Although the 'charge drain' logic is not used in Red Alert 2, it can still be enabled for any appropriate Super Weapon. This keyword determines the ratio of time taken (in minutes) for a discharged Super Weapon to recharge, and is expressed as a proportion of that Super Weapons' ChargeTime= if it has UseChargeDrain=true set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WallBuildSpeedCoefficient",
      "value_type": "float",
      "default_value": "0.5",
      "adds_to_list": "",
      "desc": "Coefficient applied to the build speed of buildings with Wall=yes in relation to other structures, which is used to make walls build quicker or slower in relation to the side's normal build speed for structures."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ConditionYellowSparkingProbability",
      "value_type": "float",
      "default_value": "0.01",
      "adds_to_list": "",
      "desc": "Defines the chance that infantry with yellow health will spawn a random particle system from the DamageParticleSystems list that has BehavesLike=Spark set. \n  Bugs/Side-Effects/Unexpected Limitations \n  This logic only works for infantry with Cyborg=yes , and it may behave in an unexpected way. See DamageParticleSystems . \n  See also \n  ConditionRedSparkingProbability"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "ConditionRedSparkingProbability",
      "value_type": "float",
      "default_value": "0.02",
      "adds_to_list": "",
      "desc": "Defines the chance that infantry with red health will spawn a random particle system from the DamageParticleSystems list that has BehavesLike=Spark set. \n  Bugs/Side-Effects/Unexpected Limitations \n  This logic only works for infantry with Cyborg=yes , and it may behave in an unexpected way. See DamageParticleSystems . \n  See also \n  ConditionYellowSparkingProbability"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AITriggerSuccessWeightDelta",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This is the delta applied to the weighting of an AITriggerType that the AI successfully carried out. This then increases the chances of the same trigger being re-used, instead of a different one being chosen."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AITriggerFailureWeightDelta",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "When an AI TeamType is dissolved which hasn't completed its task (through the usage of Script Action 49, 0 ), this value, multiplied by AITriggerTrackRecordCoefficient , is added to the Weight of every AI Trigger using this TeamType as its primary Team. This value is normally negative, thus it effectively reduces the weight and increases the chances of a different trigger being used by the AI, rather than the same one being re-used. \n See also AI Trigger Type Weights ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "AITriggerTrackRecordCoefficient",
      "value_type": "float",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "When an AI TeamType is dissolved which hasn't completed its task (through the usage of Script Action 49, 0 ), this value, multiplied by AITriggerFailureWeightDelta , is added to the Weight of every AI Trigger using this TeamType as its primary Team. The FailureWeightDelta value is normally negative, thus this effectively reduces the weight and increases the chances of a different trigger being used by the AI, rather than the same one being re-used. \n See also AI Trigger Type Weights ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "WeedCapacity",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The amount of weed that needs to be collected by a Weed Eater (or any unit defined as such) and deposited into a Waste Facility required to make a Chemical Missile. With a lot of work, this can be made to work in Red Alert 2 although it is a little buggy when the Chemical Missile is launched."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "FlashFrameTime",
      "value_type": "int",
      "default_value": "7",
      "adds_to_list": "",
      "desc": "Time, in frames, that the radar event's square on the radar screen should flash between colors. This should always be an odd number."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarCombatFlashTime",
      "value_type": "int",
      "default_value": "21",
      "adds_to_list": "",
      "desc": "This should always be an odd multiple of FlashFrameTime= , i.e. RadarCombatFlashTime/FlashFrameTime should always equal an odd number."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventSpeed",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The speed of the radar event."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventRotationSpeed",
      "value_type": "float",
      "default_value": "0.1",
      "adds_to_list": "",
      "desc": "The speed of radar event rectangle rotation."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventSuppressionDistances",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "The suppression distances in cells of the radar events (the rotating and flashing squares you get on the radar screen). Note that each of the statements in this section has 6 values attached. You must stay with this convention or suffer Internal Errors. Each value refers to a different radar event, and those events, in order (although numbers 7 - 17 appear not to generate a radar event), are;- (1) Generic Combat Event (2) Generic Noncombat Event (3) Dropzone Event (4) Base Attacked Event (5) Harvester Under Attack Event (6) Enemy Sensed Event \n  (7) Unit Produced Event \n  (8) Unit Lost Event (9) Unit Repaired Event (10) Building Infiltrated Event (11) Building Captured Event (12) Beacon Placed Event (13) Super Weapon Detected Event (14) Super Weapon Activated Event (15) Bridge Repaired Event (16) Garrisoned Abandoned Event \n (17) Ally Base Attacked Event"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventVisibilityDurations",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Time, in frames, that the radar event should be visible on the players radar."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventDurations",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Time, in frames, that the radar event should last."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventMinRadius",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "Minimum radius required by the radar event."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "RadarEventColorSpeed",
      "value_type": "float",
      "default_value": "0.05",
      "adds_to_list": "",
      "desc": "Rate at which the colors of the radar event rectangle change."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MyEffectivenessCoefficientDefault",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target with a lower ThreatPosed= value than its own. This is designed to ensure that tough units actively seek to destroy weaker units (e.g. tanks vs. soldiers). Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TargetEffectivenessCoefficientDefault",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target with a higher ThreatPosed= value than its own. This is intended to prevent weaker units engaging enemy units (e.g. a soldier vs. a tank) in a suicidal fashion. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TargetSpecialThreatCoefficientDefault",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TargetStrengthCoefficientDefault",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target which has a higher strength than itself. This is designed to get a unit to consider whether or not to attack something with higher strength, as the process of doing so may involve the unit itself being destroyed (i.e. a suicidal attack) when the target returns fire. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TargetDistanceCoefficientDefault",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "TargetDistanceCoefficientDefault specifies the threat rating scan range globally in General section. TechnoTypes (units/infantries etc.) can override this global value with TargetDistanceCoefficient in their sections. Enemy target selection is affected depending upon if the enemy object is inside the scan range or outside the scan range. The effect of this threat rating is only witnessed in cases where the subject is free to choose its target and applies to cases like the AI script actions of Attack TargetType (0,n). Vanilla game rules(md).ini has this value set to -10. This value is a kind of percentage of the map size (longest length from corner to corner) which can be converted to number of cells for scan range. For the lower negative values like -10, it more or less evens out at specific number of cell range for various map sizes. For the largest negative number of -1, the range covers the entire map except few cells short of the map size. \n Values and its cells ranges: \n  -11                         about 35 cells (or closer to 1/11th map size)\n-10                         about 39 cells (or closer to 1/10th map size)\n-9                          about 43 cells (or closer to 1/9th map size)\n-8                          about 49 cells (or closer to 1/8th map size)\n-7                          about 1/7th map size\n-6                          about 1/6th map size \n-5                          few cells short of 20% map size\n-4                          few cells short of 25% map size \n-3                          few cells short of 1/3rd map size\n-2                          few cells short of half of map size\n-1                          few cells short of entire map size, decimal negatives like -0.1 or -0.9 are same as -1\n0 and above                 no range \n  Effect on AI Script actions of Attack TargetType (0,n) in TS/RA2/YR games \n  Target selection when the objects are outside the threat rating scan range: \n When the enemy objects are outside threat rating scan range, select the object which was built first. Built first unit could mean, the target could be one of starting units, if those are not present then it could be the free units that comes with buildings like harvesters. In pre-placed units/structures, the first built is the first in their respective lists in the map files. After the first selected target is destroyed, next target will be evaluated again based on whether any of the enemy objects falls within the scan range or not. Any value in SpecialThreatValue does not affect the target selection when those fall outside the scan range. \n On 0,1 (Attack anything) - Attack the first unit/aircraft/infantry/building produced by the enemy in that order. Meaning if no unit exists then the first aircraft produced by that enemy and so on. \n On 0,2 (Attack buildings) - Attack the first building produced by the enemy. \n On 0,5 (Attack vehicles) - Attack the first unit produced by the enemy. \n Similar is the case for other Attack TargetType (0,n) script actions. \n Target selection when any enemy object(s) is/are within the threat rating scan range: \n When the enemy objects are available within the threat rating scan range, select the nearest. If more than 1 object are equidistant, then give preference to the object with SpecialThreatValue =1. In equidistant case, if both the objects have same value in SpecialThreatValue then select the one which was built first by the enemy. After the first selected target is destroyed, next target will be evaluated again based on whether any of the enemy objects falls within the scan range or not. \n When there are objects both inside and outside the threat rating scan range, the case of within scan range applies. These 0,n script action are repetitive in nature, meaning that after the first selected target is destroyed, the team members will go on to select the next target based on the scan range. \n Irrespective of what values other threat rating coefficient flags hold like MyEffectivenessCoefficientDefault , there is no effect seen when making target selection due to the strength, threat posed, weapon range/damage etc. of these enemy objects."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DumbMyEffectivenessCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target with a lower ThreatPosed= value than its own. Used for threat evaluation and target acquisition, not for actually engaging that target. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0). Used for objects that have HasStupidGuardMode=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DumbTargetEffectivenessCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target with a higher ThreatPosed= value than its own. Used for threat evaluation and target acquisition, not for actually engaging that target. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0). Used for objects that have HasStupidGuardMode=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DumbTargetSpecialThreatCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DumbTargetStrengthCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target which has a higher strength than itself. Used for threat evaluation and target acquisition, not for actually engaging that target. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0). Used for objects that have HasStupidGuardMode=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DumbTargetDistanceCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when considering engaging a target which is out of range of any of its weapons. Used for threat evaluation and target acquisition, not for actually engaging that target. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0). Used for objects that have HasStupidGuardMode=yes set."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "EnemyHouseThreatBonus",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Coefficient applied to an objects threat rating when it is considering which object to engage. This is designed to ensure that enemy objects pose a higher threat than a friendly or allied object. The special case for units with Cyborg=yes set overrides this setting so it gets ignored when they are badly damaged and you have Berzerk=yes set, meaning that the damaged cyborg will consider friendly and allied units equally to enemy units when considering what to attack. Although a percentage value is put in here, you get more effectiveness when you put a true coefficient in (e.g. convert 200 to 2.0)."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeinholeMonsterStrength",
      "value_type": "int",
      "default_value": "10000",
      "adds_to_list": "",
      "desc": "It is not known if the Veinhole monster logic works in Red Alert 2 as it did in Tiberian Sun. It may work and/or be employed in a different way, as many units in Red Alert 2 have ImmuneToVeins=yes set. It could be that the veinhole and veins logic was originally to be used for the radiation effect. Because they are [TerrainTypes] rather than [BuildingTypes], this statement defines the strength of Veinhole Monsters in order that they may be destroyed. This was not used in Tiberian Sun as the [VEINTREE] entry defined the strength of the Veinhole Monsters."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaxVeinholeGrowth",
      "value_type": "int",
      "default_value": "1000",
      "adds_to_list": "",
      "desc": "Maximum number of cells on the map which veins can occupy, this was used by the vein growth logic to get the veins to continue growing until they occupied this number of cells."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeinholeGrowthRate",
      "value_type": "int",
      "default_value": "100",
      "adds_to_list": "",
      "desc": "Delay in seconds between each growth of veins."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeinholeShrinkRate",
      "value_type": "int",
      "default_value": "100",
      "adds_to_list": "",
      "desc": "Delay in seconds between each shrinkage of veins after the Veinhole Monster had been destroyed."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeinDamage",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Amount of damage inflicted by the veins when a unit which did not have ImmuneToVeins=yes set moved across them. The warhead defined by the VeinholeWarhead= statement was used to apply that damage."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "VeinholeTypeClass",
      "value_type": "TerrainType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Details the terrain type that defines the Veinhole Monster. This must be a valid object from the [TerrainTypes] list."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "DefaultMirageDisguises",
      "value_type": "vector<TerrainType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "List of objects from which a VehicleType with CanDisguise and DisguiseWhenStill set will select its default disguise. This is used even if you enable the [TankMakeUpKit] weapon but do not select a 'target' for the tank. This must be a valid object from the [TerrainTypes] list, although errors can be encountered if you put any TIBTRE in this list. \n  See also \n  Disguise CanDisguise DisguiseWhenStill PermaDisguise"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "InfantryBlinkDisguiseTime",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The number of frames that any disguised unit is 'visible' to an enemy unit thus rendering it eligible to be an acquired target for that enemy unit. Must be bigger than 8 (approximately half a second) for this to be reliable, although it can be set to 0 to completely prevent enemy infantry from detecting them."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaximumQueuedObjects",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "Determines the maximum number of objects a player can queue in the sidebar, plus one additional slot, for training; however, this does not apply to BuildingTypes ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "MaxWaypointPathLength",
      "value_type": "int",
      "default_value": "15",
      "adds_to_list": "",
      "desc": "Determines the maximum amount of commands that can be given to a unit in a waypoint planning mode. \n The value is hardcoded at 15 and can't be changed effectively."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TreeStrength",
      "value_type": "int",
      "default_value": "25",
      "adds_to_list": "",
      "desc": "This flag is used as the default strength for TerrainTypes that do not already have a defined Strength , or have Strength=-1 ."
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "EngineerCaptureLevel",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies the amount of damage a building must receive before it becomes capturable . If the building's health is above this percentage, enemy Engineers entering the structure will only damage it. \n In addition, when an Engineer is selected and the mouse is hovered over a building that has more than this percentage of its Strength left, the cursor will be set to \"Damage\" instead of \"Capture\". \n Note: Only applicable if the \"Multi Engineers\" game option is enabled (not available in vanilla RA2/YR). \n  See Also \n  EngineerDamage"
    },
    {
      "category": "General",
      "filename": "Rules(md).ini",
      "section": "[General]",
      "key": "TalkBubbleTime",
      "value_type": "float",
      "default_value": "300",
      "adds_to_list": "",
      "desc": "Specifies how long the speech bubble graphic should persist above a unit when triggered by the relevant map action or script . The time is expressed in seconds of system time, meaning the bubble will last exactly this many seconds regardless of your game speed setting, similar to Normalized . \n  In Red Alert 2 and Yuri's Revenge \n This flag and the logic associated with it is functional but unused. The game also lacks the necessary graphics file, talkbubl.shp \n . You can create one from scratch or extract the one from Firestorm and import it into RA2. Note that the file is hardcoded to use the palette.pal \n  color palette ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LandTargeting",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether an object can fire on land units (as opposed to naval units) or not. In YR, it additionally can allow land targeting only with the secondary weapon. \n This flag, along with NavalTargeting , was likely introduced because technically, ships are ground-level units as well, and a simple AG=yes would have does allow Submarines, for example, to fire torpedoes through the water, over the ground, into a tank. This, of course, is not desired. Therefore, the additional target area distinction between \"Land\" and \"Naval\" was created. The originally intended AN and AS were probably dismissed because they were not \"complex\" enough, allowing only a simple \"Can fire on submarines? Yes.\" rather than something like \"Can fire on submarines? Yes, but only with it's Secondary.\". \n \n  Value Basic game interpretation Explanation from rules 0 LAND_OKAY Land is okay 1 LAND_NOT_OKAY Land is not okay¹ 2 LAND_SECONDARY Can shoot land, but only with secondary weapon \n  ¹ Note: The rules at this point actually say \"Land is OK\". That is evidently wrong , illustrated by the given game interpretation, supported by the fact that \"0\" already is \"Land is okay\", and proven in the wild a thousand times over. \n  Primary/Secondary Land/Naval issues \n  NavalTargeting=1\nLandTargeting=2 \n  NavalTargeting=3\nLandTargeting=2 \n  NavalTargeting=7\nLandTargeting=1 \n  NavalTargeting=4\nLandTargeting=2 \n  This section is just ment to show that Naval- & LandTargeting aren't mutually exclusive, and can confuse the hell out of you as well as the game. Apart from the usual checks, you should watch them double closely if you're doing any extended Primary/Secondary magic. \n \n  See also \n  NavalTargeting AA / AG 's notes on paratroopers."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NavalTargeting",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether an object can fire on naval units (as opposed to land units) or not. It has several more options to choose from than LandTargeting , and YR expanded it by one more, adding the possible restriction to only use the primary weapon on naval targets. \n This flag, along with LandTargeting , was likely introduced because technically, ships are ground-level units as well, and a simple AG=yes would have does allow Submarines, for example, to fire torpedoes through the water, over the ground, into a tank. This, of course, is not desired. Therefore, the additional target area distinction between \"Land\" and \"Naval\" was created. The originally intended AN and AS were probably dismissed because they were not \"complex\" enough, allowing only a simple \"Can fire on submarines? Yes.\" rather than something like \"Can fire on submarines? Yes, but only with it's Secondary.\". \n \n  Value Basic game interpretation Explanation from rules 0 UNDERWATER_NEVER Can't shoot at all at underwater 1 UNDERWATER_SECONDARY Use Second weapon against underwater 2 UNDERWATER_ONLY Can only shoot underwater 3 ORGANIC_SECONDARY Use second Weapon on organic 4 SEAL_SPECIAL Primary on Amphibious and organic, Second on Naval and underwater-not-organic 5 NAVAL_ALL Go ahead and shoot everything with Primary¹ 6 NAVAL_NONE Don't even shoot into the water 7 NAVAL_PRIMARY Able to shoot ground target with secondary weapon, but Naval is the primary target² \n  UNDERWATER_* refers to units with Underwater =yes set. ORGANIC_* refers to units with Organic =yes set. NAVAL_* refers to units with Naval =yes set. \n ¹ Note: According to The Guide , this actually only means that everything with Naval=yes set will be attacked with the primary weapon. That leaves the secondary undocumented. It could mean a boomer, was it set NavalTargeting=5 , would shoot torpedos on ships, but fire Cruise Missiles to kill Robot Tanks, Amphibious Transporters and Tanyas in the water. This, however, is pure speculation by this revision's author. ² Also note that DeeZire mentioned a NavalTargeting=7 unit could get confused if ordered to attack amphibious units. \n  Primary/Secondary Land/Naval issues \n  NavalTargeting=1\nLandTargeting=2 \n  NavalTargeting=3\nLandTargeting=2 \n  NavalTargeting=7\nLandTargeting=1 \n  NavalTargeting=4\nLandTargeting=2 \n  This section is just ment to show that Naval- & LandTargeting aren't mutually exclusive, and can confuse the hell out of you as well as the game. Apart from the usual checks, you should watch them double closely if you're doing any extended Primary/Secondary magic. \n  See also \n  LandTargeting AA / AG 's notes on paratroopers."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpeedType",
      "value_type": "SpeedType",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "SpeedType defines the way this unit will move over different types of terrain . By default units with different SpeedTypes are affected differently by the same terrain. See LandTypes for more information. \n All available SpeedTypes: \n  Foot Track Wheel Float Winged Hover [2] Amphibious [2] Creep [3] FloatBeach [4] \n  Notes \n  Note that the AircraftTypes ' default SpeedType=Winged will always grant 100% movement ability over any terrain. \n  ↑ SpeedType=Track & SpeedType=Wheel are the defaults for VehicleTypes . Which one is used depends on the value of Crusher . If it's not set or set to 'no', Wheel is used. Otherwise Track is used. ↑ 2.0 2.1 added in Tiberian Sun ↑ added in Firestorm , therefore Creep is not available in Red Alert 2 or Yuri's Revenge ↑ added in Red Alert 2"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's ID",
      "key": "CanBeHidden",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether or not this building can be hidden by other taller buildings in front of it. Can be set to true or false."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TypeImmune",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "When set in the unit's rules entry, the TypeImmune=Yes flag will render an object immune to damage (but not targetting) from a weapon on a unit of the same identity and owner. This is used primarily on the dolphin, to ensure  groups don't damage one another with their through-damage weapons. \n It should be noted though, that when the unit is mind controlled, it is able to damage its former  identical units, because the owner has changed. \n This flag will not protect units from particle weapons (such as some flame thrower implementations, or gas from a virus dart), as the particle has no 'owner' (or any connection to the spawning weapon). \n The flag's effects on OpenTopped=Yes  passengers or building garrisons are not known."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WalkRate",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies the animation rate for moving units and defines after how many frames the animation advances to the next frame. Larger values mean slower playback. Cannot be 0 or lower. Can be specified for both SHP based and voxel based units. \n The animation also plays with this rate when a HoverAttack VehicleType has a target and it isn't deployed. \n The animation does not play in case the unit is warping in from a chrono-move or being warped out by Temporal weapons, or when attacked by IsLocomotor weapons."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MoveRate",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MoveToShroud",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object can move to shrouded (undiscovered) areas of the map. Used as an over-ride as the game defaults to 'yes' for all moving objects."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsTrain",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this VehicleType should be considered a train.\nThis causes a unit to have several special behaviours in order to act like a train: \n  It causes the unit to be immune to capture by a VehicleThief type unit as player control can cause the unit to do things that break the illusion of train like behavior (note that improperly setting up target waypoints for train movements does the same, see fooage below). It also prevents the unit from turning a full 180° and face backwards like normal vehicles. This prevents it from turning back on itself as normal units can but as a real train could not. Note that train locomotives, if MovementRestrictedTo is either undefined or the valid LandType is placed appropriately, can turn 135° at maximum without needing to actually move (135° is almost a 180° turn but lacking just one more 45° increment for a 180°). IsTrain also has the effect of causing any unit or building, in a cell the IsTrain unit is moving into to be destroyed using the warhead specified by C4Warhead , with the exception of other units which have IsTrain set: a unit set to IsTrain may move into the same cell as another unit set to IsTrain, and both units can occupy the same cell at the same time. The unit's pathfinding will ignore buildings in the way to its destination and simply move into them, including buildings owned by the same player, though it will not do so consistently, nor will the buildings the train locomotive moves into be destroyed consistently. The train locomotive doesn't get destroyed as a result, though it may be damaged. This flag also determines what units leave a crate when destroyed if TrainCrate flag is set to 'yes' in a map file. The train logic works best when the unit is restricted to a specific terrain type that is laid in one cell \"Tracks\" for the unit to follow using MovementRestrictedTo . The terrain type most commonly used for this is RailRoad and is placed using a dedicated overlay set or terrain tiles. IsTrain units are unable to perform Scatter moves on their own; might be a deal-breaker for those who want a special \"crush everything\" unit that ignores OmniCrushResistant=yes . \n  Notes \n  The effect of setting IsTrain on ObjectTypes which are not VehicleTypes is not researched. The effect of ObjectTypes with IsTrain on OverlayTypes is not researched, but it appears that IsTrain cannot destroy OverlayTypes (e.g. walls). Hover Locomotor should not be used on such Vehicles unless they're on a straight line; hovering train locomotives and compartments will stop at each corner to rotate, which eventually leads to bigger and bigger gaps within the train. \n  Footage \n  This is footage of how trains behave in YR+Ares DLL 3.0; it also shows how the illusion of train-behaviour can be broken by either modder when placing waypoints inappropriately with the map editor or player-control. \n Search YouTube for \"Trains | C&C Dune mod\". \n  https://www.youtube.com/watch?v=2XCoss_YMs4"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DoubleOwned",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In Red Alert , Counterstrike and Aftermath \n  Presumably made the unit buildable by both Allied and Soviet countries. \n  In Tiberian Sun and Firestorm \n  Unknown, presumably the same effect as in Red Alert 2 and Yuri's Revenge. \n  In Red Alert 2 and Yuri's Revenge \n If set, has the exact same effect as setting the unit's Owner to the first 31 Houses . It interacts with ForbiddenHouses and RequiredHouses the same as normal Owner does."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "GuardRange",
      "value_type": "float->int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the range, in cells, that this unit will scan for targets to attack. \n As a special case, GuardRange is also used to determine the 'auto-fill' wall placement distance; the number of cells between which a new wall can be connected to an existing wall (assuming there are no obstructions)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Explodes",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Contents 1 For TechnoTypes 1.1 In Tiberian Sun and Firestorm 1.2 In Red Alert 2 and Yuri's Revenge 2 For OverlayTypes 3 See also \n  For TechnoTypes \n  In Tiberian Sun and Firestorm \n  If Explodes=yes is set on a unit, its Primary weapon will be fired once at the cell that the unit occupies when it is destroyed. If the unit does not have Primary set then Explodes=yes will have no effect. \n The power of the explosion is proportional to the strength of the destroyed unit. The stronger the unit, the more powerful explosion. \n Note that Explodes is not responsible for the special explosions of harvesters containing Tiberium. See TiberiumExplosive for this effect. \n  In Red Alert 2 and Yuri's Revenge \n  If Explodes=yes is set on a unit, a certain weapon will be fired at the cell that the unit occupies when it is destroyed by a warhead with Temporal=no : \n  If DeathWeapon is specified on the unit then that weapon will be fired. If DeathWeapon is not specified on the unit then the its current primary weapon will be fired instead. If the unit has neither a DeathWeapon nor a current primary weapon, the default death weapon specified by [CombatDamage] → DeathWeapon will be fired instead. If the unit can carry Passengers any passengers inside will perish. \n  AircraftTypes are a special case. Even without Explodes=yes set, an AircraftType will always fire its current primary weapon at the cell it crashes into. If DeathWeapon is present, it is used instead of the primary weapon. \n  For OverlayTypes \n  This feature was neither used in Tiberian Sun nor Red Alert 2 , though the logic is still present. If an OverlayType has Explodes=yes set, then the following will occur in order when the cell containing the overlay is damaged: \n  The overlay is removed. Units firing at the cell will stop shooting at it. The animation specified by [General] → BarrelExplode= will always be displayed. There is an 85% chance that one of the VoxelAnims specified by [General] → BarrelDebris= will be randomly selected and spawned. There is a 25% chance that the particle specified by [General] → BarrelParticle= will be spawned. The damage specified by [CombatDamage] → AmmoCrateDamage= , using the warhead specified by [CombatDamage] → C4Warhead= , will always be dealt to the cell the overlay occupied. \n  See also \n  Explosive Tiberium in RA2"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeathWeapon",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the default death weapon ↑ to use when a unit with Explodes=yes set is destroyed. This is only used if the exploding unit does not have a current primary weapon ) and has not specified its own DeathWeapon ↓ . \n  For TechnoTypes \n  Flag: DeathWeapon File(s): rules(md).ini Values: Strings : Normal text. (Limited to: Weapons ) Default: none* (default is not hard-coded or pre-determined from INI code, but is instead taken to be the unit's current primary weapon ) Applicable to: TechnoTypes : AircraftTypes , BuildingTypes , InfantryTypes and VehicleTypes Specifies the death weapon ↑ to use when this unit is destroyed in-game (assuming that this unit also has Explodes=yes set). Note that DeathWeapon on the unit overrides any other method ↑ for determing the death weapon ↑ to use. Notes Firing a DeathWeapon will prevent the animations listed in an object's Explosion statement being played when that object is destroyed. However, if Explodes=yes has been set, but no DeathWeapon statement is present, the animations will be played normally. See Also Explodes DeathWeaponDamageModifier"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeathWeaponDamageModifier",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies a multiple to the Damage= inflicted by this objects DeathWeapon=. Can be used to increase or decrease the collateral damage inflicted when the object is destroyed."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FlightLevel",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies the height (in leptons ) that this aircraft will fly at. The value in [ General ] serves as a default value in case a particular aircraft doesn't specify a custom value. \n  See also \n  CruiseHeight - for JumpJet units"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsDropship",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this Fly Locomotor TechnoType should be considered as the Dropship - the special case aircraft used to transport units to the player as part of the Dropship Loadout logic which is residual from Tiberian Sun (see the Map Editing Guide). This is also used to set a flag on the 'fly' Locomotor= to specify the use of a 'landing' animation defined by the [DROPLAND] entry in ART.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PitchAngle",
      "value_type": "float",
      "default_value": "0.349066",
      "adds_to_list": "",
      "desc": "Specifies the amount, in degrees, that this unit pitches forward when flying. This is best used on non-fixed winged aircraft (such as helicopters) as a graphical effect. \n Applicable to AircraftTypes and jumpjet VehicleTypes . \n  See Also \n  PitchSpeed RollAngle"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RollAngle",
      "value_type": "float",
      "default_value": "0.523599",
      "adds_to_list": "",
      "desc": "Specifies the amount, in degrees, that this aircraft rolls when turning. Only applicable if PitchAngle is higher than 0 and/or PitchSpeed is lower than 1. \n Applicable to AircraftTypes and jumpjet VehicleTypes . \n  See Also \n  PitchSpeed PitchAngle"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PitchSpeed",
      "value_type": "float",
      "default_value": "0.25",
      "adds_to_list": "",
      "desc": "Supposedly, this flag is meant to specify the throttle setting (percentage of speed) at which this aircraft pitches forward when flying. However, aircraft pitch instantly to the degree specified by PitchAngle , and so this flag has only one observable effect: when set to 1 or higher, it forces PitchAngle=0 on the aircraft, causing it to fly leveled like a jet. \n Applicable to AircraftTypes and jumpjet VehicleTypes . \n  See Also \n  PitchAngle RollAngle"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Locomotor",
      "value_type": "CLSID",
      "default_value": "Teleport",
      "adds_to_list": "",
      "desc": "Locomotors handle the unit's movement and ensure the correct images are displayed in correct situations(walking, turning, firing, ...). \n If you give the unit an invalid locomotor value or omit the Locomotor tag entirely, the unit will default to using the Chrono locomotor. \n Note: Although the rules' comment about Locomotors specifically uses \"objects\" instead of \"units\", and there is a default of \"statue\" that probably applies to BuildingTypes, setting a Locomotor on buildings does not seem to have any effect (positive or negative) whatsoever. Furthermore, the Guide's first sentence about Locomotors is \"Should not be used on BuildingTypes\". This, however, suggests something does happen. Either way it is assumed that Locomotors are parsed and valid on BuildingTypes, but simply do not have any effect. For the sake of the game's sanity, one should not set them. \n  On Warheads \n  Flag: Locomotor File(s): rules(md).ini Values: Strings : Normal text. (Limited to: CLSID, see below ) Special Values: None Default: statue Applicable to: Warheads Describes which Locomotor to use for IsLocomotor=yes warheads. Available Locomotor CLSIDs A list of all locomotors and their purposes follows: {3DC0B295-6546-11D3-80B0-00902792494C} Levitate locomotor. Only available in Firestorm . Used by VehicleTypes , has several hardcoded features: The unit will periodically move in a random direction unless given a specific movement or attack command, similar to Visceroids . The unit will move like a jellyfish or squid, propelling itself forward while expelling gas in the form of a particle system of the type [GasPuffSys] . ROF , Speed and Range of the unit's weapon(s) are ignored. The unit will attempt to hug the target and if successful, deals the weapon's Damage every few seconds. It will also attack any enemies that happen on its path while simultaneously moving towards the main target. Note: This locomotor works in conjunction with the flag Jellyfish ; the unit must have this flag enabled for some of these features to work properly. In addition, movement and behavior controls found in the section [LEVITATION] apply. {4A582741-9839-11d1-B709-00A024DDAFD1} Drive locomotor. Used by ground-based VehicleTypes. {4A582742-9839-11d1-B709-00A024DDAFD1} Hover locomotor. Used by hovering VehicleTypes (e.g. Hover MLRS, Robot Tank). Note: Due to how it behaves, this Locomotor should not be used for fast ( Speed=31 or higher) vehicles. Other interesting side-effects can be observed here: https://www.youtube.com/watch?v=-XtU61OV0yw (Red Alert 2 Yuri's Revenge Amphibious Transports are broken.) This Locomotor should also not be used on IsTrain=yes vehicles; Hover Train locomotives can't crush Hover Train compartments, and they can't turn properly on corners without stopping and breaking the illusion of train-like behavior. {4A582743-9839-11d1-B709-00A024DDAFD1} Tunnel locomotor. Used by burrowing VehicleTypes. Unit will need MovementZone=Subterannean for the unit to actually go underground when origin and/or target location are part of TileSets with AllowBurrowing=no , else it'll drive. {4A582744-9839-11d1-B709-00A024DDAFD1} Walk locomotor. Used by InfantryTypes . Note: Due to how it behaves, this Locomotor should not be used for fast ( Speed=31 or higher) infantry. {4A582745-9839-11d1-B709-00A024DDAFD1} Drop Pod locomotor (referred to as ballistic locomotor in locos.tlb ). Used by falling objects and Drop Pods. When given to a warhead, VehicleTypes affected by it will disappear at their current location, appear in the air, and drop at an angle towards the position of the unit that originated the warhead, much like a Drop Pod falls towards the ground at an angle. If the firing unit is not moved out of the way before the falling vehicle impacts, the falling vehicle will hit and usually destroy the firing unit. Giving this to a buildable or spawned object in Red Alert 2 will cause an Internal Error upon the object being created. This may be related to this locomotor pointing to animations to attach to the object in question, but these animations are not present in that game. {4A582746-9839-11d1-B709-00A024DDAFD1} Fly locomotor. Used by AircraftTypes . It is possible to give this locomotor to a vehicle, but there are several flaws with this, such as: Vehicles will exit the gate of the War Factory, not the roof hatch, which is used by JumpJet vehicles in Red Alert 2 when leaving the War Factory. After the vehicle has exited the War Factory, it will be \"stuck\" in the bib at the War Factory's gate, unable to move. The gate of the War Factory itself will not close again after the object exits, until it is in some way removed from the bib. Selling the War Factory will free the vehicle. The object's shadow will be drawn attached to it, ignoring height, instead of on the ground underneath if it is a voxel. Vehicles using this locomotor will be unable to use Harvester functions or deploy . When given orders to attack a target outside the range of their weapon, they will often, but not always, not move towards the target in order to get into attack range, but instead remain stationary (and unable to fire) while staying in the attack mission. On the other hand, such vehicles also have some unique functions that can potentially be turned to an advantage over AircraftTypes: They are not forced to return to a docking structure after finishing a move or attack order and can circle an area indefinitely. Combined with their ability to passively engage enemy units in the same manner as ground units (but contrary to aircraft, which only attack targets explicitly given to them), they can thus be used as \"patrols\". Flying VehicleTypes are also able to engage other aerial targets, making them useful to simulate fighter aircraft, although this feature has lost its relative advantage through the addition of air-to-air combat by AircraftTypes in Ares . {4A582747-9839-11d1-B709-00A024DDAFD1} Teleport locomotor. Used by teleporting VehicleTypes and InfantryTypes. Additional logic is activated if the VehicleType in question has Teleporter set. It will then drive to any location it is ordered to, but if ordered to dock with a structure with DockUnload , it will teleport back to the dock . {55D141B8-DB94-11d1-AC98-006008055BB5} Mech locomotor. Used by walker-like VehicleTypes (TibSun Titans, Mammoth Mk.II, Wolverine). Note: Due to how it behaves, this Locomotor should not be used for fast ( Speed=14 or higher) vehicles. Has a hardcoded wobble added to the unit while it's moving, simulating the wobble caused by walking. Ignores acceleration . The unit will accelerate and decelerate instantly. Units with this locomotor are hardcoded not to tilt . There's a minor visual bug related to the wobble, in that it changes the movement trajectory of the unit when moving in certain directions. See this example . This bug is more pronounced on very low unit speeds .In addition, this is a hard coded behavior. Even if it uses voxels, it will be displayed See this example . In other words, if the number of SHP vehicle surfaces is small enough, this problem is completely invisible. Controversially, this is not used by the Terror Drone. It uses Drive Locomotor. {92612C46-F71F-11d1-AC9F-006008055BB5} Jump jet locomotor. Used by Jumpjet VehicleTypes and InfantryTypes. Useable (and used) by VehicleTypes in Red Alert 2 . In Tiberian Sun , if applied to a vehicle, this makes the object in question immune to direct-hit damage when in the air (although line damage from railguns still seems to damage such vehicles). {2BEA74E1-7CCA-11d3-BE14-00104B62A16C} Used by ships. Once thought to cause them to \"tilt\" when destroyed, but that is false. Any VehicleType can be made to sink if it weighs more than ShipSinkingWeight , no matter what Locomotor it uses. Even the Amphibious Transports using Hover locomotion will \"tilt\"/sink if they weigh enough. {B7B49766-E576-11d3-9BD9-00104B972FE8} Used by Spawned Missiles (V3, Dreadnought, Boomer). Giving this to a buildable item from AircraftTypes will turn it into such a missile, and once targeted, it won't accept other orders, and hit the target kamikaze-style. See Also SpeedType MovementZone Phobos now possible to write locomotor aliases instead of their CLSIDs in the Locomotor tag value , This greatly facilitates the writing of Locmotor Value."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CloakingSpeed",
      "value_type": "int",
      "default_value": "7",
      "adds_to_list": "",
      "desc": "Specifies the duration, in frames , of each cloaking stage . Effectively, this is the speed at which the object (de)cloaks, with 1 being the fastest and 10 slowest possible. \n  See Also \n  CloakingStages CloakDelay Cloakable"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ThreatAvoidanceCoefficient",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Affects how strongly this unit should choose a path of least threat. It is recommended to pick a value from a range of 0.0 to 1.0 . The higher the value, the more the unit tries to avoid any paths that fall in the range of the enemy, effectively choosing the path with least threat. Typical usage is found in harvesters or ore miners. It is an attribute of the unit and lasts until the unit is destroyed. \n AvoidThreats =yes on the AI TeamTypes makes the team members act like it is set with ThreatAvoidanceCoefficient=1.0 for the duration of that TeamType's existence. \n While The Threat System describes the mechanism of selecting a target during engagement when a unit is free to do so, the threat avoidance is the evaluation of the cumulative threat falling on different paths to its destination from its current cell and choosing a path with least threat."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SlowdownDistance",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "Over-ride which specifies the distance, in leptons, that this object must be from its intended target location before it applies de-acceleration. \n  Using really high numbers here (presumably in the 10,000s) will give an aircraft a behaviour similar to the Aurora Bomber from Generals: the aircraft will approach its target at full speed, unload its weapon, then return to base, and as it does the latter, it will fly very slow, as the base it intends to land is within the very large SlowdownDistance, thus it deccelerates. This only works if the aircraft fires its weapon in a strafing pattern (projectile with a ROT of 1 or smaller), thus counting the acctual attack as part of its move. If the weapon is fired in a \"helicopter\" fashion (like the ORCA in Tiberian Sun), the attack is performed at the end of a movement assignment, and thus the aircraft will slow down when approaching the target it was ordered to attack. Therefore, the Aurora-like behaviour can only be replicated with strafing weapons. It remains to be seen wether Fighter and FlyBy have any influence on this. Projectiles that are rendered invisible (Image=none and/or Inviso=yes) seem to present special cases. Research is required. \n  Using a value of 0 results in: either an aircraft that never lands, but instead hovers above its landing location, as if it was a BalloonHover ing VehicleType (This works in TS; presumably it works in RA2 as well, but this needs to be verified) or in an aircraft that circles in the air above the location it is intended to fly to. This effect is observable in RA2, but unconfirmed for TS. It is not known what factor causes the aircraft to decide for one of these two behaviours, but it could be related to the Fighter= tag or the weapon it carries. The radius of the circle the aircraft flies around its destination is determined by the ROT and the Speed of the aircraft - a higher ratio of ROT:Speed means a smaller circle, while low ratio of ROT:Speed increases the circle. If an aircraft has a large circle, it will not return to its airport but circle the area indefinitely, propably because it is unable to ever fly directly above its destination and so never gets to complete its movement command."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeaccelerationFactor",
      "value_type": "float",
      "default_value": "0.002",
      "adds_to_list": "",
      "desc": "Percentage multiple over-ride (reduction) to apply to the object's speed if it is ending movement. Basically, this controls how quickly the unit decelerates. Larger values mean slower deceleration. \n Always double check Accelerates is not disabled on the unit in question. You need the default or Accelerates=yes for this work. \n  Bugs/Side-Effects/Unexpected Limitations \n  If this flag is set to zero, speed modifiers such as terrain characteristics do not affect the unit's speed while the unit is moving. \n  See Also \n  Accelerates AccelerationFactor SlowdownDistance"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AccelerationFactor",
      "value_type": "float",
      "default_value": "0.03",
      "adds_to_list": "",
      "desc": "This tag is the percentage increase to apply to a unit's Speed after it begins to move. Basically, this controls how fast the unit accelerates. \n Always double check Accelerates is not disabled on the unit in question. You need the default or Accelerates=yes for this work. \n  See Also \n  Accelerates DeaccelerationFactor"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Weight",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies the weight of this VehicleType with lower values representing 'light' and higher values representing 'heavy'. This is used for several purposes in the game. Firstly, if this unit is hit by a Warhead= with Rocker=yes set, then the degree of rocking is determined by this value (lighter units rock more dramatically). Secondly, this is used to determine if the unit will break or crack ice if it moves over it (is checked against the IceBreakingWeight= and IceCrackingWeight= statements). Thirdly, if the unit has Naval=yes set (i.e. it is a ship) then this is used to determine if it explodes or sinks when destroyed (is checked against ShipSinkingWeight=)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PhysicalSize",
      "value_type": "float",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Specifies the amount of Z-fudge to apply to this InfantryType to ensure display is consistent to all other objects in the game. Multiply this value by 10 to get the Z-adjustment. All infantry units should have a value of '1' (meaning a Z-adjustment of 10). It is not known if this is related to any other logic in Red Alert 2."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Size",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This flag specifies the amount of space a passenger unit occupies within a transport vehicle . \n For a passenger to be able to enter a transport the following conditions must be true: \n  The passenger's Size must not exceed the transport's SizeLimit . The combined Size of all passengers including the one attempting to enter must not exceed the transport's Passengers . \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n Although technically Size is applicable to aircraft , it's not actually possible to order an aircraft into a transport."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SizeLimit",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In RA2/YR, SizeLimit = determines the maximum Size = of a unit that is allowed to enter this unit as a passenger. \n In RA1/TS, there was no such flag, and the transport size limit was hardcoded to 1. In RA1, all objects, including vehicles, were hardcoded to act as if they had Size =1 , while in TS, vehicles were hardcoded not to behave as passengers, and the infantry was again treated as Size =1 . \n  Bugs/Side-Effects/Unexpected Limitations \n Giving a vehicle with Size \n smaller than SizeLimit \n of an amphibiuos transport a SizeLimit \n bigger than 2 (i.e. can load actual tanks)will result in a seemingly random crash when ordered to enter said transport. (RA2 Eip:0054D10A)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HoverAttack",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this unit with JumpJet=yes set should be in the air when/between attacking or land when it is no longer in an attack mission."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VHPScan",
      "value_type": "VHPScan",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag influences the way the unit in question chooses its targets when it has not explicitly been assigned a target. \n Each object on the map has an internal \"projected health\" independent from its current health. This projected health gets reduced by the estimated amount of damage the unit will likely take on impact every time a projectile not set to inaccurate is launched towards the unit.\nThis provides attackers currently automatically seeking targets with information about whether it is efficient to attack this unit or not (e.g. if two projectiles are currently in the air which will kill the unit once they impact, there is no reason a new attacker should bother picking the same unit as its next target - it will be dead in a moment anyway). \n The projected health cannot go below -30 hitpoints, and it will increase every 4 frames until it equals the real health. Repairing a unit will set the projected health to the current health. \n  Contents 1 Values 2 Examples 3 Notes 4 Meaning of \"VHP\" \n  Values \n  None \n  Ignores the projected health when looking for a new target. \n  Normal \n  Values targets with a projected health of less than half their Strength twice as high, and targets with a projected health of zero or less half. I.e. take the chance to finish off a unit quickly. In other words: Focus on units that are projected almost dead. \n  Strong \n  Ignores all targets whose projected health is lower or equal to zero, that is whose deaths are imminent. In other words: Attacks everything projected alive. \n  Please keep in mind that this flag is only part of the entire system that is responsible for automatic targeting. \n  Examples \n  Assuming Apocalypse Tanks had VHPScan=Strong set. \n  3 Grizzlies are attacked by 3 Apocalypse Tanks. 2 Apos attack 1 Grizzly, the other Apo attacks another one; one Grizzly stays unattacked. Due to prior damage on the second Grizzly, the single Apo kills his target first. He now has to scan for new targets. At this point, the other two Apos each fire a shot towards their Grizzly. Each time a bullet leaves one of their barrels, the Grizzly's projected health gets reduced by the amount of damage the bullet will likely cause once it impacts. As the bullets fly towards the Grizzly, the single Apo checks its projected health. He sees that the Grizzly is projected to be dead once all bullets impacted, and chooses the unattacked Grizzly instead. \n  Assuming Grizzly Tanks had VHPScan=Normal set. \n  2 Grizzlies attack 3 Flak Tracks. Each picks one, leaving one unattacked and at full health. The Grizzlies' shells do extensive damage to the attacked Flak Tracks. As the two Flak Tracks are below half health and another projectile is on the way to destroy the first one, a third Grizzly enters the combat zone. It queries the Flak Tracks' projected health, and realizes that two of them have less than half their strength and one will be destroyed within a split second. It chooses to attack the damaged one that is not destroyed when the projectile impacts. \n As you can see, VHPScan helps uncontrolled units to pick their targets more efficiently, leading to a better distribution of firepower. \n  Notes \n  This flag is only set on the Patriot Missile ( [NASAM] ) in RA2 and YR; it is set to strong . \n  Meaning of \"VHP\" \n  Since the source comments and variable names used by Westwood are unfortunately unavailable, the original meaning of \"VHP\" is unknown at this point; theories are listed below. \n  V...HealthProjection ValueHealthProjection V...HitPoints VirtualHitPoints"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MaxDebris",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "On a VehicleType \n  When this VehicleType is destroyed, it will spawn a random number of debris from the [ General ] → ExplosiveVoxelDebris list , or the DebrisTypes list on the unit, if that is set. The random number is picked from the interval [ MinDebris ; MaxDebris ] (inclusive). \n  On a Warhead \n  Note: This section is for YR only. \n When this warhead detonates, it will spawn a random number of debris from the [ General ] → MetallicDebris list at the impact point. The random number is picked from the interval [ MinDebris ; MaxDebris ] (inclusive). \n  See Also \n  MinDebris DebrisTypes DebrisMaximums"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MinDebris",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "On a VehicleType \n  When this VehicleType is destroyed, it will spawn a random number of debris from the [ General ] → ExplosiveVoxelDebris list , or the DebrisTypes list on the unit, if that is set. The random number is picked from the interval [ MinDebris ; MaxDebris ] (inclusive). \n  On a Warhead \n  Note: This section is for YR only. \n When this warhead detonates, it will spawn a random number of debris from the [ General ] → MetallicDebris list at the impact point. The random number is picked from the interval [ MinDebris ; MaxDebris ] (inclusive). \n  See Also \n  MaxDebris DebrisTypes DebrisMaximums"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DebrisTypes",
      "value_type": "vector<VoxelAnimation>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies which VoxelAnims can be spawned as debris after this VehicleType is destroyed. If it is left blank, debris from [ General ] → ExplosiveVoxelDebris list is used instead. \n  See Also \n  MinDebris / MaxDebris DebrisMaximums"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DebrisMaximums",
      "value_type": "vector<int>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "When this VehicleType is destroyed, and the DebrisTypes list on the unit is not empty, this list specifies the maximum amount of each DebrisType on that list that can be spawned. For example: \n  MinDebris=3\nMaxDebris=5\nDebrisTypes=TIRE,HTNKTUR\nDebrisMaximums=4,1 \n  specifies that only one (1) instance of HTNKTUR can be spawned while four (4) instances of TIRE can. \n Note: It appears this system is broken in RA2 and YR and does not create any limits for each DebrisType, and as such the above example would not stop the game from spawning two or even more turrets. \n  See Also \n  MinDebris / MaxDebris DebrisTypes"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DebrisAnims",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This statement forms a list of the animations defined with the MetallicDebris= statement in the [AudioVisual] section which are spawned upon this objects destruction."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HasTurretTooltips",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines if this multiplexes the 'tool tips' (text that is displayed on screen as its name when the mouse is left over it) based on its current turret. The effect is that the name of the current weapon (see the $TurretWeapon= entry) acts as a prefix to the name of the unit, so for example a 'Machine Gun' turret weapon on the IFV unit would become 'Machine Gun IFV'."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretCount",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of turrets this object has. Used for special weapon systems, for example, turret-changers ( Gunner=yes ), charge turrets ( IsChargeTurret=yes ), or gattling logic ( IsGattling=yes ). \n In those cases, the game loads files objectname tur %d .vxl/hva , where %d represents the number between 1 and TurretCount , as opposed to plain objectname tur.vxl/hva it loads normally. \n  Bugs/Side-Effects/Unexpected Limitations \n When setting TurretCount to a value greater than 0 , see that WeaponCount is also set correctly. This has to be done because the latter is not initialized to a constant value, and garbage in memory could lead to unexpected results, like corrupting memory. In the best case it crashes when starting a game."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WeaponCount",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of weapons this object has. Used for special weapon systems, for example, turret-changers ( Gunner=yes ), charge turrets ( IsChargeTurret=yes ), or gattling logic ( IsGattling=yes ). \n In those cases, the game parses weapons specified by (Elite)Weapon %d = , where %d represents the number between 1 and WeaponCount , as opposed to (Elite)Primary/Secondary it loads normally. Then, (Elite)Weapon1 is used as the default weapon instead of Primary . \n Values larger than 18 are not allowed and will corrupt memory. \n  Bugs/Side-Effects/Unexpected Limitations \n The game does not initialize this to a constant value. If this tag is not defined, random garbage in memory is used as weapon count, which can lead to desyncs, crashes during loading time, or -- in the worst case -- appear to be working. If TurretCount is greater than 0 , set this value, too."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsChargeTurret",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, specifies that: \n  this object should cycle all of its turrets (see TurretCount ) before each shot, to create an impression of the weapon charging/recoiling; this object should only use Weapon1 and EliteWeapon1 , and ignore all other weapons it has."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ClearAllWeapons",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This sets the object's Primary , Secondary , ElitePrimary , EliteSecondary , Weapon1 and EliteWeapon1 to blank, meaning the unit will only get weapons if it is an IFV and an infantry boards it. The weapons do remain loaded by the game as if loaded by a weedguy hack. \n This flag is also found on buildings that were made ungarrisonable in the first RA2 Soviet mission, sov01t.map. \n The effect appears to be the same on them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Primary",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the main weapon of the TechnoType for which this flag is set. The Primary weapon is always used when: \n  Force-firing at the ground Attacking overlays (such as walls). Note that a unit whose Secondary weapon can attack walls, but Primary weapon can't, will not, in fact, be able to attack walls. The unit's Secondary weapon's warhead 's Verses value for the Armor type of the target matches that for the unit's Primary weapon. \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n  Scanning the area for targets. \n  Red Alert 2 and Yuri's Revenge introduced units with special-case methods for specifying weapons - the IFV, Prism Tank and Gattling Cannon use WeaponX in place of Primary . \n  Current Primary Weapon \n  The weapon that a unit considers to be its actual primary weapon is not always determined simply by Primary . If the unit has both TurretCount and WeaponCount flags set then it will use WeaponX instead. If the unit is elite then it will use ElitePrimary or EliteWeaponX respectively instead. If a unit has a current primary weapon then it is used as the unit's default DeathWeapon . \n  See Also \n  Targeting System \n  Armament System related Flags on ModEnc \n  Weapons AmbientDamage Anim AssaultAnim Bright Burst BurstDelayX Damage DecloakToFire DisguiseFakeBlinkTime DisguiseFireOnly FireInTransport FireOnce IsAlternateColor IsElectricBolt IsHouseColor IsLaser IsLine IsMagBeam IsRadBeam IsRadEruption IsSonic LaserDuration LaserInnerColor LaserOuterColor LaserOuterSpread Lobber MigAttackCursor MinimumRange OmniFire Projectile ROF RadApplicationDelay RadColor RadDurationMultiple RadLevel RadLevelDelay RadLevelFactor RadLightDelay RadLightFactor RadSiteWarhead RadTintFactor Range Report RevealOnFire SabotageCursor Suicide TerrainFire Warhead \n  Warheads AffectsAllies Airstrike BombDisarm Bright Bullets CLDisableBlue CLDisableGreen CLDisableRed CellSpread Conventional Culling DirectRocker EMEffect EMP.Cap EMP.Duration EVerses InfDeath IronCurtain.Cap IronCurtain.Duration IsLocomotor IvanBomb Locomotor MaxDebris MinDebris MindControl MindControl.Permanent Parasite PenetratesBunker PercentAtMax Poison ProneDamage Psychedelic PsychicDamage Radiation Rocker Sonic Sparky Temporal Temporal.WarpAway Tiberium (INI flag) Veinhole Verses Wall WallAbsoluteDestroyer Wood \n  Projectiles AG Acceleration Airburst AirburstWeapon AlphaImage AlternateArcticArt AnimPalette Arcing Bouncy Cluster Elasticity FirersPalette High Image Inaccurate LineTrailColor LineTrailColorDecrement NewTheater Proximity ROT ShrapnelCount ShrapnelWeapon SubjectToCliffs SubjectToElevation SubjectToWalls Theater UseLineTrail"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Secondary",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the auxiliary weapon of this object. This weapon is used to target objects that the Primary = \n cannot."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ElitePrimary",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the weapon which replaces the object's Primary = \n weapon when the object reaches \"Elite\" state."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteSecondary",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the weapon which replaces the object's Secondary = \n when the object reaches \"Elite\" stage."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WeaponX",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies a special case weapon for this object. Special cases are those which don't use the traditional Primary/Secondary weapon systems, for example, turret-changers ( Gunner=yes ), charge turrets ( IsChargeTurret=yes ), or gattling logic ( IsGattling=yes )."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteWeaponX",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies a special case weapon for this object, an elite version of WeaponX ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceMove",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is selected and ordered to move. Should be set to a valid entry from SOUND.INI and works only for objects with a valid Locomotor=."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSelect",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is selected. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSelectEnslaved",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is selected whilst enslaved. Should be set to a valid entry from SOUNDMD.INI. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSelectDeactivated",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "If this unit has PoweredUnit=yes set, this is the voice used when it is selected but deactivated. In that instance, this voice over-rides the VoiceSelect= entry. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceAttack",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when a unit fires its weapon. This is the most generic sound related to firing weapons and it only applies if none of the more specific flags are set. \n  In Red Alert 2 \n  Red Alert 2 uses [AudioVisual] → VoiceIFVRepair= , if the firing techno is of type [FV] and the selected weapon deals negative damage (like an Engineer in an Infantry Fighting Vehicle), otherwise [TechnoType] → VoiceAttack= is used. \n  In Yuri's Revenge \n  Yuri's Revenge uses this method to select a firing voice: \n  Find the first matching case, even if the flag is invalid or contains no sounds. If the firing techno is of type [FV] and the selected weapon deals negative damage (like an Engineer in an Infantry Fighting Vehicle), [AudioVisual] → VoiceIFVRepair= is used. If the firing techno is elite, use either [TechnoType] → VoicePrimaryEliteWeaponAttack= or [TechnoType] → VoiceSecondaryEliteWeaponAttack= , depending on which weapon is fired. If the firing techno is rookie or veteran, use either [TechnoType] → VoicePrimaryWeaponAttack= or [TechnoType] → VoiceSecondaryWeaponAttack= , depending on which weapon is fired. If the selected flag is not valid (undefined or set to <none> ), fall back to [TechnoType] → VoiceAttack= . Randomly play a sound from the selected list. If it is not valid either (undefined or set to <none> ), play no sound. \n  Note that this means a unit will lose its specialized VoicePrimaryWeaponAttack and VoiceSecondaryWeaponAttack voices once it becomes elite, unless VoicePrimaryEliteWeaponAttack and VoiceSecondaryEliteWeaponAttack are defined and valid. In the original game this happens to Boris' airstrike weapon, the Magnetron's building shake attack, the Boomer's missile attack and many others. \n  See also \n  VoicePrimaryWeaponAttack VoicePrimaryEliteWeaponAttack VoiceSecondaryWeaponAttack VoiceSecondaryEliteWeaponAttack VoiceIFVRepair"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSpecialAttack",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceDie",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is destroyed. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceFeedback",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is attacked and takes damage. This is hard coded to play at random intervals when that condition is met. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AuxSound1",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Is used on AircraftTypes only and specifies the sound to be made when the object takes off. Should be a valid entry from the [SoundList] in SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AuxSound2",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Is used on AircraftTypes only and specifies the sound to be made when the object lands. Should be a valid entry from the [SoundList] in SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CreateSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound this object makes when it is built or trained. As this is always a 'global' type sound , it is used to warn all players on the map that this unit has been created. The sound must be a valid entry listed in the SoundList section of sound(md).ini ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamageSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this object every time it is hit by enemy fire. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImpactWaterSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make when an object impacts on water (e.g. crashing aircraft) and can be any sound as defined in the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImpactLandSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make when an object impacts on the ground (e.g. crashing aircraft) and can be any sound as defined in the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CrashingSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this AircraftType with Crashable=yes set crashes to the ground. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SinkingSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make when a naval unit sinks and can be any sound as defined in the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceFalling",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when an object with MovementZone=Fly and JumpJet=yes set is falling from the sky. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceCrashing",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when an object with MovementZone=Fly and Crashable=yes set is shot down from the sky. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSinking",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when a VehicleType with Naval=yes set is destroyed if its Weight= is greater than the value specified by ShipSinkingWeight= in the [General] section. If the vehicle meets both of those criteria then this tag should be used in place of VoiceDie=. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceEnter",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when an unit is set on enter mission. This includes units entering transports and buildings (excluding the cases where VoiceCapture or VoiceSpecialAttack is used instead). If this value is not set or it is invalid, VoiceMove is used instead. \n  See also \n  VoiceCapture VoiceSpecialAttack"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceCapture",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when an unit is set on capture mission. This includes most \"infantry entering a building\" actions ( Engineer , Agent , Occupier and Assaulter but not entering Grinding , Hospital or Armory buildings or use of C4 ) as well as VehicleThief entering capturable vehicles. If this value is not set or it is invalid, VoiceEnter is used instead. \n  See also \n  VoiceEnter"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CloakStop",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether this object with Cloakable=yes set only cloaks itself when it stops moving. The object can still be cloaked by CloakGenerator=yes buildings while on the move. If the object gained cloaking ability through experience, CloakStop does not apply and the object will also cloak when moving. \n Does not to work in Red Alert 2 and Yuri's Revenge ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Storage",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the maximum number of 'bails' of Ore that this object can store and thus how many credits it carries. This is reserved for VehicleTypes which have Harvester=yes or Weeder=yes set and BuildingTypes which have Refinery=yes or Weeder=yes set. Whole numbers only."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BuildLimit",
      "value_type": "int",
      "default_value": "2147483647",
      "adds_to_list": "",
      "desc": "Specifies the maximum instances of a particular technotype that any given player may own before they will be prevented from building further instances (sidebar build icon gets disabled). \n Instances of a unit include those that were built by the player, awarded at the start of the campaign or skirmish, awarded via a map trigger, created via a Cloning Vats or mutation , or mind-controlled from another player. A player is not prevented from exceeding the BuildLimit of a unit via any of the aforementioned methods except normal construction. \n  Contents 1 Special Values 2 Super Weapons 3 Bugs/Side-Effects/Unexpected Limitations 4 Footnotes \n  Special Values \n  Setting BuildLimit to any negative value has a different effect from the normal behaviour. The absolute value of the number is used as the build limit, however this is now a limit on the number of times you can actually build the unit yourself. For example, if BuildLimit=-5 is set on the GI then you will only be able to build 5 GIs throughout the course of any given game. This is regardless of how many GIs you may have started with or obtain through other means. Once you have personally built | BuildLimit | instances of a unit, that unit's build icon will disappear from the sidebar until the next campaign or skirmish. \n Sidebar icon is not available when BuildLimit is set to 0. \n  Super Weapons \n  Each super weapon type in the game can only be instantiated once per player. If you were to own, say, two Nuclear Missile Silos, you would still only have one Nuclear Missile super weapon available. BuildLimit has no effect on this. Other special-function buildings (such as the Ore Purifier, Industrial Plant and Cloning Vats) can stack their effects - they simply have BuildLimit=1 set for reasons of balance. \n  Bugs/Side-Effects/Unexpected Limitations \n  AI players are not subject to any unit's BuildLimit . AI players will build whichever units are required by the chosen TaskForce regardless of how many instances of those units the AI player already owns. The BuildLimit system was created to allow the inclusion of so-called \"hero\" units, of which only one is supposed to exist at any given time. As such, the system was only designed to work for BuildLimit=1 . Whilst you can set a higher BuildLimit , you will not be able to queue up the entire limit 'in a row' - you will have to queue the last one separately. For example, if you had a unit with BuildLimit=5 , you would have to either: Queue the first 4, build them, and then queue the final one. Queue the first 4, add a different unit to the queue, queue the final one. Build a different unit, queue all five, cancel the different unit unless you want it. \n  Footnotes \n  Warning : The default INI files contain commented out or unexplained usage of this flag/section which, when restored (often simply out of curiousity), results in problems that are hard to trace and are seemingly unrelated. \n  1 ↑ The comment in Rules(md).ini , which states that the default is -1, is incorrect, as is the stated effect of setting BuildLimit=-1 ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Category",
      "value_type": "Category",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "This states to which 'category' this object belongs and is used by the AI systems for targeting, team formation and construction purposes. For best results, and to avoid undesirable effects in the game, it is best to be truthful when defining this object. Placing it in a category to which it would not normally belong will make the AI even more ineffective than it already is. NOTE: although mentioned in RULES.INI, the Civilian category is obsolete and unused in Red Alert 2. Since Tiberian Sun, objects are defined as being civilian when they have Civilian=yes set. The following categories are valid in Red Alert 2: \n  AirLift\t        Air Transport AirPower\tAir Combat Support Transport\tTransport Vehicle Support\t        Miscellaneous Support Vehicle LRFS\t\tLong Range (Indirect) Fire Support IFV\t\tInfantry Fighting Vehicle AFV\t\tArmored Fighting Vehicle Recon\t\tReconnaisance Vehicle VIP\t\tImportant infantry Soldier\t        Infantry unit"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Dock",
      "value_type": "vector<BuildingType>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Dock= specifies which buildings this object can dock with, for whatever purpose. In order to make the docking work, the specified building(s) needs to be set up as well (see below). \n  Contents 1 Docking 1.1 Rules coding 1.2 Art coding 1.3 Structure-specific info \n  Docking \n  Certain units can dock with their parent structures (aircraft -> AFC, harvester -> refinery, vehicles -> repair bay/tank bunker, ships -> shipyard). Docking can repair/reload/unload the unit or fortify it, depending on the structure. \n  Rules coding \n  Buildings that only certain units can dock with should be listed in the Dock= statement in the unit's code, and the structures themselves should have NumberOfDocks= set (equal to .. number of docking points within a structure, duh). NumberImpassableRows= is also needed - otherwise units will acknowledge the \"Enter\" command, but will stop at the structure, unable to move over it. Repair bays and tank bunkers accompany any vehicle, and none of them has Dock= set to the repair bay. That's because the repair bay has UnitRepair=yes and NumberImpassableRows=1 , which flags it as an area passable by any VehicleType . In TS, NonVehicle=yes prevents a unit being repaired, while in RA2 it only prevents other vehicles repairing them, not the service depot. The Tank Bunker can hold units inside because it has Bunker=yes set. The AFC can hold only aircraft on it because of Helipad=yes , it doesn't need NumberImpassableRows= . \n  Art coding \n  By default, the units dock with the structure in it's exact center point. This can be changed by adding DockingOffsetN=X,Y,Z to the structure's art.ini coding. N is the number of the docking position, and will be used if all the docks with smaller N are used up. N starts at 0, not at 1. X, Y and Z are measured in leptons (1/256th of a cell). The center point of the structure is 0,0,0 and if you imagine a foundation of a 2x2 structure like so: \n  -A-\nBXC\n-D- \n  , the X increases from A to C, and Y - from A to B. \n To make it more clear, here's the Aircraft Command HQ: \n \n Here we can see the X axis, Y axis, and Z axis offsets in leptons from the center (0) of the building, where the red cells are not docks. As an example, from this image you can see that if you wanted to make Dock #5 where the topmost red cell is located, you would use DockingOffset4=-256,-128,0 where the center of that cell's X coordinate is -256 and center of the cell's Y coordinate is -128. \n  Structure-specific info \n  From testing, I've seen that: \n  A refinery is hardcoded to use only one cell for it's docking location, and it ignores both NumberOfDocks= and DockingOffset= and uses the center cell in the bottom-most row of the structure. A repair bay can only have one dock, otherwise it'll crash. A tank bunker is hardcoded to only one dock too, though I'm not sure if it can be not the exact center of the structure. An AFC can use a lot of docks... a lot more than the usual 4. I've tested it more thoroughly and I've seen it support up to 16 docking locations. They'll work perfectly as long as you make sure all the DockingOffsets= are within the structure's Foundation= . If DockingOffset= points to outside the Foundation= , the aircraft will be produced on that offset as usual, but they'll refuse to land there after flying. \n  Note: The rules' comment is \n  <<< applies only to moving units (not buildings) >>> Dock = preferred docking building [e.g., harvester -> refinery, helicopter -> helipad] (def=none) \n ...since the Type-specific flags are listed below that section, this comment does theoretically not exclude InfantryTypes as users of Dock \n . The Guide only lists AircraftTypes and VehicleTypes. If anyone has made entirely sure that InfantryTypes cannot dock to buildings, please alter this page accordingly. (Just because a simple VehicleType-like connection does not work, it's not automatically impossible.)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeploysInto",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the BuildingType that this VehicleType can deploy into (the UndeploysInto flag specifies what VehicleType that BuildingType will undeploy into). The specified BuildingType's Buildup animation is played as this happens."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UndeploysInto",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the VehicleType that this BuildingType can undeploy into (you can set which VehicleType deploys into this BuildingType by using the DeploysInto flag). This BuildingType's Buildup animation is played (in full length, unlike when you sell this building) in reverse direction. \n It has been reported that using UndeploysInto=none results in the object automatically being sold when undeployed. \n  Undeployed vehicle facing \n  Mind that if the game doesn't know which direction the VehicleType should be facing when it undeploys, it will undeploy the building without spawning the vehicle. The facing can be specified in the following ways: \n  INI Flag Facing ConstructionYard=yes Warning: Side-effects. South-West TickTank=yes North-West Artillary=yes North-East ICBMLauncher=yes North-East SensorArray=yes DeployFacing As set DeployDir"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PowersUnit",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Although all TechnoTypes parse this flag, it only has the expected effect when applied to BuildingTypes. \n  Specifies a unit that is \"powered\" by the presence of this object. All instances of the specified VehicleType owned by HouseX will be deactivated whenever HouseX has no powered instances of this BuildingType. \n Relevant pseudocode is available at http://dc.strategy-x.com/src2/HouseClass/GotPoweredCenter.cpp .\nRelevant pseudocode is available at http://dc.strategy-x.com/src2/HouseClass/LostPoweredCenter.cpp . \n  Automatic List Inclusion \n  VehicleTypes used as values for this flag are automatically listed under the internal [VehicleTypes] array. However no harm can be done by listing them manually. \n Although all TechnoTypes parse this flag, it only has the expected effect when applied to BuildingTypes. Applying it to other TechnoTypes will only parse the flag and append the VehicleTypes array if necessary. \n  Bugs/Side-Effects/Unexpected Limitations \n  The logic only works properly when one house owns only one BuildingType with this function. When a house owns several different BuildingTypes, problems will ensue - only one of them will deactivate and reactivate the powered units correctly. When multiple powered units are owned by one house, the very last powered center to shutdown/die will turn off its own powered units. The very first one constructed after that will reactivate its own powered units. \nUnits powered by other powered centers that are explicitly specified as PoweredUnit=yes will be deactivated when they try to move and the powering building is not present, but not reactivated. Units that do not have said flag will remain oblivious to the fact their control structure is not present and remain functional (assuming their control center wasn't the very last one to shut down, see above). \n IE; (You must sacrifice the robot tanks logic to use this on another unit instead)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PoweredUnit",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this unit requires the presence of a BuildingType to operate. The corresponding BuildingType must have the PowersUnit= statement present and specify this unit. Only works on VehicleTypes. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightningRod",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Objects with this flag  more likely to be hit by lightning bolts during Ion Storms. \n Relative to IonLightningRandomness and IonLightningFrequency , the chance of an object with LightningRod=yes to get struck by lightning is as follows: \n  42% for powered-on buildings. 12% for infantry and units with a powered locomotor. 2% for the rest. \n  See Also \n  IonLightningFrequency IonLightningRandomness IonImmune"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ManualReload",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this unit must reload by docking with a structure that has UnitReload=yes set and to which the unit has Dock= set. This defaults to 'no' for all units except aircraft."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretSpins",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to yes, the turret of this VehicleType will continuously spin around. The unit will therefore only attack other units when the turret allows it to (points in the right direction or the weapon is OmniFire=yes )."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TiltCrashJumpjet",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Should only be used on 'jumpjet' units. This specifies whether or not the unit should 'tilt' when crashing rather than simply fall vertically like the Kirov. This effect is used on the Floating Disc in Yuri's Revenge. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Turret",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this object has a turret. \n  On VehicleTypes The turret filename has to be the same as the object's, with the suffix tur , and be in VXL format, with an accompanying HVA . Should [UNIT] have Turret=yes set but no file with the name unittur exist, the game will crash. On BuildingTypes The turret filename is specified by TurretAnim , should be the same as on VehicleTypes, and its format is specified by TurretAnimIsVoxel . If the turret is in SHP format, it should be defined in art(md).ini and listed in [Animations] in order to be loaded by the game. If the turret is in VXL format, this is not necessary."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretRotateSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "TurretRotateSound specifies the sound played when an object's turret rotates. It can be set to any valid sound as defined in Sound(md).ini , and is primarily used in Red Alert 2 and Yuri's Revenge on the Grand Cannon ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EnterTransportSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this VehicleType when a unit enters it. Applies only to a VehicleType that has a Passengers= value set and whose SizeLimit= permits access to it by other units. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeaveTransportSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this VehicleType when a unit leaves it. Applies only to a VehicleType that has a Passengers= value set and whose SizeLimit= permits access to it by other units. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MoveSound",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this VehicleType or InfantryType when it moves or changes direction to move. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DieSound",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this object when it is destroyed. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeploySound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the generic sound to make when units are commanded to deploy by double clicking them, through the hotkey defined in KEYBOARD.INI or through the Advanced Command Bar (if defined in UI.INI). NOTE: although parsed and valid in Red Alert 2 this is not used, probably because this is a generic sound made by all units regardless of what they are or what side they belong to. Can be any sound as defined in the SOUND.INI file but is usually a voice. \n  \n Specifies the sound made by this VehicleType which deploys into a BuildingType when it is ordered to deploy. Can be set to any valid entry from the SOUND.INI file. Although present and parsed in Red Alert 2, this only appears to work in Yuri's Revenge."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UndeploySound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object undeploys. Should be set to a valid entry from SOUND.INI. Appears not to work on BuildingTypes which can undeploy, you should use the PackupSound= statement instead for those. NOTE: in Yuri's Revenge, none of those methods work - you can however use DeploySound= for such an object which can redeploy, and this sound will be used when it undeploys."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ChronoInSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make when an object appears after Chronoshifting and can be any sound as defined in the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ChronoOutSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make when an object dissapears through being Chronoshifted and can be any sound as defined in the SOUND.INI file."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceHarvest",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is ordered to harvest Ore. Should be set to a valid entry from SOUNDMD.INI and applies only to those objects that have ResourceGatherer=yes or Harvester=yes set. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoicePrimaryWeaponAttack",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when a rookie or veteran unit fires its primary weapon. If this value is not set or it is invalid, VoiceAttack is used instead. Elite units use the sound entries defined by VoicePrimaryEliteWeaponAttack . \n For more information on how the firing voice is selected, see VoiceAttack . \n  See also \n  VoiceAttack VoicePrimaryEliteWeaponAttack VoiceSecondaryWeaponAttack VoiceSecondaryEliteWeaponAttack VoiceIFVRepair"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoicePrimaryEliteWeaponAttack",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when an elite unit fires its primary weapon. If this value is not set or it is invalid, VoiceAttack is used instead. Rookie and veteran units use the sound entries defined by VoicePrimaryWeaponAttack . \n For more information on how the firing voice is selected, see VoiceAttack . \n  See also \n  VoiceAttack VoicePrimaryWeaponAttack VoiceSecondaryWeaponAttack VoiceSecondaryEliteWeaponAttack VoiceIFVRepair"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSecondaryWeaponAttack",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when a rookie or veteran unit fires its secondary weapon. If this value is not set or it is invalid, VoiceAttack is used instead. Elite units use the sound entries defined by VoiceSecondaryEliteWeaponAttack . \n For more information on how the firing voice is selected, see VoiceAttack . \n  See also \n  VoiceAttack VoiceSecondaryEliteWeaponAttack VoicePrimaryWeaponAttack VoicePrimaryEliteWeaponAttack VoiceIFVRepair"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceSecondaryEliteWeaponAttack",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies any valid sound to play when an elite unit fires its secondary weapon. If this value is not set or it is invalid, VoiceAttack is used instead. Rookie and veteran units use the sound entries defined by VoiceSecondaryWeaponAttack . \n For more information on how the firing voice is selected, see VoiceAttack . \n  See also \n  VoiceAttack VoiceSecondaryWeaponAttack VoicePrimaryWeaponAttack VoicePrimaryEliteWeaponAttack VoiceIFVRepair"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceDeploy",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object acknowledges a command to deploy. Should be set to a valid entry from SOUNDMD.INI. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceUndeploy",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object acknowledges a command to undeploy. Should be set to a valid entry from SOUNDMD.INI. Appears not to work, although a VoiceDeploy= set will make this object acknowledge a command to undeploy. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EnterGrinderSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Default sound to play when a unit enters a BuildingType with Grinding=yes set. Can be any sound as defined in the SOUND.INI file. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeaveGrinderSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Default sound to play when a unit leaves a BuildingType with Grinding=yes set. Can be any sound as defined in the SOUND.INI file. NOTE: this may be completely obsolete as Grinding=yes on a structure results in any unit entering it being instantly destroyed. Some other tag or logic may use this statement. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EnterBioReactorSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Default sound to play when a unit enters a BuildingType with InfantryAbsorb=yes or UnitAbsorb=yes set. Can be any sound as defined in the SOUND.INI file. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeaveBioReactorSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Default sound to play when a unit leaves a BuildingType with InfantryAbsorb=yes or UnitAbsorb=yes set. Can be any sound as defined in the SOUND.INI file. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ActivateSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This flag defines the sound that will be played whenever VehicleTypes with PoweredUnit=yes are brought back online, either through power restoration, or rebuilding the relevant PowersUnit structure. On VehicleTypes \n  Flag: ActivateSound File(s): rules(md).ini Values: Strings : Normal text. Applicable to: VehicleTypes This flag performs the same function as the one above, except this flag is unit specific, so one unit can have a different ActivateSound than another one."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeactivateSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Sound to play when VehicleTypes with PoweredUnit=yes set are deactivated by the loss of power to, or destruction of, the BuildingType with the corresponding PowersUnit= statement. Can be any sound as defined in the SOUND.INI file. (Yuri's Revenge Only) \n  \n  This specifies the sound from SOUNDMD.INI to play when this VehicleType is deactivated if it has PoweredUnit=yes set and is co-ordinated with a BuildingType which has had power lost or has been destroyed. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MindClearedSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Sound to play for units that are released from mind control. Can be any sound as defined in the SOUND.INI file. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Explosion",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Defines which set of pre-determined explosion animations to use when a warhead of this type impacts. The values are explained below: \n  Value Description 0 No animation 1 A single bullet impact 2 Multiple bullet impacts 3 Fire, napalm 4 Armor-piercing rounds 5 High explosives 6 Nuclear explosion \n  On TechnoTypes \n  Flag: Explosion File(s): rules(md).ini Values: Comma-separated list of strings . (Limited to: Animations ) Applicable to: VehicleTypes , AircraftTypes , BuildingTypes Specifies the list of explosion animations to use when this object is destroyed. The game randomly displays one of them, or in the case of buildings , one on each cell that the building occupies. This does not work on InfantryTypes. In Powerups Flag: Explosion File(s): rules(md).ini Values: Comma-separated list of strings . Applicable to: Powerups Here, the flag is used to control the effect of an exploding bonus crate . It takes a comma-separated list of three parameters that determine the probability, animation, and damage dealt by the explosion, in that order. Red Alert 2 and Yuri's Revenge have a fourth parameter which controls whether this type of crate can spawn on water. See Powerups for more information."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DestroyAnim",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of animations than can be displayed when this BuildingType is destroyed. Causes problems when used on player owned objects as the animations do not remap (instead they tend to default to the colors defined by SovietLoad= and AlliedLoad= in the [Colors] section) and has been known to cause connection issues when used on LANs. This is probably because the game can't remap the animation to this objects color palette as it no longer exists when destroyed."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NaturalParticleSystem",
      "value_type": "ParticleSystem",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Determines the particle system that is displayed on this building as a \"natural\" effect, i.e. regardless of whether the building is damaged or not. The system is created as soon as the building is placed. For this to work, you should also specify a valid NaturalParticleLocation . \n Note that unlike DamageParticleSystems , this flag supports only one particle system entry, and is only applicable to buildings. \n  Bugs/Side-Effects/Unexpected Limitations \n  This system is unused in the vanilla game, likely owing to the various bugs/limitations inherent to it. These bugs include: \n  The particle system is spawned as soon as the building is placed The particle system is never deleted or hidden, even if the building is sold or destroyed. The only way for the system to expire is to specify a Lifetime for it. In Tiberian Sun , particles generated by this system freeze on their location when the building is cloaked, and will never resume or expire even if the building is decloaked. \n  See Also \n  NaturalParticleLocation DamageParticleSystems"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeParticleSystem",
      "value_type": "ParticleSystem",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the Particle System to be used as the effect for this BuildingType processing Ore. This should be included in the [ParticleSystems] list and be defined as all others. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NaturalParticleLocation",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the location on this building where the NaturalParticleSystem will be displayed. This is measured in leptons from the top corner of the building's foundation grid. The location is expressed in X,Y,Z format with increasing X values moving the point to the south-east, Y to the south-west, and Z to both north and a higher render layer. \n  Bugs/Side-Effects/Unexpected Limitations \n  The Z coordinate is read but unused. Depending on the location value and where you place the building, the particle system origin may end up detached from the building: \n  \n  See Also \n  NaturalParticleSystem DamageSmokeOffset"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamageParticleSystems",
      "value_type": "vector<ParticleSystem>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies a list of ParticleSystems to spawn randomly when this object is damaged. Only particle systems with BehavesLike=Smoke or BehavesLike=Spark are eligible to be selected. \n The spawned particle systems are attached to the owner object, and they are removed automatically when the owner is removed from the map. \n  BehavesLike=Smoke \n  A smoke particle system is created when a unit or structure is damaged and it enters yellow or red health (there has to be a change) and doesn't have a smoke particle system attached already. If the unit is below ground level, no particle system is created. \n The smoke particle system is removed when the object is repaired back into green health by either a service depot, a repair weapon or self-heal, or by upgrading or using click repair on buildings. Other logics might not remove the particle system and it will stay active until it expires. \n  BehavesLike=Spark \n  Particle systems are created with a probability of either ConditionYellowSparkingProbability or ConditionRedSparkingProbability , depending on the health of the unit. If there is a spark particle system attached to the unit already, or the unit is below ground level, no particle system is created. \n Spark particle systems are removed when they expire. \n  Bugs/Side-Effects/Unexpected Limitations \n InfantryTypes can only use spark-like particles, and only if the type has Cyborg=yes set and the type's section is present in the map file. You must also include DamageParticleSystems for those types in the map. If both the type section and the flag are not defined in the map file, damage sparks will be disabled. This is a hardcoded behavior and it is not possible to enable this setting manually. For example, if an infantry of the type [CYBORG] has DamageParticleSystems=SparkSys , you must insert this bit of code into any map file where you want the spark particles to appear: \n  [CYBORG]\nDamageParticleSystems=SparkSys \n  Yuri's Revenge and Deactivated Units \n  Units like the Robot Tank constantly spawn a spark particle system when deactivated. This cannot be controlled with this tag. It always is [CombatDamage] → DefaultSparkSystem= . \n  Myths \n  The behavior of this tag, especially the restriction on BehavesLike , is the same in Tiberian Sun , Firestorm , Red Alert 2 and Yuri's Revenge . \n  See Also \n  DamageSmokeOffset NaturalParticleSystem"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DestroyParticleSystems",
      "value_type": "vector<ParticleSystem>",
      "default_value": "{}",
      "adds_to_list": "+",
      "desc": "Specifies the ParticleSystem to be displayed when this object is destroyed. Does not appear to work although this has not been tested on all object types."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamageSmokeOffset",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, measured in leptons , for the smoke particle system that is spawned when an object is damaged. By default this point is the center of the unit, or in case of buildings, the top corner of its foundation. \n The offset is expressed in X,Y,Z format with increasing X values moving the point to the south-east, Y to the south-west, and Z to both north and a higher render layer. \n  Notes \n  The smoke particle system is created when the object's health falls below 50% or the ConditionRed threshold. Unlike particle systems with BehavesLike=Spark , the smoke is hardcoded to appear at this threshold and not at ConditionYellow . Only works on particle systems with BehavesLike=Smoke . \n  See Also \n  DamageParticleSystems HalfDamageSmokeLocation HalfDamageSmokeLocation1 HalfDamageSmokeLocation2 NaturalParticleLocation"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamSmkOffScrnRel",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Over-ride for DamageSmokeOffset= and dictates the offset, in pixels, that smoke is displayed on this object when it is damaged and the object itself is slightly off-screen (cannot be fully seen by a player). Expressed in X,Y,Z format with 0,0,0 representing the exact center of the object."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DestroySmokeOffset",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, that smoke is displayed over this object when it has been destroyed. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the object. Does not appear to work although this has not been tested on all object types."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeOffsetOne",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, of the first smoke that is produced by this BuildingType with Refinery=yes or ResourceDestination=yes set when it receives Ore. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the structure. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeOffsetTwo",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, of the second smoke that is produced by this BuildingType with Refinery=yes or ResourceDestination=yes set when it receives Ore. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the structure. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeOffsetThree",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, of the third smoke that is produced by this BuildingType with Refinery=yes or ResourceDestination=yes set when it receives Ore. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the structure. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeOffsetFour",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, of the fourth smoke that is produced by this BuildingType with Refinery=yes or ResourceDestination=yes set when it receives Ore. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the structure. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Nominal",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not this object's Name = is displayed when an enemy player leaves the cursor over it. By default, the game displays \"Enemy Soldier/Unit/Structure\" when mousing over an object that is controlled by an opponent."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DontScore",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "When set to 'yes' it acts as an over-ride so that this object is not considered as a 'kill' thus will not be considered when counting towards increasing the veterancy of the unit that destroyed it. This is a sub-set of the Insignificant= logic."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamageSelf",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and specifies whether or not this object is allowed to damage itself. By default, objects cannot damage themselves in normal circumstances so this tag over-rides that. It is only used on the Nuke Silo in Yuri's Revenge - in Red Alert 2 you can fire a Nuke at your own Nuke Silo and it may not even be damaged by the impact - this tag fixed that in Yuri's Revenge. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Cloakable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this object has a cloaking device which can render it invisible to enemy objects without Sensors=yes or SensorArray=yes . \n  Note: Setting this flag on AircraftTypes doesn't work, however granting them cloakability via VeteranAbilities or EliteAbilities does."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "GapGenerator",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType generates a 'gap' (shroud) around itself and any objects around it."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "GapRadiusInCells",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the radius, in cells a building with GapGenerator=yes uses for 'gap' (shroud-generating) effect. Values over 127 result in no shroud being generated at all."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SuperGapRadiusInCells",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the radius, in cells, of the 'gap' projected by this BuildingType when it is clicked on to be deployed. Note that for this to work, it should only be used on BuildingTypes that also have GapGenerator=yes set and an ExtraPower= value defined."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Teleporter",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag has two meanings. \n If Teleporter is set to yes on an InfantryType, then said InfantryType can be teleported by the Chronosphere without being killed. \n If Teleporter is set to yes on a VehicleType with the chrono Locomotor set, then said VehicleType will only teleport to dock to a building which has DockUnload=yes set. \n  See also \n  Organic=no"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Sensors",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Flag: Sensors File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: false Applicable to: VehicleTypes This flag determines whether or not a VehicleType can detect cloaked units within the Range of its Primary weapon. In Tiberian Sun and Red Alert 2 Flag: Sensors File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: false; true (for InfantryTypes) Applicable to: TechnoTypes : AircraftTypes , BuildingTypes , InfantryTypes and VehicleTypes This flag determines whether or not a TechnoType can fully uncloak (as opposed to simply revealing) cloaked units occupying an adjacent cell . Air units can not detect cloaked ground units - it is unknown whether air units can detect other cloaked air units Sensors works independently from SensorArray and SensorsSight . Bugs/Side-Effects/Unexpected Limitations TechnoTypes with Sensors=yes will uncloak any units and buildings that do not belong to the player's house , regardless if they're allied or not. This means you can accidentally reveal your ally's cloaked base and units to the enemy if your sensors get too close. \n  NewPP limit report\nCached time: 20231029154031\nCache expiry: 86400\nDynamic content: false\nCPU time usage: 0.080 seconds\nReal time usage: 0.161 seconds\nPreprocessor visited node count: 666/1000000\nPreprocessor generated node count: 2884/1000000\nPost‐expand include size: 7144/2097152 bytes\nTemplate argument size: 1467/2097152 bytes\nHighest expansion depth: 7/40\nExpensive parser function count: 5/100  Transclusion expansion time report (%,ms,calls,template)\n100.00%   41.303      1 -total\n 61.48%   25.392      2 Template:Flag\n 16.75%    6.920      4 Template:Categ\n 15.79%    6.523      1 Template:NeedsTesting\n 11.09%    4.582      1 Template:Bugs\n 10.56%    4.360      1 Template:BigHorizontalBar\n  9.58%    3.958      6 Template:F\n  7.67%    3.169      2 Template:Values\n  6.03%    2.489      2 Template:Anchor\n  6.02%    2.486      4 Template:Ini"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsGattling",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, specifies that this object uses a Gattling Weapon System , which consists of multiple weapon stages. \n Originally used on the Gattling Tank/Cannon."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WeaponStages",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the number of stages to the weapon on this object if it also has IsGattling=yes set. You should also specify the delay between each stage with the StageN= and EliteStageN= statements. \n This is limited to 6 stages maximum. Any more will cause errors."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RateUp",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "For objects which have IsGattling=yes set, this is used to determine how many increments the timer gets per frame, thus determines how quickly the rate of fire increases. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RateDown",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "For objects which have IsGattling=yes set, this is used to determine how many decrements the timer gets per frame, thus determines how quickly the rate of fire decreases. If this is set to '0', then it overrides the previous stage values, causing the weapon to instantly go to zero when it stops firing if it can't find a new target. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "StageX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag controls how long it will take for a unit to progress through this stage of a Gattling-logic weapon. When this number of frames has elapsed, the unit will proceed to the next stage in the weapon cycle. \n If this is the last stage, it is used to determine what the maximum firing timer can be. Once it hits this, it will stop increasing. \n  See also \n  EliteStageX IsGattling WeaponX RateUp RateDown"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteStageX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag controls how long it will take for a unit to progress through this stage of a Gattling-logic weapon when at Elite level. When this number of frames has elapsed, the unit will proceed to the next stage in the weapon cycle. \n If this is the last stage, it is used to determine what the maximum firing timer can be. Once it hits this, it will stop increasing. \n  See also \n  StageX IsGattling WeaponX RateUp RateDown"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PipScale",
      "value_type": "PipScale",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag is used to display a special type of graphical representation on certain units . This usually indicates a unit's current load of passengers, ammunition, or harvested ore. Each icon representing a portion of the load is referred to as a \"pip\". \n  Contents 1 Accepted values 1.1 Passengers 1.2 Ammo 1.3 Tiberium 1.4 Charge 1.5 MindControl 1.6 Power 2 See also \n  Accepted values \n  All values are case-insensitive. Any other values will simply be ignored and the default used instead. \n  Value Game Availability Remarks charge For use with IsMobileEMP none Default behavior—no pips are displayed passengers For use with Passengers ammo For use with Ammo tiberium For use with Storage power No effect—no pips are displayed mindcontrol For use with units having weapons whose warheads have MindControl=yes \n  Passengers \n  PipScale=Passengers is typically used for any vehicle with Passengers and SizeLimit each set to positive integers greater than or equal to the combined Size of its passengers, to show that there are units inside of it. The engine will always render a number of pips equal to Passengers . Infantry loaded inside of the unit are represented by the icon determined by Pip . Loaded vehicles are always represented by the sixth frame of pips2.shp . If a loaded unit's Size is greater than 1, it will take up that many pips, with each pip beyond the first drawn using the fourth frame of pips2.shp . The first frame is used to represent empty pips. \n In Yuri's Revenge this can also be used to indicate units loaded into a building with UnitAbsorb=yes , InfantryAbsorb=yes , or both. An absorbed vehicle is represented by the fifth frame of pips.shp , while the fourth frame is used for infantry. In this case, the first frame of pips.shp is used to represent empty pips. It should be noted that this is not the flag used to display occupancy pips; see MaxNumberOccupants for that. \n Passenger pips will override any declaration of ammo pips. \n  Ammo \n  This can be used to display the current number of rounds loaded on a unit with Ammo set to a positive integer greater than 0. This is typically used for aircraft , but it will display properly for any TechnoType . \n In Tiberian Sun , the seventh frame of pips2.shp is used to display the unit's current ammo supply. The engine will only draw up to five ammo pips individually. If the unit's total Ammo is over five, each pip represents 20 percent. Nothing will be drawn to represent empty pips. \n In Red Alert 2 , if PipWrap=0 (the default value), the 14th frame (15th frame in Yuri's Revenge ) of pips2.shp is used, and an individual pip will be drawn for each ammo point. Nothing will be drawn to represent empty pips. \n If PipWrap is set to an integer greater than 0, a more specialized method of displaying ammo pips is used. \n  Tiberium \n  PipScale=Tiberium is used to show the amount for harvested ore on vehicles with Harvester=yes or Weeder=yes , and Storage set to a positive integer greater than 0. Exactly five pips are rendered; each indicating 20 percent of Storage . The third frame of pips2.shp is used to represent stored ore in Red Alert 2 . In Tiberian Sun , the second frame of pips2.shp is used for green Tiberium and veins. For gems (or blue Tiberium in TS), the sixth frame of pips2.shp is used. The first frame of pips2.shp is always used to represent an empty pip. \n In Yuri's Revenge , this is also used to display the current Storage for infantry that can gather ore in an enslaved state. The pips are rendered in the same way as they are for vehicles, but only three are used instead; each indicating one third Storage . \n In Tiberian Sun , this is also used to display Tiberium storage for buildings such as refineries and silos. In this case, the second frame of pips.shp is used, while the first frame is used for empty pips. The engine will draw as many pips as it takes to span the selection box. \n  Charge \n  This should only be used in Firestorm for vehicles with IsMobileEMP=yes . Exactly eight pips will be drawn; each representing 12.5 percent of MaxCharge . The second frame of pips2.shp is used for complete portions of the full charge, while the first frame is used for the incomplete portions. \n  MindControl \n  This is only used in Yuri's Revenge to display the number of mind-controlled units for an infantry , vehicle , or building with a weapon whose warhead has MindControl=yes . PipScale=MindControl will display a number of pips equal to Damage set on the mind control weapon. The second frame of pips2.shp (or pips.shp for buildings) is used to represent each mind-controlled unit, while the first frame (of the respective .shp file) is used for empty pips. \n If the mind control weapon also has InfiniteMindControl=yes and the controlling unit controls more units than it has pips, an additional pip will be drawn to represent \"mind-control overload\". This pip will use the fifth frame of pips2.shp (or pips.shp for buildings), but will briefly switch to the fourth frame (of the respective .shp file) each time the controlling unit takes damage specified by OverloadDamage . \n  Power \n  Although this is value is parsed, it has no effect in either Tiberian Sun or Red Alert 2 . No pips will be displayed. \n  See also \n  PipsDrawForAll Passengers Ammo Storage"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PipsDrawForAll",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not to display pips for a building to all players, rather than just the player controlling that building and the players he is allied with. Although PipsDrawForAll is parsed for all TechnoTypes , it will only have any noticable effect on buildings. \n Which pips are displayed is determined by MaxNumberOccupants or PipScale . \n  See also \n  MaxNumberOccupants PipScale"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeptonMindControlOffset",
      "value_type": "boolean",
      "default_value": "70",
      "adds_to_list": "",
      "desc": "Determines how many leptons away from a unit the line should be drawn to indicate that it is 'mind controlling' something. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PixelSelectionBracketDelta",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the offset, in pixels, that this objects' health bar is drawn at when it is selected. Because the offset is in the upper left corner of a given frame of reference (as can also be seen in other tags, such as ActiveAnimX ), positive numbers draw the health bar further \"down\", while negative numbers draw it further \"above\" the unit. This can be used to adjust the positioning of the healthbar for units that are considerably smaller or larger than the average units for which the default healthbar positioning is intended."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PipWrap",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag controls pip graphics rendering using special logic for units with PipScale=ammo . \n If PipWrap is set to a positive integer greater than 0, that number of pips will be rendered. The most practical means of understanding which frame of pips2.shp is used for each pip at a given Ammo level is to simply see it in action. \n  Contents 1 Example 2 Recommended Configurations 3 Special values 4 See also \n  Example \n  The following table shows the relevant frames from pips2.shp in non-expanded Red Alert 2 . In Yuri's Revenge an additional frame used for occupancy pips was added in slot 12, so all frames pertaining to PipWrap are shifted one slot higher. Note that frame numbers start at 0 rather than 1, so frame 3 for example is actually the fourth frame. \n  Frame Number 14 15 16 17 18 Graphic \n  To get an impression of how this logic works, assume that a unit has these three lines of code in its Rules(md).ini entry: \n  Ammo=12\nPipScale=Ammo\nPipWrap=3 \n  The pips will then be rendered as follows, depending on the unit's current ammo level. \n  Current Ammo 12 11 10 9 8 7 6 5 4 3 2 1 0 Pips \n  It should then be fairly evident that the use of PipWrap allows each pip to represent more than just 0 or 1 points of ammo. Each pip represents n −14 ammo points, where n is equal to the frame of pips2.shp used to draw the pip. \n  Frame Number 14 15 16 17 18 n Graphic ? Ammo Points 0 1 2 3 4 n −14 \n  Recommended Configurations \n  The previous example is only one of the many possible ways to configure PipWrap . However, not all possibilities yield desirable results. A basic rule of thumb is that PipWrap should be a factor of Ammo . \n It is also important to note that should the quotient of Ammo divided by PipWrap be a number greater than 4, pips2.shp will need to be modified using a tool such as OS SHP Builder to include the necessary frames beyond frame 18. If the engine tries to draw a pip using a frame that doesn't exist—since the PipWrap scheme dictates that the pip should represent an amount of ammo points greater than 4—no graphic will be rendered for that pip. \n  Special values \n  If PipWrap=0 , this special pip drawing logic will not be used. This is also the default behavior. \n  See also \n  PipScale Ammo"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Prerequisite",
      "value_type": "vector<Prerequisite>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies a list of structures that must be owned by the house before this object can be built. Repeating the same BuildingType multiple times does not require you to own multiple instances of said building. \n  In addition to IDs of BuildingTypes , several keywords can be used - see The Prerequisite System for more info."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PrerequisiteOverride",
      "value_type": "vector<Prerequisite>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "PrerequisiteOverride stores a list of BuildingType prerequisites.\nIf any one of the entries in the list is owned (includes being garrisoned or mind-controlled) by a player then the player is allowed to begin building the unit that has the PrerequisiteOverride flag. \n For example: \n  [THEMPARK] Prerequisite=GAREFN,POWER PrerequisiteOverride=GATECH \n  A player can build the \"THEMPARK\" if they have satisfied one of the following conditions: \n  They own at least one Allied Ore Refinery and at least one building from the PrerequisitePower= group. They own at least one Allied Battle Lab. \n  The PrerequisiteOverride allows the player to build the \"THEMPARK\" without having to own an Ore Refinery or Power Plant, as long as they own a Battle Lab. \n It should be noted that unlike Prerequisite, PrerequisiteOverride CANNOT have a Prerequisite Group value. PrerequisiteOverride only accepts a list of actual BuildingTypes. \n You can easily grant extra units to sides that don't normally have them with this tag. Indeed even in the unmodded game, SEALs are granted by the Pentagon pieces, Yuri Clones by the Kremlin and Chronolegionnaires  by the Smithsonian. Since this is so easy though, tech trees can get mixed and players build units to which their country doesn't normally own. Just be warned; It can and has led to NCO bug issues. \n See also: Prerequisite , PrerequisiteGroups"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Sight",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the distance in cells that the unit can see into the shroud. It can be set to any positive integer, but setting it higher than 11 will have the same effect as setting it to 11. \n According to The Guide , Sight is also used for targeting and guard mode purposes. (NEEDS REVISION) \n  Rock Patch \n  As part of his studies surrounding Rock Patch, pd has confirmed the actual limit of Sight to be 11, not 10. Although originally expanded to 120, this limit got re-introduced in RP 1.04c to avoid major problems that it caused. It is possible that later versions of the patch may try again to eliminate it."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ReselectIfLimboed",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not control of this unit should be handed back to the player when it has completed an attack mission, if its weapon has LimboLaunch=yes set (e.g. Dogs). Setting this to 'no' results in the unit disappearing which can cause problems."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RejoinTeamIfLimboed",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not control this unit should rejoin a team (if it was in one) when it has completed an attack mission, if its weapon has LimboLaunch=yes set (e.g. Dogs). Setting this to 'no' results in the unit leaving the team."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SensorsSight",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines the radius in cells about a unit, within which enemy cloaked and subterranean units will be detected and revealed. \n When a unit is detected for a player, a radar event will trigger. If the unit is cloaked, it will become visible and targetable until it is no longer within the detection range. \n Despite the fact that this flag is parsed for all TechnoTypes , it has no effect on BuildingTypes (unless using Ares, see below). \n This flag functions independently from Sensors and SensorArray . It does not require nor is affected by their presence. \n  Bugs/Side-Effects/Unexpected Limitations \n  The logic associated with this flag suffers from an easily exploitable bug. When a unit with SensorsSight is destroyed, a permenantly viable sensor area is retained, centered around the point of that unit's destruction. \n \n  With Ares \n  This flag alone has no effect on BuildingTypes ; SensorArray=yes must be set on the building too. \n With ares, the bug about the permanent detection radio after the unit is destroyed gets fixed, starting on version 0.5 (according to Ares documentation)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DetectDisguiseRange",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Over-ride which specifies the range (in cells) away from this object at which it is able to automatically detect other objects which have CanDisguise=yes set. This is used as an over-ride as this distance defaults to the Range= of the units Primary= weapon. This should be used, therefore, on objects which have DetectDisguise=yes set but do not have a weapon."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BombSight",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If this unit has a weapon whose Warhead= has BombDisarm=yes set, this is used on the unit to determine the number of cells away from itself it will automatically scan for Ivan Bombs and attempt to defuse them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeadershipRating",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "When the AI picks a member of a TeamType to make a path finding or targeting decision it picks the one with the highest LeadershipRating= value. This defaults to '5' and also appears to be used by the game when determining which units voice sounds and attack cursor to use when more than one type of unit is selected or issued with a command by the player."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MindControlRingOffset",
      "value_type": "int",
      "default_value": "140",
      "adds_to_list": "",
      "desc": "Specifies the number of pixels above this unit that the animation(s) defined by the ControlledAnimationType= and PermaControlledAnimationType= statements should appear when it is 'mind controlled'. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BuildTimeMultiplier",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "BuildTimeMultiplier is a multiplier to the time it takes for an object to be built. In unmodified Yuri's Revenge , it is used primarily to make cheap tanks take longer to build, in order to make early tank rushes difficult or to generally balance out the game. It does, however, also work the other way around, and can speed up the build time of expensive units."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RevealToAll",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType will generate a radar event and reveal the shroud around itself when it is built or captured. Specific structures also have EVA announcements attached to them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Drainable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used to specify whether or not this BuildingType can be 'drained' of its PipScale= (Power= or Storage= only) by a weapon with DrainWeapon=yes set. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OpenTopped",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If the object has both this flag and the capability to carry passengers , the passengers will be able to fire out while being inside. \n If units that enter the OpenTopped vehicle have a lower Range value on their weapon than the actual OpenTopped vehicle itself has, the Opentopped weapon will no longer respect it's own Range value and will instead fire with the Range of the occupying passenger's weapons. \n Having units with a high weapon Range and low GuardRange can prevent this issue and simulate low Range weapon capabilities"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ResourceGatherer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used for the AI to handle the Slave Miner, as it has to understand what collects and stores Ore. This was neccesitated to get the game to handle 2 totally different classes of resource gathering objects. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ResourceDestination",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used for the AI to handle the Slave Miner, as it has to understand what processes Ore to make Credits. This was necessitated to get the game to handle 2 totally different classes of resource gathering objects. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanDisguise",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this unit can disguise as other units in a similar manner to the spy and Mirage Tank."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PermaDisguise",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object with CanDisguise=yes set disguises permanently as opposed to when it is not moving. This also tells the object to use the unit palette, as opposed to the terrain palette, when displaying its disguise, as it is assumed to tell the game that the object is the Spy, which disguises as another unit. Without this tag, the game assumes the object to be the Mirage Tank, which disguises as a terrain object and hence should use the terrain palette when displaying its disguise,"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DetectDisguise",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object can automatically detect other objects which have CanDisguise=yes set."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DisguiseWhenStill",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanPassiveAquire",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether or not this object may acquire targets (within range) and attack them automatically, without being ordered to do so. CanPassiveAquire=no does not prevent the object from retaliating automatically, however. \n Note Westwood's misspelling of \"Acquire\". \n  See Also \n  CanRetaliate"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanRetaliate",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies if this object may retaliate when hit by enemy fire. Retaliation is only possible if none of the following conditions are met: \n  Friendly fire. The victim... Is being attacked by a warhead with Temporal=yes . Was hit by an EMPulseWarhead and is currently paralyzed. Was destroyed by the attack. Is currently following an order. That includes non-patrol waypoints. The aggressor... Is a special weapon such as a superweapon or a spawned projectile (V3 or Dreadnought missile). Does less than 1 point of damage to the victim. Is shielded by an Iron Curtain. Is an illegal target for the victim: Immune=yes , LegalTarget=no , is flying but the victim has no weapons with AA=yes , is a surface target but the victim's LandTargeting / NavalTargeting disallow an attack or has an armor type against which the victim's warheads have Verses=0% . Has Cloak=yes , Cloakable=yes or is in range of a CloakGenerator . Is already destroyed. The aggressor is out of range for the victim while the victim is player-controlled and has PlayerReturnFire=no . \n  If the aggressor comes into the defender's weapons range with a ThreatPosed of non-zero value and the defender has CanPassiveAquire=yes , the value of CanRetaliate is irrelevant as the defender will initiate combat regardless of who hurt. \n If the defender is a player-owned unit and PlayerReturnFire=yes , the defender will retaliate against attacks from outside weapons range by autonomously closing into range first (this is the default behavior for the AI's units). In this case, the defender behaves as if it received a force fire order on the aggressor and thus won't stop retaliating until further retaliation is impossible as per the conditions listed above, even if it means chasing the aggressor across the map. \n  See Also \n  CanPassiveAquire"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanApproachTarget",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this TechnoType can continually move towards its intended target to fire any of its weapons with the intention of gaining more accuracy. Defaults to 'yes' on all units. It is set to 'no' on Mirage Tanks to prevent them from moving towards targets in guard mode, as it would make their tree disguise useless otherwise. \n  Note : Setting CanApproachTarget=no on AA units is a method to prevent them from chasing down air units, and they will instead only follow if attacked by them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanRecalcApproachTarget",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Special case which applies to VehicleTypes which have CanApproachTarget=yes set. Can be set to 'yes' or 'no' and determines whether or not the unit can recalculate what its next target will be when conducting its threat scan. This prevents it chasing its last target in an attempt to remain in an attack mission. Is used as an over-ride as all units default to 'yes'. Only used on the Mirage Tanks to prevent it appearing as though a 'tree' is following the enemy it last fired at."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RequiresStolenThirdTech",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object can only be constructed if an InfantryType with Agent=yes set and owned by a house detailed in the Owner= statement has infiltrated a Yuri Battle Lab. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RequiresStolenSovietTech",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object can only be constructed if an InfantryType with Agent=yes set and owned by a house detailed in the Owner= statement has infiltrated a Soviet Battle Lab."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RequiresStolenAlliedTech",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object can only be constructed if an InfantryType with Agent=yes set and owned by a house detailed in the Owner= statement has infiltrated an Allied Battle Lab."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RequiredHouses",
      "value_type": "House[32]",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Lists the specific houses which have exclusive rights to build this object. The object cannot be built even if other houses capture the appropriate Prerequisite= and acquire the relevant TechLevel= required to construct it. \n Editor's note: \"unsetting\" this tag by overriding it using RequiredHouses=<none> or just leaving the RequiredHouses= list empty under the unit's section in a map (or in an INI loaded with Ares' #include) will not work.\nIn such a case all Countries must be listed under RequiredHouses= (or better in Ares' #include case, have the flag removed from base rules entirely) before every Country is eligible to build this TechnoType. \n This is not quite valid for ForbiddenHouses , however. <none> will do the trick there and unset the base rules' list, but an empty list will not do anything."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SecretHouses",
      "value_type": "House[32]",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Has no effect  in-game, despite the fact that the flag is parsed and Yuri Clone has this flag set as SecretHouses=YuriCountry in unmodded Yuri's Revenge . \n It is theorised that this flag was intended to restrict access to certain units obtained via a Tech Secret Lab to specific countries, but that the idea of restricting access to such units was eventually abandoned (possibly for reasons of development time rather than gameplay)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ForbiddenHouses",
      "value_type": "House[32]",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Determines which houses (countries) are not allowed to produce this object even when they meet its Prerequisite= and TechLevel= requirements. Is useful for preventing some technology being used by certain sides. \n  \n  Editor's note: \"unsetting\" this tag works using ForbiddenHouses=<none> . An empty list in a map (or in an INI loaded with Ares' #include) will do nothing.\nThis is unlike RequiredHouses which can't be unset at all and must either be erased from base rules or re-defined in a map (or in an INI loaded with Ares' #include).\nIn a map or INI loaded with Ares' #include: \n  [GAAIRC]\nForbiddenHouses=<none> ;;leaving out the '<none>' doesn't work.\n[ORCA]\nForbiddenHouses=<none> ;;leaving out the '<none>' doesn't work. \n This will allow the Country Americans to build the regular Air Force Command HQ GAAIRC alongside their own ACHQ with the Airborne SuperWeapon  AMRADR , and the Country Alliance to build the regular Harrier ORCA alongside their Black Eagle BEAG ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TechLevel",
      "value_type": "int",
      "default_value": "255",
      "adds_to_list": "",
      "desc": "Contents 1 On BuildingTypes 2 On Infantry/Vehicle/Aircraft Types 3 In [ MultiplayerDialogSettings ] 4 On Houses 5 Limitations of this system 6 Additional note \n  On BuildingTypes \n  By constructing the building, the house's \"technology level\" is increased to this value, if necessary. \n  On Infantry/Vehicle/Aircraft Types \n  This flag specifies the \"technology level\" necessary to build this object. \n  In [ MultiplayerDialogSettings ] \n  This flag specifies the maximum TechLevel achievable in the game. In previous games, you could control this by means of another slider, like the one used for Starting Money or Game Speed. The effect of this limit is that only TechLevel values in the interval 0 - this value (inclusive) are considered \"allowed\", and all others are disabled. \n  On Houses \n  This flag specifies the starting tech level for this AI-controlled house. \n  Limitations of this system \n  TechLevel limitations TechLevel Can be Built by AI Built by Humans A Crate goodie A Secret Lab boon -1 0 through the maximum (set in MultiplayerDialogSettings) above the maximum \n  TechLevel -2 and below are considered as buildable at any TechLevel. \n And AI doesn't build Techlevel -1 units even if given in TaskForces. Buildings case is covered in the table above. \n  Additional note \n The hack that Westwood used to make battle bunkers in YR stay owned when empty and not evict infantry when damaged is tied to Techlevel= ; if the techlevel is -1, the building will be treated as a normal civilian building. If the techlevel is anything besides -1, it will be treated with battle bunker logic"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AirstrikeTeam",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag is used as part of the Boris Airstrike Logic. It controls the number of AircraftTypes called in by a weapon whose warhead has Airstrike=yes . The AircraftTypes themselves are defined using the AirstrikeTeamType=link flag. \n  See also \n  EliteAirstrikeTeam AirstrikeTeamType EliteAirstrikeTeamType AirstrikeRechargeTime EliteAirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteAirstrikeTeam",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag is used as part of the Boris Airstrike Logic. It controls the number of AircraftTypes called in at Elite level by a weapon whose warhead has Airstrike=yes . The AircraftTypes themselves are defined using the EliteAirstrikeTeamType flag. \n  See also \n  AirstrikeTeam AirstrikeTeamType EliteAirstrikeTeamType AirstrikeRechargeTime EliteAirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AirstrikeTeamType",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag governs the AircraftTypes called in by a weapon whose warhead has Airstrike=yes . It will call in the number of AircraftTypes defined by AirstrikeTeam every period of time defined by AirstrikeRechargeTime . \n  See also \n  AirstrikeTeam EliteAirstrikeTeam EliteAirstrikeTeamType AirstrikeRechargeTime EliteAirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteAirstrikeTeamType",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag governs the AircraftTypes called in by a weapon whose warhead has Airstrike=yes , and whose parent unit is at Elite level. It will call in the number of AircraftTypes defined by EliteAirstrikeTeam every period of time defined by EliteAirstrikeRechargeTime . \n  See also \n  AirstrikeTeam EliteAirstrikeTeam AirstrikeTeamType AirstrikeRechargeTime EliteAirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AirstrikeRechargeTime",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag controls how many frames the game should wait before spawning another instance of the AirstrikeTeamType to attack the designated target. The AirstrikeTeamType will always spawn at the edge of the map. \n  See Also \n  AirstrikeTeam EliteAirstrikeTeam AirstrikeTeamType EliteAirstrikeTeamType EliteAirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteAirstrikeRechargeTime",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag controls how many frames the game should wait before spawning another instance of the EliteAirstrikeTeamType to attack the designated target. The EliteAirstrikeTeamType will always spawn at the edge of the map. \n  See Also \n  AirstrikeTeam EliteAirstrikeTeam AirstrikeTeamType EliteAirstrikeTeamType AirstrikeRechargeTime Airstrike"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Speed",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Contents 1 On ObjectTypes 2 On WeaponTypes 3 On JumpJet Controls 4 In Powerups \n  On ObjectTypes \n  Specifies the movement speed of this ObjectType. \n  On WeaponTypes \n  Specifies the speed the weapon's projectile will have when fired. This only works on projectiles with a ROT larger than 0. The value will also be ignored if the weapon is used as an AirburstWeapon . \n  On JumpJet Controls \n  Specifies the speed of units flying using the Jumpjet locomotor in Tiberian Sun . \n In Red Alert 2 and Yuri's Revenge individual units have to define JumpjetSpeed instead. \n  In Powerups \n  Flag: Speed File(s): Rules(md).ini Values: Values that don't conform to any typical format (see article) Default: none Applicable to: Powerups See [ Powerups ]."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Cost",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This is the primary usage of Cost; for other meanings, see Cost (Multiplier) . \n  Sets the base amount of credits needed to purchase this object, before any multipliers are applied (such as Country bonuses or the Industrial Plant ).\nThe final cost (after any multipliers have been applied) is the amount of credits that will be deducted from the constructing player during the course of construction (when the unit is, say, 10% constructed, 10% of the final cost will have been deducted from the player. When the unit is 50% constructed, 50% of the final cost will have been deducted, and so on). \n Cost is sometimes used when calculating the refund amount a player gets when selling or grinding a unit or building, depending on the circumstances (see Soylent for details). \n Cost also determines, in part, the amount of time the object will take to construct. [ General ]→ BuildSpeed determines the time, in minutes, to construct 1000 credits' worth of an object, so an object with Cost=2000 will take ( 2 * BuildSpeed ) minutes to construct.\nAny multipliers to cost have no effect on construction time - construction time is always determined by the base Cost of an object. \n Cost also determines, in part, the order objects' build icons will appear on the sidebar - if there are two or more objects of the same TechLevel , the cheaper one(s) will appear earlier in the list. \n It is possible to set Cost to a negative value so that the player will actually receive credits during the object's construction. However, setting negative Cost values on multiplayer start units causes you to start with a very high number of units, because the number of starting units is based, in part, on their Cost value, and negative Cost values are converted to zero for this calculation. \n A BuildingType that has a FreeUnit with a higher Cost than the BuildingType 's own Cost will actually cost the same as the FreeUnit in-game, however the base cost is unchanged as far as other values, such as Soylent and build time, are concerned. \n  See Also \n  FactoryPlant"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Soylent",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag sets the refund value for the unit when it is sold at a Service Depot (not in Yuri's Revenge , unless a mod has included the Sell Unit super weapon ) or sent to a Grinder ( Yuri's Revenge only), or the building when it is sold using the Sell button from the sidebar. \n  Contents 1 Default 2 Bugs/Side-Effects/Unexpected Limitations 2.1 When Soylent is specified 2.2 When Soylent is not specified 3 Trivia \n  Default \n  Soylent doesn't have a default value as such (internally it is zero) but it is often said to be \"half the cost\". A unit's refund amount is actually calculated as follows: \n  If Soylent is non-zero then Soylent is used as the refund amount. If Soylent is zero (i.e. not set) then the refund amount is taken to be: the unit's Cost * (applicable country-specific cost multiplier for that unit type) * (applicable Industrial Plant multipliers for that unit type) 1 . In the case of human players only (another example of the AI 'cheating'), this refund amount is then further multiplied by [ General ]→ RefundPercent=50% \n  Relevant pseudocode is available at http://dc.strategy-x.com/src2/TechnoTypeClass/GetRefund.cpp . \n  1 ↑ Note that since this multiplier is used at refund time, it will result in the same value as if you were purchasing that unit right now, not the value that was actually paid for the unit at its construction time, which results in another potential exploit . \n  Bugs/Side-Effects/Unexpected Limitations \n  When Soylent is specified \n  As indicated above, any unit that has a non-zero Soylent will use that value as its refund amount and ignore the normal refund logic. This means that any unit that has been discounted due to country-specific multipliers or Industrial Plants will not reimburse the player by the correct amount when sold or sent to a Grinder . In the unmodded game this is noticeable when grinding VehicleTypes . The game's designers decided that VehicleTypes should have 100% refund rather than the default 50%, and the developers implemented this by simply setting all VehicleTypes ' Soylent to match the Cost (rather than appropriately modifying the refund logic). \n The result of this is that, when a player owns both a Grinder and an Industrial Plant , the player can generate free money by immediately grinding any VehicleType they build. One generally accepted work-around to this problem is to set the Soylent for all units to match the multiplier(s) offered by the Industrial Plant and not to include any country-specific multipliers (this does decrease the amount of income Yuri players get from grinding enemy units, although some actually see this as an improvement to balance). \n  When Soylent is not specified \n  In this case , a potential exploit stems from the fact that the Industrial Plant bonus is applied at refund time - if you build units while you have a Grinder as well as Industrial Plant(s) , and then lose the Industrial Plant bonuses, you will be refunded half of the full cost by the Grinder, instead of half of the cost you purchased it for. Example: A unit usually costs 1000 credits. You have an Industrial Plant, and get the unit for 800 instead. Without Soylent on the unit, you should now get 400 credits back if you grind the unit. But if you lose your Industrial Plant, the Grinder will instead refund you half of the normal price of the unit - which is 1000/2 = 500 credits. 100 more than you were entitled to. \n  Trivia \n  The name of the flag (\"Soylent\") is a reference to the 1973 film Soylent Green ( IMDB / Wikipedia ) starring Charlton Heston. \n Another reference to this can be found in-game during the Yuri's Revenge Allied mission 'Hollywood In Vain'. The captured civilians can be heard saying \"Soylent green for Yuri\" as they march to the Grinders."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnloadingClass",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the vehicle that this unit should turn into when performing a special function. The unit doesn't actually turn into another vehicle, though, and usually only the Image value is read. The default value 'none' means that the original unit's image will be used. \n  Notes \n Although this tag is parsed for all TechnoTypes , the logic works only for VehicleTypes that make use of Dock and IsSimpleDeployer ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployingAnim",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the animation to use when this object deploys into another. \n  In Art(md).ini \n  Flag: DeployingAnim File(s): Art(md).ini Values: Strings : Normal text. (Limited to: Shape filename without the .shp file extension) Default: none Applicable to: BuildingTypes When this building produces a unit (any non- jumpjet vehicle in in RA2 and YR ), this flag specifies the building shape that is rendered above the unit as it leaves through the building's front door. Typically, this represents all of the building's 'static' art that should appear above the unit, like the roof and the west/south side walls, while the door and any parts that should be rendered under the unit are transparent. Applies only to factory buildings with WeaponsFactory enabled. Automatic List Inclusion Objects used as values for this flag are automatically listed under the appropriate internal array. However no harm can be done by listing them manually. See Also DoorAnim UnderDoorAnim – Building shape rendered under the produced unit RoofDeployingAnim – Building shape rendered above a jumpjet unit as it leaves through the top door (RA2 and YR only) UnderRoofDoorAnim – Building shape rendered below a jumpjet unit as it leaves through the top door (RA2 and YR only) BibShape – Building shape that is always rendered below units"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "InitialAmmo",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "This flag determines the ammunition supply of a unit , with Ammo set to a positive integer greater than 0, when it is created from the corresponding Factory . Values for InitialAmmo other than −1, which is a special case ↓ , result in a starting ammo supply of that number plus 1. \n Although usable ammo points are only measured in positive integers, it is possible to have a unit's current ammo be a negative number when it is created. If InitialAmmo is set to a negative integer less than −1, the unit will be created with no usable ammunition, and have an inversely proportional delay before it reloads enough to have a positive ammo supply. \n If InitialAmmo is set to a value greater than Ammo , then the unit will be created with its current ammo equal to InitialAmmo . However, if the unit has PipScale=ammo , the pip display will innacurately represent an amount equal to Ammo until the unit depletes enough rounds so that its current ammo is no more than Ammo . \n Regardless, a unit can never reload its ammo by any means to an amount greater than Ammo , nor deplete its ammo to an amount less than 0. \n  Special values \n  InitialAmmo=-1 results in the unit starting with full ammo. This is also the default behavior. \n  Bugs/Side-Effects/Unexpected Limitations \n  If an AircraftType starts without full ammo, it will be unable to reload it until it leaves its docking building and lands on it again. \n  See also \n  Ammo Reload EmptyReload ReloadIncrement DamageReducesReadiness ReadinessReductionMultiplier"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Ammo",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "This flag essentially controls exactly what it is named after: The \"number of rounds carried between reloads\", i.e. how many shots the object has before it needs to be/gets reloaded. \n  Contents 1 Special Values 2 Standard Usage 3 The System in Detail 3.1 Example 4 Ammo on Aircraft 5 Ammo on Vehicles 5.1 In Tiberian Sun 5.2 In Red Alert 2 and Yuri's Revenge 6 Ammo on Infantry 7 Ammo on Buildings 7.1 In Red Alert and Tiberian Sun 7.2 In Red Alert 2 and Yuri's Revenge 7.3 Ammo on Tech Buildings 8 Fixes in Ares 9 See also \n  Special Values \n  The only special value is -1, which means \"unlimited ammo\". This is also the default value for the flag. \n  Standard Usage \n  The ammo-system in RA2 and YR is mainly used for aircraft, and has therefore been re-coded to best fit this purpose; on one hand, this means that using ammo on non- AircraftTypes is often buggy, in the sense that not all flags work or have the desired effect. This also means AircraftTypes require a declaration of Ammo= to work properly, and this number must be either -1 (for unlimited ammunition) or an integer greater than 0. \n In addition, Ammo can be used to limit the number of times a Tech Building can deliver it's effect, meaning that a structure with Armory=yes and Ammo=20 could only promote infantry 20 times before becoming useless. This only applies to structures with Armory=yes and/or Hospital=yes . \n  The System in Detail \n  The ammo and reloading system is controlled by several INI flags: \n  Ammo , which controls the maximum amount of rounds a unit can carry. InitialAmmo , which controls with how much ammo the unit will contain upon construction or spawning. Reload , which controls the time delay between reloading a certain amount of ammo; is no other specification given, it simply reloads to full ammo straight away. ReloadIncrement can be used to speed up (or slow down) the rate at which a unit will reload with each successive PipWrap set. EmptyReload , which controls the time delay before the first reload occurs when the unit is out of ammo. ManualReload , which controls whether this unit cannot reload itself, but has to dock with a building; this is not set on aircraft because, unlike other TechnoTypes, it defaults to \"yes\" for them. \n  Other Ammo -related flags on objects are. \n  DamageReducesReadiness , which tells the game to reduce the amount of available ammo if the unit gets damaged PipScale , which in the form of PipScale=Ammo tells the game to show the amount of ammo a unit currently contains. \n  And also important are: \n  UnitReload , which gives buildings the ability to reload units with ManualReload=yes ReloadRate , which is the flag in the general section controlling the number of minutes needed to restore one round of ammo on units docked to a building that reloads them. \n  Example \n  If a unit was set to \n  Ammo=10\nPipScale=Ammo\nReloadIncrement=30%\nReload=450\nEmptyReload=150\nInitialAmmo=1 \n  it would start out with 1 round of ammo when it comes from it's factory. If it shot itself empty, it would take about 10 seconds (on medium game speed) until reloading started. It would then be reloaded by 3 rounds of ammo every 30 seconds, up until it's maximum amount of 10 rounds. This is all visible to the player, because the PipScale is drawn. Note that, in some cases, the unit does not necessarily need to be empty in order to reload itself. \n  Ammo on Aircraft \n  Ammo and reloading on AircraftTypes works as seen in the game, using the manual system. Automatic reloading on aircraft does not appear to work. \n  Ammo on Vehicles \n  In Tiberian Sun \n  Ammo does not work on VehicleTypes. \n  In Red Alert 2 and Yuri's Revenge \n  Ammo and auto-reloading on VehicleTypes works perfectly, but manual reloading does not work without AI issues.. \n  Ammo on Infantry \n  Ammo on Infantry does not work quite to design. You can give Infantry ammo, but they will not auto-reload until they are damaged. If your soldier runs out of ammo, they will have to be attacked by something in order to kick-start the reloading mechanism. However, no matter what other flags you set, it will just restore the infantry to full ammo. \n A partial solution to this problem is to use a \"reloader\" unit. I.e. a unit with a weapon that only inflicts one point of damage, uses the FireOnce , AttackCursorOnFriendlies and CloseRange tags in conjunction with a very low Range value. The resulting effect is then that the unit moves up close to your unit, and then the \"attacked\" unit will reload as they take the negligible amount of damage from the reloader's \"weapon\". \n Also note that an infantry can only be reloaded when all of its ammo has been depleted, regardless of how much damage it takes. The reload mechanism will only fire once all of the unit's ammunition has been depleted. \n  Ammo on Buildings \n  In Red Alert and Tiberian Sun \n  Buildings with a weapon and Ammo fire all shots immediately, ignoring ROF between shots. Once all ammo has been expended, the building will fully reload instantly, however the building will wait for the duration of the weapon's ROF before firing again. Reload , if specified, is ignored. \n  In Red Alert 2 and Yuri's Revenge \n  Ammo on buildings is rather useless. While it does work, and even reloads, it simply reloads to full ammo as soon as it is out of rounds, meaning that it makes no difference if ammo is defined or not. Your structure won't even stop shooting while reloading. In addition, if a building with ammo is used to force-fire somewhere, the ROF will be ignored, turning the structure's armament into a rapidly firing weapon. \n  Ammo on Tech Buildings \n  Tech Buildings are a special case for ammunition on structures. More specifically, this involves Tech Buildings that have the tag Armory=yes or Hospital=yes . The Ammo tag will then have a different function if one of these tags are present. In this instance, the Ammo tag will control the amount of uses the Tech Building has. \n For example, you have a Tech Building with Armory=yes and Ammo=25 . The structure will be able to promote infantry 25 times, and then can no longer promote any more infantry. \n The EXE file contains a check for when a structure's ammo is depleted. Firstly, the game looks to see if the building has Armory=yes or Hospital=yes , if not its ammo is then simply reset to full. \n If you were to give a base defense structre a weapon along with either Armory=yes or Hospital=yes , the structure will empty its clip and not do anything again. \n Also note that Ammo is shared with between the structure's weapon, and any applicable Tech Building function. For example, if you have Ammo=5 on a structure with Armory=yes and a Primary weapon, you could perform 5 infantry promotions, or fire 5 rounds, or any combination of the two that totals up to 5. \n  Fixes in Ares \n  Version 0.1 of Ares fixes the Ammo logic for InfantryTypes and BuildingTypes; on the latter, Ammo is only reloaded if neither Armory nor Hospital=yes . No change was made on VehicleTypes and AircraftTypes (latter are still hardcoded to require manual reloading). \n  See also \n  Thread on DeeZire.net regarding Infantry and Ammo"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IFVMode",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies which 'mode' is engaged (and thus which weapon is used) when this InfantryType enters a with Gunner=yes set. Note that the IFVMode is floored at zero, while the WeaponX is floored at one, meaning that IFV Mode=0 (the default mode of the IFV when empty, as well as the default for this flag) actually calls for Weapon1 , IFV Mode=1 calls for Weapon2 , etc. \n There is no (reasonable) upwards limit on IFV modes that can be created on the IFV, however, the number of weapons modes that will also cause the IFV to swap turrets is limited by the 'swapping factors' (See YTurretWeapon and YTurretIndex ), which are hard-coded into the game and number 13 in Red Alert 2 and 17 in Yuri's Revenge ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AirRangeBonus",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag defines the additional range added to all of TechnoType 's weapons when it is targeting objects in air. In order to do this, the weapon's projectile must have AA=yes set. \n  Notes \n When a unit gets ordered to attack an airborne target, it will strive to move into the Range value of its anti-air weapon, and stay there while attacking. Adding AirRangeBonus doesn't affect this behavior, but as it increases the weapon's effective firing range, it actually makes slow moving anti-air units more effective against targets that are able to escape from them (especially if they have OpportunityFire=yes ), since they will automatically move in to cover a larger area."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RadialFireSegments",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If this unit has a radial firing pattern (determined by the presence of the DistributedFire=yes statement), then this determines the number of 'segments' in which it will fire. This starts at the units left and goes right over 180 degrees."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployFireWeapon",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "On an object that has the ability to deploy through DeployFire , this specifies which weapon this object uses when it is deployed. Only '0' (meaning Primary and ElitePrimary ) and '1' ( Secondary and EliteSecondary ) are valid. \n  Bugs/Side-Effects/Unexpected Limitations \n  VehicleTypes which have DeployFire and IsGattling will always use their Weapon1 when deployed. \n [DESO] and all infantry deployments with IsDesolator=yes can only release secondary weapons and do not follow the DeployFireWeapon setting \n  See also \n  Deployer \n DeployFire \n UndeployDelay \n IsGattling \n Gattling Weapon System \n DESO \n  Immune G.I. Bug"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this unit can be given the 'deploy' order, which will cause it to fire the weapon determined by DeployFireWeapon at the ground underneath itself. \n  Notes \n  For infantry units, the ART(MD).INI sequence should also specify which frames of its image sequence are to be used when it is deployed. If this is omitted, the unit will be unable to deploy if ordered to. \n  See also \n  IsSimpleDeployer"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployToLand",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether this VehicleType (usually a helicopter, Hover or Fly locomotor) requires an explicit order to land, which can be given by deploying it. \n If set to no (default), the unit will land as soon as it stops movement. \n Hovering units will play their HVA animation with a rate of 1 (advancing to the next frame every frame)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MobileFire",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether the unit should be allowed to fire while moving. It also allows it to reload its ammo while on the move. \n  Bugs/Side-Effects/Unexpected Limitations \n Negative value doesn't work correctly: a moving unit instructed to fire will happily fire while moving, but its weapon ROF will be reset to \"ready to fire\" status whenever it stops. Such a unit seems to ignore the CanPassiveAquire=yes setting while moving, however."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OpportunityFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether this unit can fire whilst performing other actions (e.g. moving). For this to work, the unit needs to have the ability to aim or shoot at the target without turning itself, which can be achieved by, among other things: \n  giving it a Turret , equipping a weapon with a Homing Projectile, or giving it a weapon with OmniFire ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DistributedFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this unit will continually retarget nearby enemy units and fire at all of them equally as opposed to locking fire on one target and continually firing at that one target until it is destroyed at which point it moves on to the next (which is the default behaviour, so this tag forms an over-ride to that rule). \n Editor's note: what this actually does is make a unit fire its weapon once, re-aim or re-target (which takes roughly a second or two real-time), fire once, re-aim, repeat. The unit will fire normally though if a target is set manually by the player (and maybe TeamType scripts). \n See the Aegis Cruiser."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Reload",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the base delay in frames between automatic 1 reloading of each round of ammunition for units with Ammo set to a positive integer . \n  Contents 1 In Tiberian Sun 2 In Red Alert 2 and Yuri's Revenge 3 See also 4 Notes \n  In Tiberian Sun \n  Logic related to Reload , as a whole or in part, is obsolete in Tiberian Sun . \n  Though Reload appears in rules.ini , it does not exist in the game executable, therefore the flag is never parsed. Instead, the game has a hardcoded reload rate of 450 frames . \n  In Red Alert 2 and Yuri's Revenge \n  By setting EmptyReload to an integer other than Reload or −1, this delay can be modified for reloading the first round of ammunition when the unit is empty. \n On units that have PipWrap set to a positive integer greater than 0, ReloadIncrement can be used to speed up or slow down the rate at which they reload. \n  See also \n  Ammo InitialAmmo EmptyReload ReloadIncrement DamageReducesReadiness ReadinessReductionMultiplier ReloadRate \n  Notes \n  1 ↑ As opposed to manually; see ManualReload ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EmptyReload",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "This flag specifies the time in frames that will elapse for a unit to reload the first round of Ammo when it is empty. \n  Special values \n  By setting this flag to −1, which is the default value, the EmptyReload logic will be ignored and the first round will take Reload frames to load. \n  See also \n  Ammo InitialAmmo Reload ReloadIncrement PipWrap"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ReloadIncrement",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "On units that have PipWrap=0 , this flag will simply add this value to the number of frames those units take to automatically 1 Reload each round of Ammo . \n If PipWrap is set to a positive integer greater than 0, ReloadIncrement can be used to speed up (or slow down if a negative value is used) the rate at which a unit will reload with each successive PipWrap tier. The exact reloading time can be calculated using the following formula 2 : \n  \"total reload frames\" = Reload + ( ReloadIncrement * ( \"current ammo\" / PipWrap )^2 ) \n  See also \n  Ammo InitialAmmo Reload EmptyReload DamageReducesReadiness ReadinessReductionMultiplier PipScale PipWrap \n  References \n  Relevant pseudocode is available at http://dc.strategy-x.com/src2/TechnoClass/Ammo.cpp . \n  Notes \n  1 ↑ As opposed to manually; see ManualReload . \n  2 ↑ The division of \"unit's current ammo\" into PipWrap is integer division, which means that any decimal places will be knocked off; i.e. 5/2 = 2, not 2.5."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DamageReducesReadiness",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag must be set to yes on a unit which has ReadinessReductionMultiplier set to a floating point value greater than 0, in order to have its ammunition supply reduced when taking damage. This is only applicable to units that have Ammo set to an integer other than -1 (unlimited ammo). \n The amount of ammo that is removed when the unit takes damage is determined by ReadinessReductionMultiplier . \n  Resources \n  Relevant pseudocode is available at http://dc.strategy-x.com/src2/TechnoClass/Ammo.cpp . \n  See also \n  Ammo InitialAmmo Reload EmptyReload ReloadIncrement"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ReadinessReductionMultiplier",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag is used in conjunction with DamageReducesReadiness=yes to reduce the ammunition supply of a unit when it takes damage. This is only applicable to units that have Ammo set to an integer other than -1 (unlimited ammo). \n ReadinessReductionMultiplier must be explicitly stated, as the default value (0.0) cancels the effect. \n The amount of ammo that is removed when the unit takes one hit of damage is determined by the following formula, rounded up to the nearest integer: \n  rounds lost = damage inflicted (before warhead calculations) / Strength * ReadinessReductionMultiplier * Ammo \n  Unfortunately, this means that even if the damage inflicted is relatively low, the unit will lose at least 1 round of ammo as long as ReadinessReductionMultiplier is greater than 0.0. \n  Resources \n  Relevant pseudocode is available at http://dc.strategy-x.com/src2/TechnoClass/Ammo.cpp . \n  Bugs/Side-Effects/Unexpected Limitations \n  Using negative values increases the amount of rounds without caring of maximum ammo. These rounds simply don't show up and it looks like ammo is not decreasing when the unit is shooting. \n  See also \n  Ammo InitialAmmo Reload EmptyReload ReloadIncrement"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BerserkFriendly",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines whether units under the influence of a Psychedelic=yes warhead will ignore items of this type when searching for a new target. If set to yes , berserking units will not consider this item a valid target. \n This does not apply to the Berzerk feature of Cyborg=yes infantry."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SprayAttack",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used to specify that this units Primary= weapon is randomly sprayed around the unit itself rather than fired at a target using the normal rules of a projectile. The effect is that the weapon is fired at a random cell at any one of the 8 standard compass directions from the unit, rather than at the selected target itself. This was intended for the Chaos Drone although it does not get used as the designers opted to make it 'simple deploy' to fire its weapon instead, then made that weapon affect an area around it. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Pushy",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this unit is able to move and fire again after 'pushing' another object. This only applies if the Warhead= on any of its weapons has DirectRocker=yes set. This can be used to restrict the power of the unit, since such a weapon means it can destroy vehicles with one 'shot'. There are no keywords under this heading. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Natural",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Setting this tag forbids this infantry from attacking any unit with Unnatural \n set."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Unnatural",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Setting this tag makes the object impossible to be attacked by infantry with Natural \n set to 'yes'. It also means that it cannot be attacked by Giant Squid's grab weapon."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CloseRange",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and specifies whether or not this unit is armed with a weapon which is only effective at very close range to its intended target. This helps the AI to ensure that the unit does not acquire targets that are too far away when conducting its threat scan. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PreventAttackMove",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this unit supports the 'attack-move' logic (also known as q-move). This defaults to 'yes' for all units that have a Primary= weapon. This can be used to override attack move on units that shouldn't for various reasons."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Points",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "From Red Alert to Firestorm \n  Specifies the number of points awarded for destroying this TechnoType for scoring purposes. \n  Red Alert 2 and Yuri's Revenge \n This flag is obsolete in RA2 and YR as the new 'Par Time' system is used as the scoring method in singleplayer missions and a straight kill/loss ratio along with economy is used in multiplayer."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ThreatPosed",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines the threat rating of this object used in the threat evaluation and targeting logic. Should be set on a scale of 0 - 100. You should set this to 0 if you use the special case of setting SpecialThreatValue=1 otherwise the special threat logic can be nullified. You should ensure this is set to 0 for building add-ons (upgrades) as they are special case structures that do not actually exist by default (they are normally displayed as auxiliary animations on the parent structure rather than as a new structure). Finally, this should be set to 0 for objects which are purely anti-air as aircraft do not use the threat rating values. NOTE: high values for this on BuildingTypes have been known to make the AI build many of them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Owner",
      "value_type": "House[32]",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Contents 1 Red Alert, Counterstrike and Aftermath 2 Tiberian Sun and Firestorm 3 Red Alert 2 and Yuri's Revenge 4 See Also \n  Red Alert , Counterstrike and Aftermath \n  Specifies a list of sides which should be able to construct this object. Recognized values for sides are allied , allies and soviet . \n  Tiberian Sun and Firestorm \n  Specifies a list of houses which should be able to construct this object, or gain this object as a multiplayer starting unit (if it also has AllowedToStartInMultiplayer=yes ) or from a bonus crate. \n  Red Alert 2 and Yuri's Revenge \n  Specifies a list of countries which should be able to construct this object, or gain this object as a multiplayer starting unit (if it also has AllowedToStartInMultiplayer=yes ) or from a bonus crate. \n If a player owns a Factory =( UnitType , InfantryType , AircraftType or BuildingType ) building with at least 1 Owner= country that both factory and unit share, then given you fulfill all the other Prerequisites you can build the unit in question. \n If this list includes one country from Side A, it should also include the other countries of Side A. \nMore granular permissions should be applied via Prerequisite , RequiredHouses and ForbiddenHouses . \n BuildingTypes generally include all multiplay-avaliable countries in this list. This is not completely necessary, but it can help new modders avoid the New Construction Options Bug in some cases if they keep this format. \n If a country has the proper Prerequisites but does not have a listing in a unit's Owner= list this will result in the New Construction Options Bug . \n  See Also \n  The Prerequisite System"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AIBasePlanningSide",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Contents 1 On All TechnoTypes 2 On BuildingTypes only 2.1 Stolen Technology 2.2 AI Base Planning \n  On All TechnoTypes \n  Influences the Cameo Sorting order. \n  On BuildingTypes only \n  Stolen Technology \n  AIBasePlanningSide affects the Technology Centers' role in the Stolen Tech logic. \n  AI Base Planning \n  In Red Alert 2 and Yuri's Revenge , every side has its own version of a building, plus some special ones. Due to the wacky way the game is coded, however, many of them have their Owner set to everything, and the AI isn't particularly known for adhering the Prerequisites . This, of course, would lead to the AI building every building of every side, without any order, which is most certainly not desired. To prevent this, the coders introduced AIBasePlanningSide . \n AIBasePlanningSide assigns the building it is set on to one specific side's tech tree, which is then followed by the AI. \n  Value Side –1 All sides 0 Allied (First country's Side on the Countries list) 1 Soviet (Second defined Side derived from the Countries list) 2 Yuri (Third defined Side derived from the Countries list) 3 [RockPatch is obsolete; please remove this template from the page] Fourth Side (Fourth defined Side derived from the Countries list)(See here ) \n  AIBasePlanningSide  must be set on all BuildingTypes for the AI to be able to use them correctly."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Trainable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether this object is subject to the Veterancy System and can thus be promoted. \n It is believed that it doesn't seem to prevent the object from receiving a promotion if it is in range of a veterancy crate bonus. However, this is because said objects did, in fact, NOT have Trainable=no even though they should have it (such as the 'Construction Excavator' ([CONA])), as the default is 'yes' for VehicleTypes , not 'no'.\nEvidence can be found both with the incident of promoted excavators and Westwood's comment regarding this flag. \n It is believed that it doesn't seem to prevent the object from receiving a promotion if it is infantry in occupied structure."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Crewed",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this object is occupied by infantry which can escape when it is destroyed. If the object is destroyed by its own weapon with Suicide=yes no survivors will be left."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Gunner",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, specifies that this object uses an IFV Weapon System . \n Originally used only on the IFV. In order for this flag to work as expected, several conditions have to be met: \n  The vehicle in question must have a TurretCount of >0. The statement must be neither omitted, nor set to 0. Negative numbers have not been tested, however it is reasonable to expect them to not cause the IFV to work as desired."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Naval",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "On BuildingTypes \n  If set to yes, this flag forces a Factory =yes building to only build VehicleTypes with a corresponding Naval=yes flag set. This flag serves as the only real logical distinction between a land-based vehicle factory and a naval-based ship factory. \n Naval=yes also prevents this BuildingType from being placed on non-Water tiles, or being deployed from a vehicle on non-Water tiles, regardless of the value of WaterBound . \n  On VehicleTypes \n  If set to yes, determines that this vehicle can only be built by a factory with Naval=yes set. \n Additionally, Naval=yes is used to designate what is considered a \"naval\" target for NavalTargeting logic. \n  NCO Bug Warning \n  Copied From EVA_NewConstructionOptions : \n The cause of the NCO bug is, indirectly, due to the developers' decision to treat Naval and land-based vehicles as members of the same VehicleType class, rather than creating a separate class. Shipyards are therefore classed as Factory=VehicleType, just like War Factories. This means the game will determine that you can build the land-based vehicles when you don't have a War Factory but do have a Shipyard, and vice versa for Naval vehicles. \n The result of this is that, unless you set all ground vehicles to have a Prerequisite of at least one of the War Factories and set all Naval units to have a Prerequisite of at least one of the Shipyards, you'll get the NCO bug when you own one of the factories but not the other. You can add other prerequisites as well if you like, but all units must include a Prerequisite of a factory of the appropriate kind. \n  PrerequisiteOverride makes this difficult, since a satisfied PrerequisiteOverride causes Prerequisite to be ignored. If you set PrerequisiteOverride to something other than the appropriate factory, you'll get the bug. So it's best to stay away from this tag where possible."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Repairable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType can be repaired either by sending an InfantryType with Engineer=yes set into it or by clicking the Repair icon in the sidebar to repair it."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Invisible",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object is always totally invisible to all players except its owner."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RadarVisible",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object is invisible on radar maps even when it is under the shroud. Defaults to 'no' for InfantryTypes and objects which have Insignificant=yes set and are owned by any of the multiplayer houses."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SelfHealing",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether the object will automatically heal itself. The effect is applied each time RepairRate minutes has passed, and is hardcoded to restore 1 health point each time. Only works while the object's health is at ConditionYellow or below (by default 50%). \n  In Red Alert 2 and Yuri's Revenge \n The healed damage no longer caps at ConditionYellow , allowing objects to heal to full health."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NoAutoFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object will automatically fire at targets acquired from its threat scan. The result of setting this to 'yes' is that the object must be selected and ordered to fire - it will not fire of its own accord even when it has acquired a target."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ROT",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Contents 1 On Infantry/Vehicle/Aircraft/Building Types 2 On Projectiles 2.1 Special Cases 2.1.1 ROT=1 2.1.2 ROT=0 2.2 Notes \n  On Infantry/Vehicle/Aircraft/Building Types \n  Determines the Rate Of Turn of this object and/or its turret, if applicable. Bigger number = faster turn. \n ROT=0 seems to have the same effect as the highest values (32767 or 2147483647). \n  On Projectiles \n  A non-zero value means this projectile can home-in on its target. A value of 0 disables homing behavior and leaves the projectile to fly straight. Note that this method of straight flight is buggy in TS and ever since. \n  Special Cases \n  ROT=1 \n  A projectile with a ROT of 1 will follow what appears to be a straight line to its target (seen on the Cyborg Commando in Tiberian Sun ). Actually, at extended ranges and low speeds, even projectiles with ROT=1 will adjust their trajectory to accomodate for changes in the target's position, but this is not usually visible. However, projectiles with ROT=1 will have no height deviation from their firing point, unlike missiles with higher ROT, which will fly upwards to hit the target in an arc. Setting ROT to 1 appears to make the projectile default to a high acceleration, meaning that it will be fired at a low speed and accelerate as it moves towards its target, though modifying the Acceleration tag can prevent this in order to generate a smoother flight. Projectiles with an ROT of 1 are known to act strangely when fired at certain angles or distances. They will sometimes \"overshoot\" their target and fly on past the map boundaries, but re-enter the map later, hitting their target. Other unusual behaviour has been observed regarding flight characteristics, especially when an ROT of 1 is coupled with AA =yes or Inaccurate =yes / FlakScatter =yes , though this might hold true for all projectiles with a ROT greater than 0 and Inaccurate or FlakScatter (needs testing). The most obscure effects are obtained by firing an inaccurate / flakscattering projectile with an ROT of 1 from aircraft, which will give an extreme form of the \" Circling Missile bug \". \n  ROT=0 \n  On aircraft, a weapon with a projectile with an ROT of 0 will cause the aircraft to fire the weapon in a strafing pattern of single projectiles (ignoring Burst on everything but the first shot) until either the weapon has been fired five times, the target was destroyed, or the unit aborts its attack mission. It will repeat this for every point of Ammo the aircraft carries. This is consistent with the common firing pattern of Bomber aircraft. \n Note: At least in Tiberian Sun , this behavior applies to both ROT=0 and ROT=1 projectiles. The difference being that ROT=1 projectiles home in on the target to some extent, while ROT=0 fall straight to the ground. \n  Notes \n  Setting a predefined flight path (via Arcing=yes / Lobber=yes and similar) will make the game ignore any ROT set on the projectile; the flight path determined by the former two tags takes precedence. \n  If the target is destroyed before this projectile can hit,  the projectile will simply disappear (in TS) or explode mid-flight."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Passengers",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "On VehicleTypes and AircraftTypes \n  This tag is required for all transports. However, its functionality differs between games: \n  Game Functionality RA/CS/AM TS/FS RA2/YR Yes Yes Yes * In RA: defines the amount of objects this transport can carry. In later games: defines the amount of slots this object has for purposes of unit transportation. An object takes up Size slots in a transport, and objects with Size exceeding this object's SizeLimit are not allowed to enter. Certain objects have additional hardcoded conditions preventing some objects from entering. In RA2/YR, Passengers cannot exceed Size . No Yes Yes Requires PipScale =Passengers to be set, or Internal Errors are bound to occur. Yes Yes Yes Defines the amount of pips displayed under this object. \n  On BuildingTypes \n In YR, this flag determines the amount of objects allowed inside if this structure has InfantryAbsorb=yes or UnitAbsorb=yes . Unlike on transports, each object takes up exactly one slot."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FireAngle",
      "value_type": "int",
      "default_value": "8",
      "adds_to_list": "",
      "desc": "Specifies the vertical pitch of this object's barrel , if it has one. 0 means \"horizontal\", increasing values rise it upwards, and  64 means \"completely vertical\". It only works if the barrel is a voxel , as this operation takes the VXL file and rotates the contents a certain amount upwards. It does not automagically change the FLH of this object, and appears to influence the starting pitch of a projectile, if it is capable of homing. Non homing projectiles don't seem to be affected."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployTime",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the time, in minutes 1 , that this object takes to deploy passengers or produced objects . This does not affect the duration it takes for a unit to deploy into a building or vice versa – that is controlled globally by BuildupTime . \n This flag also controls the duration of a weapons factory's door animation , if it has one. In other words, this flag controls how fast the door opens and closes. \n  1 ↑ on 15 FPS , the default game speed."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UndeployDelay",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies the delay, in frames, before this unit will automatically undeploy when previously ordered to deploy. Is used to time undeployment with the firing of Secondary= weapons or to force a delay to prevent continual firing of them."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Disableable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether or not the object can be disabled by a special multiplay option. Appears to be obsolete and unused and may be related to residual logic from Tiberian Sun where MCV's were in effect disabled when the 'No Bases' multiplayer option was chosen."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ToProtect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not the AI will quickly prioritize defense of this object when it comes under attack. Applies only to AI controlled units and is used mainly for Ore miners."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TiberiumHeal",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the number of minutes between restoring the amount of hitpoints defined by RepairStep (for VehicleTypes and AircraftTypes ) and IRepairStep (for InfantryTypes ) to applicable TechnoTypes with TiberiumHeal=yes ↓ that are positioned above OverlayTypes with Tiberium=yes . \n \n  For InfantryTypes, VehicleTypes, and AircraftTypes \n  Flag: TiberiumHeal File(s): Rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: false Applicable to: InfantryTypes , VehicleTypes , AircraftTypes Applicable TechnoTypes with this flag set to true and that are positioned above OverlayTypes with Tiberium=yes , are restored hitpoints defined by RepairStep (for VehicleTypes and AircraftTypes) and IRepairStep (for InfantryTypes) at a rate defined by TiberiumHeal ↑ (in [General] ). The Tiberian Sun engine makes no special check for whether or not an AircraftType with TiberiumHeal=yes is in flight or not when restoring hitpoints for being over Tiberium. In other words, aircraft are not required to land in order to heal from Tiberium."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImmuneToVeins",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not an object is immune to the damage and effects of Warheads with Veinhole=yes ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AllowedToStartInMultiplayer",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "If set to yes (or omitted, as yes seems to be the default), AllowedToStartInMultiplayer allows this unit to be among a player's starting units in a skirmish or multiplayer game. This is usually set on a House 's basic infantry and tanks. \n Take note that enabling this flag on Naval=yes units can lead to Internal Errors because of these units spawning on land."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "StupidHunt",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this unit cannot actually 'attack' anything due to restrictions on its weapon(s) or the fact that it may not even have one. The effect of this is that when controlled by the AI, this object will simply run at the player when the computer has no structures left (if the Short Game option is not selected) as in this instance the Hunt= mission is assigned to all of the computer's remaining units."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetLaser",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The Targeting Laser was a feature found in TS where a unit would produce a very thin red line to its target just prior to it firing its weapon. It was only used on the Titan and apart form that is unused. The original effect TargetLaser appears to only work with VehicleTypes but there are other ways to create a similar effect. \n  Target Laser Tutorials \n  Here you will find a selection of tutorials relating creating a targeting laser effect. \n  Improved Targeting Lasers (by Tratos) \n  This will show you how to make very effective target lasers for your units. \n This tutorial is very very easy but has good results. Firstly you need to find the unit you want to give a target laser too. For the purpose of this tutorial i will be reffering to the [GGI]. \n Secondly, ensure that your chosen unit does not have the tag \n  TargetLaser= \n  and if it does ensure that the value is no. This tag gives a 'laser' that is essentially just a red line drawn between the unit and its target and looks rubbish. \n Next, choose the weapon you want to apply the target laser to, in the case of the GGI i chose the [MissileLauncher] weapon to give the GGI laser guided missiles. Find the chosen weapon in rules .ini and add the following code to the end of its stats: \n  LaserInnerColor=*,*,* \nLaserDuration=** \nIsLaser=true \n  Change the *'s to the values you desire. For the colours these will be in RGB (Red, Green, Blue) format (a good red colour is 255,10,10). For the laser duration the value determines the time the laser effect is visible for, a good value is 15-20. \n This will draw a laser between the unit and the target when the weapon is fired. The good thing is that the normal projectile (in this case the missile) is also still drawn and the damage only happens when that projectile hits. This gives the effect of a small laser aiming at the target before the missile is fired giving the impression of laser guided missiles. This works best for weapons with a viewable projectile . For weapons with invisible projectiles (or projectiles with a speed of 100) it will just look like the unit is firing a laser. \n You can also add the tags: \n  LaserOuterColor =*,*,* \nLaserOuterSpread=*,*,* \n  And these will add a slight glow to the laser, personally i prefer it without these tags but you may not. The values are done in the same way as the InnerColor (RGB format). \n This effect is great for elite weapons to add a visual identifier that the unit is Elite apart from the chevrons and to mark the weapon apart from regular versions."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HunterSeeker",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to yes or no and determines if this unit is a Hunter Seeker. \n This tag will make units with the fly locomotor use HunterSeekerDescendProximity , HunterSeekerDetonateProximity , HunterSeekerEmergeSpeed , HunterSeekerAscentSpeed , and HunterSeekerDescentSpeed . The unit will follow its target and damage it using the primary weapon when the Hunter Seeker comes closer than HunterSeekerDetonateProximity . The primary weapon is not actually fired; only its Damage and Warhead are used to deliver the damage. \n Hunter Seekers will never fire their weapons because the target is always considered out of range. Hunter Seekers are never affected by Ion Storms. \n It appears that this logic is at least partly residual from Tiberian Sun, although it has a slightly different effect. This tag was not valid on a unit (even though it was present) in Tiberian Sun, although in Red Alert 2 you can put it on a unit as a special case - provided that unit has a weapon, this tag will make it follow the target around (although the weapon itself will not actually fire). \n In Yuri's Revenge this tag is parsed, but none of the effects above are triggered. Rather is it used to deactivate certain features related to movement or firing."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Crusher",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this VehicleType can crush certain ObjectTypes with Crushable=yes . \n \n  See Also \n  who crushes whom"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OmniCrusher",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this VehicleType can crush other objects, including those labeled Crushable=no . Also apparently makes the vehicle approach mobile targets while firing its weapons at them in an attempt to crush them, rather than fire from stand-off range as normal units do, when ordered to attack. \n This OmniCrusher should best have the tag OmniCrushResistant=yes set, to prevent two of the same type trying to crush each other. \n \n  See also \n  Who crushes whom"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OmniCrushResistant",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this object cannot be crushed by OmniCrusher=yes vehicles. For more information see Who crushes whom ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AutoCrush",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines the IQ level required by a house before its units with Crusher=yes set will automatically try to crush nearby enemy units that have Crushable=yes set. Applies only to land based vehicles."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImmuneToRadiation",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not an object is immune to the damage and effects of Warheads with Radiation=yes ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Underwater",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Underwater=yes has three known effects and one untested effect: \n  Primarily, it is used to classify the object as being underwater, for the purposes of the NavalTargeting logic. It will also stop the object from displaying the Wake animation when traveling over water. It will disable the \"sinking\" death logic for the unit, instead displaying explosions It will also restrict units from recloaking when it is in fact on land."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BalloonHover",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Is used on units with JumpJet set and specifies that they will never land by default. This also has the additional effect of using the Balloon Hover Alternate Characteristics on the unit. \n Units with this flag set to \"yes\" will also attempt to hover above their target (if the target is on the ground) when attacking, instead of attacking the target from the distance defined by the Range flag on the weapon. If the unit is able to attack air targets and is told to do so, it will attempt to enter the same cell as the target. All the while it is approaching its target, it will still fire even if it has not yet entered the same cell, provided the target is within range. \n Editor's Note: \n In theory, mis-casing JumpJetAccel can be used as a 'fix' for the problem with BallonHover-ers always willing to occupy the same cell as the target. \n The unit will attempt to land, but never do so, but hovers in the air a short distance away from the ground. \n Funnily enough: If Vertical=yes for the unit's projectile, then the unit WILL attempt to hover over its target, regardless of Template:Range . If Vertical=no, then opposite applies."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Slaved",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this InfantryType is 'enslaved' by a BuildingType. The BuildingType must have an Enslaved= tag set to this units name in order for the logic to work. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Enslaves",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the InfantryType that this object 'enslaves'. The units enslaved by this object are 'freed' when the object itself is destroyed. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SlaveRegenRate",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the delay, in frames, between this object spawning a new InfantryType which it Enslaves= should one get destroyed. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SlavesNumber",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the number of InfantryTypes specified by the Enslaves= tag that this object controls. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SlaveReloadRate",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the delay, in frames, between sending out an InfantryType which it Enslaves= once it has returned with Ore. \n (Yuri's Revenge Only)"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OpenTransportWeapon",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies which weapon this unit uses when it is inside a VehicleType with OpenTopped=yes set. Can be set to '0' for Primary= weapon to be used, or '1' for Secondary= weapon to be used. Defaults to '0'. (Yuri's Revenge Only) \n Seemingly by default, a full \"gattling\" cycle works and can use all 3 ground and 3 air weapons from inside a vehicle which has OpenTopped=yes without discerning \"which weapon\" is to be used"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Spawned",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this AircraftType has been 'spawned' (created by another object, usually with a weapon which has Spawner=yes set and/or by a unit set to Spawn= this object) and therefore is not player controllable. \n Editor's note: \n This has no impact on \"tilting\" when turning. That'd be PitchAngle and PitchSpeed ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Spawns",
      "value_type": "AircraftType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the AircraftType this unit or building is able to spawn using a special weapon with Spawner =yes . Defaults to 'none'. \n  See also \n  Spawner SpawnsNumber SpawnRegenRate SpawnReloadRate \n  On Animation Debris \n  Flag: Spawns File(s): Art(md).ini Values: Strings : Normal text. (Limited to: Animations ) Default: none Specifies an animation spawned by this debris animation with Bouncer =yes upon impact with ground. Amount specified by SpawnCount =. Defaults to 'none'. On Voxel Debris Flag: Spawns File(s): Rules(md).ini Values: Strings : Normal text. (Limited to: VoxelAnims ) Default: none Specifies a voxel debris animation spawned by this voxel debris upon impact with ground. Amount specified by SpawnCount =. Defaults to 'none'. On ParticleSystems Flag: Spawns File(s): Rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: ParticleSystems Can be set to 'yes' or 'no', and tells whether or not this ParticleSystem can spawn particles by itself. Defaults to 'no'. See also SpawnFrames SpawnRadius SpawnCutoff SpawnTranslucencyCutoff"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpawnRegenRate",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The rate, in frames, at which this object regenerates spawned objects that have been destroyed."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpawnsNumber",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the number of Spawns= that this object produces with each successive firing action."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpawnReloadRate",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The rate, in frames, at which this object reloads itself with expended spawned objects. This should be set to '0' for objects which spawn 'missiles' (special case AircraftTypes which have MissileSpawn=yes set) so that they don't attempt to return."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MissileSpawn",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this AircraftType is actually a spawned missile rather than a true aircraft, as the Dreadnaught and V3 spawn these types. If set to yes, this means (perhaps along with other functionality) that the kills scored by the spawned object count towards the veterancy of the spawning object (for example, the V3 Launcher can become Veteran or Elite by the kills done by the V3 Rockets it spawns). Another apparent function is that no more instances of an object with MissileSpawn=yes are spawned once the spawning object is no longer itself attacking (for example, an Aircraft Carrier will spawn fighters at a target even when having been ordered to move, as long as the target is within range, opposed to the V3 Launcher, which stops spawning when moving). \n The tag also seems to have the effect of rendering the relevant aircraft type immune to the death of the object that spawned it. If an aircraft is spawned by another object, is is normally instantly destroyed when the spawning object gets destroyed. Missiles, on the other hand, stay 'locked' on their flight path, even after the death of the spawning object."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DefaultToGuardArea",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Should not be used on BuildingTypes. This dictates that the object should always default to the AreaGuard mission rather than become idle, meaning it is always scanning for nearby targets."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Warpable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether this object is vulnerable to the effects of any Temporal=yes warhead."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Parasiteable",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object can be attacked by units with weapons that have LimboLaunch=yes set and whose Warhead= has Parasite=yes set."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImmuneToPsionics",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "If set, this object is immune to the effects of warheads with MindControl=yes or Psychedelic=yes , as well as the Permanent Mind Control effect of SuperWeapons with Type=PsychicDominator (this SuperWeapon's handling is hardcoded to not capture buildings, this fact cannot be overridden). \n  See Also \n  ImmuneToPsionicWeapons"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImmuneToPsionicWeapons",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "If set, this object is immune to the effects of warheads with PsychicDamage=yes . \n  See Also \n  ImmuneToPsionics"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ConsideredAircraft",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Should be used only on AircraftTypes and is used to distinguish them from AircraftTypes which have MissileSpawn=yes set so that the game does not allow objects to get confused when conducting their threat scan. Also used to indicate that the object is actually a 'true' aircraft rather than a flying bullet type, and to ensure the game produces this object from the correct 'doors' on the Weapons Factories (i.e. should it emerge from the front or from the roof)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Bunkerable",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Determines whether or not the specified vehicle is able to enter a structure that has Bunker=yes set on it. In order to use this logic properly, the vehicle must have Turret=yes set on it and its SpeedType must not be Hover . In addition, parasited units are not allowed to enter."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Organic",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Kills this TechnoType when exposed to the ChronoSphere or Iron Curtaining,  uses [CombatDamage] → C4Warhead= and Strength for Damage . If this Infantry has Teleporter=yes or Organic=no , it won't die from ChronoSphere. InfantryTypes are hard coded to always die from Iron Curtain regardless of this flag's value. If you want the infantry not to be killed by them, you need to modify C4Warhead , like AffectsAllies=no . This can even make Ares' Iron Curtain Warhead effective for InfantryType. But for an Iron Curtaion type SuperWeapon, although your InfantryType will not die, its HP will be deducted to only 1 . \n  Prevents this TechnoType from being a valid target for weapons with IsLocomotor=yes warheads. If the TechnoType with this flag also has Naval=yes set, it uses the Squid-like behaviour for Parasite instead of Terror Drone-like. And it is necessary for Culling logic.(Unless you use Ares above version 3.0) If another TechnoType targeting this object has NavalTargeting=3 (ORGANIC_SECONDARY) and this object is in the water, makes the attacker use the Secondary weapon for attacking it. A TechnoType with this flag set and both Underwater=yes and SelfHealing=yes set uses its GuardRange instead of the larger of its two first weapons' Range s for scanning for targets. Makes this VehicleType be affected by the Tech Hospital's Auto-Heal instead of Tech Machine Shop's Auto-Repair. Applies the Infantry styled Auto-Heal pip (red cross) to this VehicleType if possible. \n  See also \n  Culling Parasite Naval NavalTargeting \n C4Warhead \n  Teleporter"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ImmuneToPoison",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This flag determines whether or not an object is immune to the damage and effects of Warheads with Poison=yes ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SuppressionThreshold",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of Damage= below which any of this units weapons whose Warhead= has Parasite=yes set will not be suppressed. \n For example, a parasite with a SuppressionThreshold of X won't be killed by any weapons causing less than X damage to infected vehicle; if the host is killed by dealing less than X per shot, the parasite will survive."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NoShadow",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object should cast a shadow. For SHP objects, it indicates whether or not the shadow images from this object's SHP sequence should be displayed. For VXL units, this sets the flag on the Locomotor= to indicate that the shadow index should be used to display the shadow."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetTurnRate",
      "value_type": "int",
      "default_value": "4",
      "adds_to_list": "",
      "desc": "The rate of turn of this unit while it uses the Jumpjet locomotor for flying. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetSpeed",
      "value_type": "float",
      "default_value": "14",
      "adds_to_list": "",
      "desc": "Specifies the speed of units flying using the Jumpjet locomotor. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetClimb",
      "value_type": "float",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "The vertical climb and descend speed of units which fly using the Jumpjet locomotor. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetCrash",
      "value_type": "float",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "The speed crashing to the ground of units which fly using the Jumpjet locomotor. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetHeight",
      "value_type": "int",
      "default_value": "500",
      "adds_to_list": "",
      "desc": "The flying altitude of units flying using the Jumpjet locomotor in leptons above ground level. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetAccel",
      "value_type": "float",
      "default_value": "2",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetWobbles",
      "value_type": "float",
      "default_value": "0.15",
      "adds_to_list": "",
      "desc": "The number of times per second a unit flying using the Jumpjet locomotor wobbles up and down by JumpjetDeviation . \n Must not be 0.0 . In case no wobbles are wanted, set JumpjetNoWobbles=yes . \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetNoWobbles",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether this unit flying using the Jumpjet locomotor shall wobble up and down by JumpjetDeviation . \n Has to be set to yes instead of using JumpjetWobbles=0.0 , otherwise the game will crash. \n  See also \n  Jumpjet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpjetDeviation",
      "value_type": "int",
      "default_value": "40",
      "adds_to_list": "",
      "desc": "The amplitude of wobbling in leptons of units using the Jumpjet locomotor. \n  See also \n  Jumpjet JumpjetWobbles"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpJet",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Crashable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines whether this unit behaves like aircraft when being destroyed when in air. If set to yes , the unit will plummet down and crash to the ground instead of simply blowing up. \n UnitTypes with Crashable=yes will not allow passengers to escape even if the unit rests on the ground. \n This tag does not apply to AircraftTypes . \n  See also \n  BalloonHover JumpJet"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AttackFriendlies",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, when scanning for targets this unit can aim at friendly units as well as enemy ones. See also AttackCursorOnFriendlies ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AttackCursorOnFriendlies",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether this unit is able to legally issue an attack on friendly units without a force fire command to do so. Does not include friendly units in the unit's threat scan."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretRecoil",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if the turret on this object recoils after firing."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretTravel",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Specifies the number of pixels by which the TurretAnim= on this BuildingType can be offset by if it has TurretRecoil=yes set."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretCompressFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the TurretAnim= on this BuildingType takes to compress (recoil). Only applies to structures that have TurretRecoil=yes set to give the impression of recoiling."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretHoldFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the TurretAnim= on this BuildingType is held in the recoil position for. Only applies to structures that have TurretRecoil=yes set to give the impression of recoiling. $TurretIndex= Specifies the index of each VXL turret that this VehicleType has (only applicable for units with Gunner=yes set). The $ specifies the name which corresponds to the turret number (determined by the IFVMode= setting of the infantry unit inside the vehicle). The 'index' is the number used to add to the end of the VXL filename to derive the VXL file used for the turret for each different weapon. Red Alert 2 accepts any of the following;- Normal Repair MachineGun Flak Pistol Sniper Shock Explode BrainBlast RadCannon Chrono Terrorist Cow (YR) Initiate (YR) Virus (YR) YuriPrime \n (YR) Guardian"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretRecoverFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the TurretAnim= on this BuildingType requires to recover after recoiling. Only applies to structures that have TurretRecoil=yes set to give the impression of weapon recovery after it recoils."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BarrelTravel",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Specifies the number of pixels by which the barrel attached to the TurretAnim= on this BuildingType can be offset by if the structure has TurretRecoil=yes set."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BarrelCompressFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the barrel attached to the TurretAnim= on this BuildingType takes to compress (recoil). Only applies to structures that have TurretRecoil=yes set to give the impression of the barrel recoiling."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BarrelHoldFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the barrel attached to the TurretAnim= on this BuildingType is held in the recoil position for. Only applies to structures that have TurretRecoil=yes set to give the impression of recoiling. This can be used to make the barrel recoil independently of the turret itself."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BarrelRecoverFrames",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The number of frames that the barrel attached to the TurretAnim= on this BuildingType requires to recover after recoiling. Only applies to structures that have TurretRecoil=yes set to give the impression of weapon recovery after it recoils. This can be used to make the barrel recoil independently of the turret itself."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TiltsWhenCrushes",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Should only be used on terrestrial VehicleTypes. Can be set to 'yes' or 'no' and determines if this unit tilts when it crushes another object (usually sandbags or infantry). Applies only to voxel vehicle types which have Crusher=yes set (or those which gain this property through the VeteranAbilities= or EliteAbilities= statements)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Accelerates",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This flag determines whether this unit will accelerate to reach its given Speed as opposed to just jumping to that speed level straight away. See also \n  AccelerationFactor \n  DeaccelerationFactor"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ZFudgeCliff",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Specifies the adjustment to this VehicleTypes Z position (i.e. how far 'in to' or 'out of' the screen it appears) when it is behind rocks and is used to calculate the amount of displacement it causes to impassable isometric tile types. This is normally a negative figure, indicating that the terrain type should be further into the screen hence behind the relevant object."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ZFudgeColumn",
      "value_type": "int",
      "default_value": "5",
      "adds_to_list": "",
      "desc": "Specifies the adjustment to this VehicleTypes Z position (i.e. how far 'in to' or 'out of' the screen it appears) when it is behind overpass (high bridge) support columns and is used to calculate the amount of displacement it causes to impassable isometric tile types. This is normally a negative figure, indicating that the terrain type should be further into the screen hence behind the relevant object."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ZFudgeTunnel",
      "value_type": "int",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Specifies the adjustment to this VehicleTypes Z position (i.e. how far 'in to' or 'out of' the screen it appears) when it is behind tunnel entrances and is used to calculate the amount of displacement it causes to impassable isometric tile types. This is normally a negative figure, indicating that the terrain type should be further into the screen hence behind the relevant object."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ZFudgeBridge",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the adjustment to this vehicle's position on the Z (depth) axis (i.e. how far 'in to' or 'out of' the screen it appears) when it is under a high bridge overlay . Positive numbers move the vehicle towards the ground (behind the bridge) while negative numbers move it closer to the screen (in front of the bridge). \n This is usually needed on tall or otherwise large units to prevent the top of the unit from visually clipping through the bridge. Note however that using too high values will cause the vehicle to 'sink' into the ground while under a bridge, clipping or erasing its bottom row(s) of pixels (usually the shadow)."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VeteranAbilities",
      "value_type": "vector<Abilities>",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies a list of promotional bonuses granted to a unit upon reaching \"Veteran\" status. \n  Accepted values \n  Value Effect FASTER Applies the effect of VeteranSpeed to Speed STRONGER Applies the effect of VeteranArmor to damage received FIREPOWER Applies the effect of VeteranCombat to Damage of all weapons SCATTER Causes unit to automatically scatter from weapon fire and move away from units that attempt to crush it (if applicable) ROF Applies the effect of VeteranROF to ROF of all weapons SIGHT Applies the effect of VeteranSight to Sight CLOAK Grants the effect of Cloakable=yes TIBERIUM_PROOF Grants the effect of TiberiumProof=yes VEIN_PROOF Grants the effect of ImmuneToVeins=yes SELF_HEAL Grants the effect of SelfHealing=yes EXPLODES Grants the effect of Explodes=yes RADAR_INVISIBLE Grants the effect of RadarInvisible=yes SENSORS Grants the effect of Sensors=yes FEARLESS Grants the effect of Fearless=yes C4 Grants the effect of C4=yes 1 TIBERIUM_HEAL Grants the effect of TiberiumHeal=yes GUARD_AREA Causes unit to automatically enter a guard mission when idle CRUSHER Grants the effect of Crusher=yes \n  See also \n  EliteAbilities \n  Footnotes \n  1 ↑ C4 promotional bonus only works properly in Tiberian Sun and Firestorm . In Red Alert 2 and Yuri's Revenge the unit will have a C4 cursor for buildings, and even try to run up to them when commanded to plant a C4 charge. However the C4 effect will not activate and the unit will simply fire at the building with its weapon."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteAbilities",
      "value_type": "vector<Abilities>",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies a list of veterancy bonuses that this object gains when it reaches \"Elite\" stage. All possible values are hardcoded, and are listed at VeteranAbilities . \n These values do not stack with VeteranAbilities ; i.e. you do not get twice the damage reduction from having the ARMOR statement in both lists. However, current abilities cannot be altered between Veteran and Elite level. In other words, the game will still keep the SENSORS ability at Elite level, even if it is only in the Veteran list. \n Note : Contrary to what one might expect, the FIREPOWER and ROF bonuses are applied to the object's Elite weapon, if any. \n  See Also \n  VeteranAbilities"
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MyEffectivenessCoefficient",
      "value_type": "float",
      "default_value": "[General]→\nMyEffectivenessCoefficientDefault",
      "adds_to_list": "",
      "desc": "This article or section is a stub . You can help ModEnc by expanding it . \n This is a per-unit override for MyEffectivenessCoefficientDefault ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetEffectivenessCoefficient",
      "value_type": "float",
      "default_value": "[General]→\nTargetEffectivenessCoefficientDefault",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetSpecialThreatCoefficient",
      "value_type": "float",
      "default_value": "[General]→\nTargetSpecialThreatCoefficientDefault",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetStrengthCoefficient",
      "value_type": "float",
      "default_value": "[General]→\nTargetStrengthCoefficientDefault",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetDistanceCoefficient",
      "value_type": "float",
      "default_value": "[General]→\nTargetDistanceCoefficientDefault",
      "adds_to_list": "",
      "desc": "TargetDistanceCoefficient specifies the threat rating scan range for this TechnoType (units/infantries etc.). This overrides the global TargetDistanceCoefficientDefault defined in General section. See TargetDistanceCoefficientDefault for details."
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpecialThreatValue",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsSelectableCombatant",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not this object is selected when selecting multiple objects (using the 'all-of-type' command or the mouse selection rectangle). \n  See Also \n  Selectable"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's ID",
      "key": "UseBuffer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this tag causes the game to handle multiple sectioned voxel rendering in a special way. When two sections will overlap, then instead of drawing one of them on top, the game will try to draw only some parts of it over the other one, giving it a more 3d-like feel. If a smaller section enters an empty space of a larger section, it should be still rendered on top. \n Disabling this tag will cause the game to always render on top the section that is the closest to the screen from the viewer's perspective. Because of this, if a smaller section ends up inside of a larger section's area, the game will always draw it under the larger one."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Palette",
      "value_type": "filename.pal",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Template:RockPatchFlag This flag lets you use any palette with animations. Simply add the Palette tag to the animation in question. The value for this tag is the filename of the palette with the .PAL extension, e.g. \n  Palette=MYANIN.PAL \n  You are limited to 31 characters on the filename.\nIf the above tag was added to an animation, it would then be drawn using 'myanim.pal' rather than the default palette. \n Removing the .PAL file extension causes the theater to be appended to the filename ingame. Going with the previous example, using: \n  Palette=MYANIM \n  then the game will try to load 'myanimtem.pal' on temperate maps; 'myanimsno.pal' on arctic maps; 'myanimdes.pal' on desert maps; 'myanimurb.pal' on urban maps; 'myanimlun.pal' on lunar maps; and 'myanimubn.pal' on new urban maps. The actual 'myanim.pal' file would not be used at all. \n  Note: Do not use the AltPalette tag along with this one, as AltPalette will override the function of this tag."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "TurretOffset",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "TurretOffset provides additional degree of control over turret/barrel positioning . Unlike voxel header editing, which uses voxel blocks as measure units, this tag takes value in leptons . It allows you to move the turret \"box\" forward or backward over the z axis. (And by doing so, it affects the barrel's location on the z-axis the same way.) \n - = reverse, + = forward, its actually sensible for once"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "RotCount",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Remapable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Presumably, this flag was intended to control whether or not this TechnoType 's image has pixels that should be remapped according to the owner's  color . However, in all the games that it's present, the flag is entirely redundant: it is only read, no logic is tied to it. If the object uses the unit* palette and remappable colors are present in the object's art (color indexes 16–31), then those colors are always remapped."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Normalized",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this animation's speed will be modified depending on your Game Speed setting to make it play at the same perceived speed. \n Animation durations are determined at the animation's creation time: \n  First, the time in frames it will take to finish (let's call it T ) is equal to the animation's Rate setting. If the animation has a valid RandomRate=x,y specified, T is set to a random number between x and y . If Normalized=yes is set on this animation, T is recalculated according to a formula: If T is larger than 5 (the most common case), it's recalculated to equal (8 * T / Game Speed) (on the scale of 1 through 6) . If it is between 1 and 4 frames inclusive, the game applies hardcoded multipliers instead, which are not clear at this time. \n The resulting T is the duration in frames that this animation will last."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "VisibleLoad",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ShadowIndex",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Only applies to objects with voxel images, and voxel files with multiple sections. This determines which voxel section will be used to render the shadow of the unit. For example, in a helicopter voxel, it probably has two sections, for the rotors and the main body. ShadowIndex= allows you to make the game draw the shadow based on either the body or the rotors. \n  See also \n  Shadow NoShadow"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DisableVoxelCache",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This tag tells the game whether the voxel data of this object should be cached or not. Unlike in case of DisableShadowCache , not disabling the caching does not in most, if not all cases incur any drawing or visual problems. Developers' original intention seems to have been to reduce memory consumption caused by caching animated voxels. However, it should be noted that disabling voxel caching can cause rather drastic performance drop with large and especially animated voxels if substantial amounts of them are on screen at once, as they have to be constantly redrawn without being able to speed it up by using cached data."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DisableShadowCache",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This tag tells the game whether the shadow cast by this object should be cached or not. Disabling the cache makes the game render a separate shadow for each frame of the object's hva animation (as opposed to using only shadows of the first frame for all frames of the animation). This effectively fixes any holes created in the shadow by moving sections of the voxel, and prevents the shadow from appearing on a jumpjet that lands on the ground."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Cameo",
      "value_type": "filename.shp",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Cameo defines the \"sidebar image\" for this ObjectType . If your cameo is in a file called monkicon.shp , you would write \n  Cameo=monkicon \n  or \n  Cameo=MONKICON \n  This refers to the filename without the extension (.SHP is assumed) and is case-insensitive. xxicon.shp is the game's image to be used when the cameo file cannot be found or is not defined. \n For reference: TS cameos are 64x48, RA2 and YR cameos 60x48.\nIt is unknown what side-effects result from making a smaller and/or larger cameo, though RA2 seems capable of handling 64x48 TS cameos and 64x64 cameos without trouble. \n  See Also \n  Adding A Cameo AltCameo Cameo Charging Indicator"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AltCameo",
      "value_type": "filename.shp",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "When Adding A Cameo , this flag defines the sidebar image used for a veteran version of this unit. \n The general naming convention of existing cameos is: ____uico.shp , where ____ is the first four letters of your cameo's filename. Cameos don't need to have an 8-character filename followed by the .shp extension, but it is the naming convention used by Westwood. Normally this would be ____icon.shp , but veteran icons are usually given the suffix of 'uico' instead. \n  Where applicable \n  On InfantryTypes with Trainable=yes - when the player successfully infiltrates a Barracks. On VehicleTypes with Trainable=yes - when the player successfully infiltrates a War Factory. (See Bugs ) On BuildingTypes which are Trainable=yes and UndeployInto VehicleTypes - when the player successfully infiltrates a War Factory. (See Bugs .) \n  Bugs/Side-Effects/Unexpected Limitations \n  Once a War Factory has been infiltrated , VehicleTypes with Naval=yes and Trainable=yes get their cameos \"upgraded\" into this version even though they do not start off as veteran when built. Ares DLL fixes this. Infantry designated as VeteranInfantry and units designated as VeteranUnits don't get their cameos \"upgraded\" into this version even though they actually start off as veteran when built."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "WeaponXFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's weapon specified as WeaponX ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "WeaponXBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "WeaponXBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "WeaponXTurretLocked",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteWeaponXFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's weapon specified as EliteWeaponX ."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteWeaponXBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteWeaponXBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteWeaponXTurretLocked",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PrimaryFireFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's Primary weapon. \n  Contents 1 Description 2 Even-Numbered Bursts 3 Voxel Barrel Pivot 4 Bugs/Side-Effects/Unexpected Limitations 5 See Also \n  Description \n  F =forward axis, L =lateral axis, H =vertical axis. \n Units are in leptons, which are 256 per cell boundary, or 128 from center to edge. The vertical leptons are halved in relative offset, just as the artwork for a cell is half as tall as it is wide, thus 128 equals a height of 1 in terrain elevation. \n Positive values are forward, right; up, negative values are rearward, left, down. \n  Even-Numbered Bursts \n  Weapons with an even number Burst value (e.g. 2) will consider a non-zero value for L as the mirror twin offset for the subsequent even numbered bullet/projectile. In this way a twin barrelled tank (e.g. Apocalypse) or twin pod rocket launcher (e.g. IFV) can shoot from both sides. \n  Voxel Barrel Pivot \n  If the object has an arcing primary weapon and a voxel barrel, PrimaryFireFLH also affects the barrel pivot offset. In order to move the firing offset to the tip of the barrel without moving the pivot, use PBarrelLength . \n  Bugs/Side-Effects/Unexpected Limitations \n  When using multiple bursts, the muzzle flash animation is played on the opposite lateral offset. This means the animation will play on one offset while the projectile flies out of the other. \n  See Also \n  SecondaryFireFLH ElitePrimaryFireFLH EliteSecondaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the length of this object's barrel, in leptons , when the object is using its primary weapon. This is used for determining the correct firing offset for objects with a turret and a voxel barrel. \n  See Also \n  SBarrelLength PBarrelThickness SBarrelThickness PrimaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SecondaryFireFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's Secondary weapon. \n  See Also \n  PrimaryFireFLH ElitePrimaryFireFLH EliteSecondaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the length of this object's barrel, in leptons , when the object is using its secondary weapon. \n  See Also \n  PBarrelLength PBarrelThickness SBarrelThickness SecondaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ElitePrimaryFireFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's ElitePrimary weapon. \n  See Also \n  PrimaryFireFLH SecondaryFireFLH EliteSecondaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ElitePBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ElitePBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteSecondaryFireFLH",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's EliteSecondary weapon. \n  See Also \n  PrimaryFireFLH SecondaryFireFLH ElitePrimaryFireFLH"
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteSBarrelLength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "EliteSBarrelThickness",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AlternateFLHX",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset ( FLH ) of this object's special weapons, such as ones fired by passengers of OpenTopped=yes objects, or mind control lines from InfiniteMindControl=yes weapons. It allows logical scattering of firing muzzle anims according to the vehicle design, e.g., making each Battle Fortress passenger fire from a separate gun port as opposed to one shared position. \n Only loads AlternateFLH0 through 4. All others are ignored."
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "TurretNotExportedOnGround",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SecondSpawnOffset",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "TechnoTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MovementZone",
      "value_type": "MovementZone",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "MovementZone says where the unit is allowed to go and helps the AI pathfinding routines. The possible values it takes are: \n  MovementZone Description Amphibious When pathfinding, the unit will consider both ground and water as passable. This is the only MovementZone that allows amphibious units, like Hover Craft and Robot Tanks or even the TS GDI APC, to dock with all UnitRepair=yes buildings for repairs, regardless if it's land-based Service Depot or a water-based Naval Yard. Otherwise the unit will stick with land-based OR water-based, never both. AmphibiousCrusher When pathfinding, the unit will consider both ground and water as passable. In addition, it will assume that it is capable of crushing infantry, but is unarmed. 1 AmphibiousDestroyer Same as AmphibiousCrusher , additionally can destroy terrain obstacles. In RA2 this is tied to being an amphibious infantry. Crusher When pathfinding, only clear ground is considered passable. Also assumes that it can crush infantry, but is not armed. 1 Units with Subterranean Locomotor and Crusher MovementZone will only dig in if there are 11 tiles between unit destination. Those tiles were Clear tiles. CrusherAll Same as Crusher , additionally assumes that it can crush any mobile object, as well as walls. 2 Destroyer When pathfinding, considers ground passable. Can destroy terrain obstacles and crush infantry obstacles. Fly When pathfinding, it assumes everything passable. Infantry When pathfinding, only clear ground is considered passable. InfantryDestroyer Same as Infantry , but can destroy terrain obstacles such as trees. Normal When pathfinding, considers clear ground passable. Assumes it can destroy terrain obstacles and crush infantry. Subterannean 3 When pathfinding, considers clear ground passable. When destination is too far away for surface travel, or there is an obstacle in the way, unit will dig underground. In other cases, when subterranean travel is not possible, or surface travel is quicker, acts like a unit with MovementZone=Crusher or MovementZone=Destroyer . This MovementZone is what allows units with Subterranean Locomotor to dig in if target location and/or origin location can't be dug into courtesy of AllowBurrowing=no on the TileSets and make unit look for the closest cells to dig into and/or out of.\nIf a different MovementZone is set the unit will only dig if both origin and target locations can be dug into; else it'll drive and only re-consider digging after a complete and absolute stop and then giving a new order manually. If persuaded to get underground then given a new order it'll try going to new target location, and if it can't dig out of it it'll look for closest exit only after it reaches/gets directly below the target. Water When pathfinding, considers only water as passable. WaterBeach ??? \n  Notes \n  SpeedType is what actually allows or disallows a unit to move over specific terrain . \n 1 : To actually crush infantry, it needs to be Crusher=yes . Infantry which has Crushable=no or DeployedCrushable=no ( YR only, only works when deployed, obviously) set will not be crushable. \n 2 : In order to actually crush vehicles, it needs to be OmniCrusher=yes . Objects which have OmniCrushResistant=yes will not be crushable. \n  3 \n : With a typo, no less. Subter r annean will not work."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsVeinhole",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and specifies that this terrain object generates Veins. It is not known if the Vein logic works in Red Alert 2 as it remains residual from Tiberian Sun."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WaterBound",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object can only be placed on specific types of terrain tiles when constructed. These tiles consist of all tiles using a terrain type with SpeedType percentage value for Float being higher than 0%. Buildable is also ignored in the process. \n Naval=yes on a building prevents placement on non-water like WaterBound=yes does. \n  See also \n  Buildable PlaceAnywhere"
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpawnsTiberium",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether this terrain object spawns Tiberium. \n In Firestorm , the Tiberium type to spawn is defined by TiberiumToSpawn . Tiberian Sun , Red Alert 2 and Yuri's Revenge are hardcoded to only spawn the first Tiberium type. \n This tag has many effects. The following list is not conclusive. \n  If destroyed, a damage of 100 is dealt to the cell using C4Warhead , and a chain reaction is started (see ChainReaction ) Terrain objects cannot burn or participate in tree fires If also IsAnimated=yes , spreads Tiberium when the first half of the animation played Objects are drawn using UNITSNO.PAL"
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsFlammable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag was presumably intended to control whether this TerrainType can catch on fire (from incendiary warheads ), and subsequently spread fire to neighboring trees . However, setting it to false doesn't work. \n  Workarounds \n  If the TerrainType has any of the following settings, it will not catch fire: \n  Immune=yes SpawnsTiberium=yes Armor is any other than wood , the default of TerrainTypes"
    },
    {
      "category": "TerrainTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Foundation",
      "value_type": "Foundation",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines the number of cells a structure occupies, and the arrangement of those cells. \n  Contents 1 Accepted values 1.1 3x3REFINERY 1.2 6x4 1.3 0x0 2 Bugs/Side-Effects/Unexpected Limitations 2.1 AI Treatment of Foundation 0x0 2.2 Construction Yards 2.3 Weapons Factories 3 Ares's Custom Foundations 3.1 New Values and Flags 3.2 Sample Code 3.3 Notes \n  Accepted values \n  All values are case-insensitive. Any other values will simply be ignored and the default used instead; however Ares can be utilized to create custom foundations. The first number represents the cell-count along the NW-SE axis, the second along the NE-SW axis. \n  0x0, 6x4, 3x4, 4x4, 5x3, 2x5, 2x6, 1x5, 1x4, 4x3, 3x1, 1x3, 3x3REFINERY, 4x2, 3x5, 3x3, 3x2, 2x3, 2x2, 1x2, 2x1, 1x1 \n  3x3REFINERY \n  Foundation=3x3REFINERY grid illustration \n  3x3REFINERY \n is an unusual shape. While all other foundation values are rectangles, this one has an empty cell in the center of the third row. Albeit containing \"Refinery\" in the value string, this will not work for a Refinery because the harvester's docking point inside a refinery is hardcoded to be the second cell in the fourth row, which is outside of the foundation in this case. \n  6x4 \n  Foundation=6x4 grid illustration. \n  In Tiberian Sun, 6x4 produces an unusual shape. The foundation is shaped like a rectangle, but with three empty cells at the southwest side. It was used for the Scrin Ship and probably coded to match the building art. \n  0x0 \n  Foundation 0x0 works a bit differently from the others as well. Such structures are completely immune to normal weapon damage and thus cannot be destroyed in the standard way. They however are vulnerable to weapons whose warhead has Temporal=yes . 0x0 structures do not occupy physical space, which allows units to move over the cell one of these structures was placed on. They also display their appropriate UIName strings if the cursor is hovered over the cell the structure was placed on. Apart from this, they function pretty much like structures with normal foundations, although the AI has some issues handling them ↓ . \n  WARNING: 0x0 buildings do NOT expand the base even when BaseNormal=yes ! \n  Bugs/Side-Effects/Unexpected Limitations \n  This flag is read from art(md).ini twice: from section you specified in rules as [object]->Image , and from simply [object] , and the second one overrules the first if present. This causes weird behaviour, like setting \n  [GAYARD]\nImage=NAHAND \n  in rules still requires a 4x4 Foundation to place, contrary to what logic dictates - you need to remove the Foundation flag from GAYARD to get it to use NAHAND's one. \n  AI Treatment of Foundation 0x0 \n  The AI is apparently stupid enough to think that 0x0 structures don't actually exist on the battlefield, and continues to build more and more of them instead of just one. \n  Construction Yards \n  The AI seems to have a problem using a Construction Yard with any Foundation smaller than 2x2, it will deploy the construction yard but will not build anything. \n  Weapons Factories \n  The preferred exit point for a unit exiting a Weapons Factory is hardcoded to be the 8th and 11th cells in TS and RA2/YR respectively (counted from the building origin by increasing X, then Y). \n  Ares's Custom Foundations \n  Ares introduced custom foundations with version 0.1. Building Foundations can now be any shape and size, not just the few predefined options previously available. For example, you can now recreate the old Red Alert Repair Depot foundation. The INI coding is rather complex, so instead of writing it manually, it’s recommended to use the Custom Foundation Generator developed by Renegade. \n When creating foundations, don’t forget to create the outlines. \n  New Values and Flags \n  Foundation=custom ; Initiates the custom foundation logic. Foundation.X ; Length of the foundation along the X axis. Foundation.Y ; Length of the foundation along the Y axis. Foundation.# ; Replace # with an integer starting from 0. The coordinates of each cell in the foundation. FoundationOutline.Length ; The 'perimeter' of the foundation's outline. FoundationOutline.# ; Replace # with an integer starting from 0 up to ( FoundationOutline.Length - 1). The coordinates of each cell in the foundation's outline. \n  Sample Code \n  The code below represents a foundation in the form of a cross. \n  Foundation = Custom\nFoundation.X = 5\nFoundation.Y = 5\nFoundation.0 = 1,0\nFoundation.1 = 0,1\nFoundation.2 = 1,1\nFoundation.3 = 2,1\nFoundation.4 = 1,2\nFoundationOutline.Length = 16\nFoundationOutline.0 = 0,-1\nFoundationOutline.1 = 1,-1\nFoundationOutline.2 = 2,-1\nFoundationOutline.3 = -1,0\nFoundationOutline.4 = 0,0\nFoundationOutline.5 = 2,0\nFoundationOutline.6 = 3,0\nFoundationOutline.7 = -1,1\nFoundationOutline.8 = 3,1\nFoundationOutline.9 = -1,2\nFoundationOutline.10 = 0,2\nFoundationOutline.11 = 2,2\nFoundationOutline.12 = 3,2\nFoundationOutline.13 = 0,3\nFoundationOutline.14 = 1,3\nFoundationOutline.15 = 2,3 \n  Notes \n  Weapons Factories are hard-coded to use the unit exit paths from the original game so changing the foundation for these buildings is not recommended. \n The Custom Foundation Generator located with the Renegade Project Network is incompatible with Google Chrome, and results in gibberish. Be advised."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RadarColor",
      "value_type": "Color",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies an override to the color, in 16-bit RGB, that this overlay will be displayed as on the players radar map. Appears to have little or no effect as the game has an internal palette from which it assembles the radar display."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsAnimated",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and specifies whether or not this terrain object comprises of several frames which are used to animate the object. This is used to animate Tiberium/Ore Trees. This also forces the object to use UNISNO.PAL palette ."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AnimationRate",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the rate, in frames per second, that this terrain object animates if it has IsAnimated=yes set."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AnimationProbability",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the probability, on a scale of 0.000 to 1.000, that this object will animate through its SHP sequence rather than just display the first frame if it has IsAnimated=yes set."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TemperateOccupationBits",
      "value_type": "int",
      "default_value": "7",
      "adds_to_list": "",
      "desc": "This flag determines if and how a 1x1 TerrainType object allows InfantryTypes to occupy 1 its cell. The values and their effects are listed below: \n  Value Effect 0 Allows occupation of all three corners , south, east, and west 2 1 Allows occupation of south and west corners 2 Allows occupation of south and east corners 3 Allows occupation of only south corner 4 Allows occupation of east and west corners 5 Allows occupation of only west corner 6 Allows occupation of only east corner 7 No occupation allowed >7 The above pattern repeats itself. \n  Negative values \n  Negative values have the above pattern reversed. In other words, TemperateOccupationBits=-1 is the same as TemperateOccupationBits=7; Infantry cannot occupy any corner. TemperateOccupationBits=-2 is the same as TemperateOccupationBits=6; Infantry can only occupy the east corner. And so on. \n  See Also \n  Cell Spots SnowOccupationBits \n  Footnotes \n  1 ↑ InfantryTypes are unique in that they can move between and occupy subunits of a map cell . \n  2 ↑ In Tiberian Sun through Yuri's Revenge , infantry can never actually occupy the north corner, only move through it."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SnowOccupationBits",
      "value_type": "int",
      "default_value": "7",
      "adds_to_list": "",
      "desc": "This flag determines if and how a 1x1 TerrainType object allows InfantryTypes to occupy 1 its cell. The values and their effects are listed below: \n  Value Effect 0 Allows occupation of all three corners , south, east, and west 2 1 Allows occupation of south and west corners 2 Allows occupation of south and east corners 3 Allows occupation of only south corner 4 Allows occupation of east and west corners 5 Allows occupation of only west corner 6 Allows occupation of only east corner 7 No occupation allowed >7 The above pattern repeats itself. \n  Negative values \n  Negative values have the above pattern reversed. In other words, SnowOccupationBits=-1 is the same as SnowOccupationBits=7; Infantry cannot occupy any corner. SnowOccupationBits=-2 is the same as SnowOccupationBits=6; Infantry can only occupy the east corner. And so on. \n  See Also \n  Cell Spots TemperateOccupationBits \n  Footnotes \n  1 ↑ InfantryTypes are unique in that they can move between and occupy subunits of a map cell . \n  2 ↑ In Tiberian Sun through Yuri's Revenge , infantry can never actually occupy the north corner, only move through it."
    },
    {
      "category": "TerrainTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "YDrawFudge",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines an offset, in pixels, to apply to this TerrainType 's image on the Y (vertical) axis. Positive values move the image down on the screen and negative values move it up. This also affects how the object is drawn in relation to other objects, with lower values moving it to a higher render layer. \n  See also \n  YDrawOffset"
    },
    {
      "category": "AbstractTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Name",
      "value_type": "string(48 symbols)",
      "default_value": "ID",
      "adds_to_list": "",
      "desc": "On Houses / Countries / ObjectTypes / SuperWeaponTypes / TeamTypes \n  Plain-text name of this object. Was used in games prior to Red Alert 2 to output the object's name. It is now largely superceded by UIName , as an approach with strings makes for easier localization. \n In Tiberian Sun , cameos are without text. Name is written on these by the game. \n Note that Final Alert 2 does not use Name to determine the names of TechnoTypes , but UIName as well like the game. \n Name strings are truncated to 23 characters maximum regardless of how long of a string you enter. \n  In [ General ] \n  As with UIName , there is a Name flag at the beginning of the [ General ] section. Yet again, it seems to be of no use, however The Guide mentions how it was supposedly possible to use several rule*.ini (rule1.ini, rule2.ini, ...) files in RA , and then to differentiate between them by name. This was, however, never seen in use and was probably dropped in favor of differently named, overriding INIs. \n  In [ Basic ] \n In maps, this flag specifies the map name as shown in the game. (In RA2/YR, .map maps ignore this value and take their name from the mission.ini or PKT files.)"
    },
    {
      "category": "AbstractTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UIName",
      "value_type": "string(31 symbol)",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Contents 1 On Infantry/Vehicle/Aircraft/Building/SuperWeapon Types / Countries 2 In [ General ] 3 Examples 3.1 #1 3.2 #2 \n  On Infantry/Vehicle/Aircraft/Building/SuperWeapon Types / Countries \n  Specifies the (case-insensitive) name of the CSF string which contains this object's display name. \n  In [ General ] \n  Seems to have no effect. \n  Examples \n  #1 \n  [E1]\nUIName=Name:E1 \n  Meaning: If the game is in any situation asked to output the name of the unit \"E1\", it will respond with whatever is put in Name:E1 in ra2(md).csf - \"GI\", in this case. \n  #2 \n  According to the example below, all [PTROOP] s will be named \"Psi Commando\" in the game."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Pip",
      "value_type": "Pip",
      "default_value": "",
      "adds_to_list": "",
      "desc": "This flag specifies the graphical representation to use for an infantry loaded into a vehicle with PipScale=passengers , and Passengers and SizeLimit each set to positive integers greater than or equal to the Size of the infantry. These types of special graphics are referred to as \"pips\". \n Each value for Pip denotes a specific frame of pips2.shp to use for the first pip of a loaded infantry. If the Size of that infantry is greater than 1, it will be represented by that many pips, with each beyond the first drawn using the fourth frame of pips2.shp . \n  Accepted values \n  All values are case-insensitive. Any other values will simply be ignored and the default used instead. \n  Value Frame index empty (TS only) 0 green 1 yellow 2 white 3 red 4 blue 5 persongreen 7 personyellow 8 personwhite 9 personred 10 personblue 11 personpurple 12 \n  Pips representing infantry in other applications \n  The pip graphic to use for an infantry loaded into a building with PipScale=passengers , InfantryAbsorb=yes , and Passengers and SizeLimit each set to positive integers greater than or equal to the Size of the infantry, is always the fourth frame of pips.shp . Each infantry will only take up one \"passenger\" slot regardless of its Size . \n  The pip graphic to use for an infantry loaded into a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0, is specified by OccupyPip . Each infantry will only take up one occupant slot regardless of its Size . \n  See also \n  OccupyPip Pip Distortion Bug"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OccupyPip",
      "value_type": "Pip",
      "default_value": "",
      "adds_to_list": "",
      "desc": "This flag specifies the graphical representation to use for an infantry garrisoned within a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0. These types of special graphics are referred to as \"pips\". \n Each value for OccupyPip denotes a specific frame of pips.shp to use for the pip of a garrisoned infantry. Each infantry will only take up one occupant slot regardless of its Size . \n  Contents 1 Accepted values 2 Hardcoded in Red Alert 2 3 Pips representing infantry in other applications 4 See also 5 Notes \n  Accepted values \n  See Pip for a list of accepted values. Usually, only the ones starting with person are used for the occupy pip. \n  Hardcoded in Red Alert 2 \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n Red Alert 2 without the Yuri's Revenge expansion does not have OccupyPip as an infantry-specific control on this pip display. Instead, players controlling any country listed under GDI 1 are hardcoded to use the eleventh frame of pips.shp for garrisoned infantry. Nod 1 countries use the tenth frame instead. All other countries use the ninth frame. Pips representing infantry in other applications \n  The pip graphic to use for an infantry loaded into a building with PipScale=passengers , InfantryAbsorb=yes , and Passengers and SizeLimit each set to positive integers greater than or equal to the Size of the infantry, is always the fourth frame of pips.shp . Each infantry will only take up one \"passenger\" slot regardless of its Size . \n  The pip graphic to use for an infantry loaded into a vehicle with PipScale=passengers , and Passengers and SizeLimit each set to positive integers greater than or equal to the Size of the infantry, is specified by Pip . \n  See also \n  Pip Pip Distortion Bug \n  Notes \n  1 ↑ Note that \"GDI\" and \"Nod\" are residual from the Tiberian Sun engine and are treated as the Allied and Soviet sides respectively in Red Alert 2 ."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OccupyWeapon",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the weapon that an infantry with Occupier=yes should fire when occupying a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0. \n If the infantry's veterancy status is \"elite\", it will instead use the weapon specified by EliteOccupyWeapon . \n The range of any weapon fired by an occupant is overridden by [CombatDamage] → OccupyWeaponRange . Those weapons also get additional multiplers to Damage and ROF specified by [CombatDamage] → OccupyDamageMultiplier and [CombatDamage] → OccupyROFMultiplier , respectively. \n If a weapon fired by an occupant has OccupantAnim set to any valid animation , it will be displayed when the weapon is fired accordingly. \n  Contents 1 Automatic List Inclusion 2 Different implementation for Red Alert 2 3 See also 4 Notes \n  Automatic List Inclusion \n  Weapons used as values for this flag are automatically listed under the internal [Weapons] array. However no harm can be done by listing them manually. \n  Different implementation for Red Alert 2 \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n  For Red Alert 2 without the Yuri's Revenge expansion, which weapon each occupant fires is instead determined by the building itself. Primary is used by a player controlling any country listed under [Sides] → GDI 1 ; Secondary for [Sides] → Nod 1 . \n Interestingly, this akward implementation allows infantry to fire different weapons depending on the building they are occupying. \n  See also \n  Occupier EliteOccupyWeapon OccupyPip \n  Notes \n  1 ↑ Note that \"GDI\" and \"Nod\" are residual from the Tiberian Sun engine and are treated as the Allied and Soviet sides respectively in Red Alert 2 ."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EliteOccupyWeapon",
      "value_type": "WeaponType",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the weapon that an infantry with Occupier=yes and whose veterancy status is \"elite\" should fire when occupying a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0. \n If the infantry's veterancy status is \"green\" or \"veteran\", it will instead use the weapon specified by OccupyWeapon . \n The range of any weapon fired by an occupant is overridden by [CombatDamage] → OccupyWeaponRange . Those weapons also get additional multiplers to Damage and ROF specified by [CombatDamage] → OccupyDamageMultiplier and [CombatDamage] → OccupyROFMultiplier , respectively. \n If a weapon fired by an occupant has OccupantAnim set to any valid animation , it will be displayed when the weapon is fired accordingly. \n  Automatic List Inclusion \n  Weapons used as values for this flag are automatically listed under the internal [Weapons] array. However no harm can be done by listing them manually. \n  See also \n  Occupier OccupyWeapon OccupyPip"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoiceComment",
      "value_type": "vector<Sound>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this InfantryType is stood idle. This is hard coded to play at random intervals when that condition is met. Should be set to a valid entry from SOUND.INI. Since Red Alert, this has not been used, presumably to keep distractions to a minimum and to avoid confusing the player when hearing a CreateSound=."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeadBodies",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "This flag specifies a list of Animations , one of which is randomly played when an InfantryType is killed by a warhead with InfDeath=1 or InfDeath=2 . The animation will start to play once the Die1 or Die2 sub-sequences end. \n These animations will not play for InfantryTypes with NotHuman=yes . \n  Individual override \n  In Red Alert 2 , [General]→ DeadBodies can be overridden for individual InfantryTypes ↓ . \n  For InfantryTypes \n  Flag: DeadBodies File(s): rules(md).ini Values: Comma-separated list of strings . (Limited to: Animations ) Applicable to: InfantryTypes This flag acts as an individual override for [General] → DeadBodies ↑ . Automatic List Inclusion Animations used as values for this flag are automatically listed under the internal [Animations] array. However no harm can be done by listing them manually."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeathAnims",
      "value_type": "vector<Animation>",
      "default_value": "{}",
      "adds_to_list": "",
      "desc": "Defines which animation sequence should be used when this InfantryType is killed. This is used because InfantryTypes cannot have an Explosion= defined. The animation sequence must be listed in the [Animations] section of RULES.INI and defined in ART.INI. Note that this will over-ride the InfDeath= logic on any Warhead= that kills this unit as this animation will always be displayed when the unit is killed regardless of the type of death that has been inflicted. \n  Contents 1 Example 2 Bugs/Side-Effects/Unexpected Limitations 3 Automatic List Inclusion 4 See also \n  Example \n  [InfantryType]\n...\nDeathAnims=Anim0,Anim1,Anim2,Anim3......\n... \n  Each elements in this sequence corresponds to the assignment of [Warhead] > InfDeath=<int>\nlike \nInfDeath=0 → Anim0, \nInfDeath=3 → Anim3 \n If InfDeath= is too large, there is no corresponding element, then, the last one in the list will be played. So you can enjoy using InfDeath=114514 or other, As long as its corresponding element is still within the upper character reading limit of DeathAnims=. \n  DeathAnims=none will disable this logic and use the settings in [AudioVisual] as before. \n  If you want a sequence similar to the original effect, you can try this one: \n  [InfantryType]\n...\nDeathAnims=dummy,<die1>,<die2>,S_BANG34,FLAMEGUY,ELECTRO,YURIDIE,NUKEDIE,VIRUSD,GENDEATH,BRUTDIE\n... \n  Bugs/Side-Effects/Unexpected Limitations \n  Please note that!!! Because DeathAnims can only fill in Animations, the corresponding animation will also be played for InfDeath1 and InfDeath2, instead of [InfantrySequence] > Die1=<sequence> and Die2=<sequence> \n  Of course, you can solved this problem by using MakeInfantry to make another infantry die together with the original infantry.The effect looks good.(See the fourth item in See also for details) \n  DeathAnims has some other effects: \n  First, you can add death animation without any extension patch, such as Ares. For InfDeath=5, the old theory was that the game would always use the second one in the [Animations] list, rather than using statements like [AudioVisual] > InfantryNuked=<animation> (unless you use Ares.  Ares can allow you to use the [AudioVisual] > InfantryElectrocuted=<animation>). \n  However, if you use DeathAnims, it will normally use the sixth item in this list instead of the second item in the [Animations] list, that is, you can define ElectrocutedDeath through DeathAnims! \n  The animations generated by DeathAnims all have their owner. They can remap their owner colors like InfDeath9, and generate BRUTE with their owner House. However, DeathAnims will use the owner of the dead Infantry, that is, the Infantry you generate through DeathAnims belongs to the original owner of the dead Infantry, so it cannot complete replace the original InfDeath9. Of course, maybe this is just right to meet your design needs. If you use Ares, you can add MakeInfantryOwner=killer on animation to solve this problem, so that the generated infantrytype belongs to the house of the killer. \n  Automatic List Inclusion \n  Animations used as values for this flag are automatically listed under the internal [Animations] array. However no harm can be done by listing them manually. \n  See also \n  InfDeath Sequence MakeInfantry"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Cyborg",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines whether an infantry will behave like a cyborg, rather than a normal soldier. This includes the loss of its legs when the cyborg is damaged heavily. During this process it regains 25% of its health, but it can only crawl from now on. The cyborg uses the prone sequence variants to create this effect. \n Once a cyborg is crawling it can still be repaired back to full health, though its legs stay lost. Destroying a crawling cyborg finally kills it. \n Damaging or destroying a cyborg displays the [General] → InfantryExplode= animation. \n If [CombatDamage] → BerzerkAllowed=yes is set, the cyborg can go berzerk if it is damaged. In Red Alert 2 and Yuri's Revenge the berzerk ability is not working, however, through AI Scripting, this can be re-enabled (see AI/ScriptActions for more info). \n Cyborg logic does not work well together with deployable infantry, because the cyborg uses its prone status to indicate it has no legs and deploying and undeploying clears this."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NotHuman",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "NotHuman =yes makes an InfantryType always use the sub-sequence specified by Die1 when it is killed, regardless of the value of InfDeath on the warhead that kills it. It also prevents the animations specified by DeadBodies from being displayed upon the unit's death. \n This can be overridden if the InfantryType has animations specified by DeathAnims , as these take precedence over all other death animations. \n In unmodded Red Alert 2 , NotHuman =yes is used for animals like the Alligator and the Cow to keep them from displaying death animations like the one specified by FlamingInfantry , since those are only suitable for human-shaped InfantryTypes. \n Unfortunately this also means that these units cannot have a variety of death animations. \n  See also \n  Sequence"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EnterWaterSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeaveWaterSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Fearless",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this InfantryType should stay stood up or go 'prone' when attacked, regardless of whether or not it has a Prone= section to its ART.INI sequence. If you use the special case logic for cyborgs by adding Cyborg=yes to this unit, you should also have Fearless=yes  set as together the flags dictate that the prone sequence is used instead of the standing and walking frames when the cyborg is badly damaged. TIP: if you are not using this on cyborg type units, then combining this tag with Fraidycat=yes creates a unit that never unpanics - it will continue to run around for ever in it's Panic= sequence if attacked."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Fraidycat",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this InfantryType should 'run away' using its Panic= sequence as defined in ART.INI instead of going prone when attacked. This tag also makes the unit wander around aimlessly."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Infiltrate",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this infantry unit will be able to enter enemy structures. \n  Functions \n  Red Alert , Counterstrike and Aftermath \n  In Red Alert, Infiltrate=yes is required for infantry units that will either capture, spy, or plant C4s in enemy structures. \n  Tiberian Sun , Firestorm , Red Alert 2 and Yuri's Revenge \n In Tiberian Sun to Yuri's Revenge, the flag is required for an Agent to work properly. Without the flag set, the unit wont be able to infiltrate any structure. It is, however, not required for Engineer units or infantry with C4 ."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Ivan",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this InfantryType will display the \"IvanBomb\"/\"NoIvanBomb\" cursors when targeting other objects instead of the normal ones. Normally is used when the unit carries weapons using IvanBomb=yes Warheads. \n  If the attack target has Bombable=no, whether the infantry really use [IvanBomb] type weapons or not, they are not be able to be his targeted If an infantry has both Agent=yes and Ivan=yes, it will prefer to use weapon rather than infiltrate a structure. Even if the building has Bombable=no , infantry will also choose not to infiltrate"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Occupier",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not an infantry can garrison a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0. \n Infantry can only garrison buildings controlled by the same player or a neutral player. \n  See also \n  OccupyPip"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Assaulter",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can either be set to yes or no. This tag determines whether the infantrytype it is assigned to can enter garrisoned structures and clear the building of its occupants. The InfantryType will use its primary weapon to clear the building, and can be assigned to play a specific animation when assaulting, through the AssaultAnim = tag. \n The Infantry enters the building, then exits without a scratch. The occupants vanish without a trace. \n This tag is only used on Tanya in the last allied RA2 mission so she can enter the Kremlin. It was originally assigned to the Soviet Tesla Trooper and the allied Navy SEAL, however. \n If an infantry is an Assaulter, it cannot also be an Agent , Engineer (or Occupier with C4=yes) without confusing the game. (Regarding Occupier with C4=yes: It will still occupy vacant structures however not assault / clear out instead defaulting to using C4. Results testing with C4=no with Assaulter=yes makes the unit not actually assault / clear out either ) Pick your assaulter carefully!"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DetectionDistance",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Parsed, but has no effect in-game. \n  Specifies the range (in cells) that this object must be from an object with a PsychicDetectionRadius= set before it triggers a Psi Warning. Appears to be unused and for some reason may only work if attached to InfantryTypes."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HarvestRate",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "The rate at which this InfantryType harvests Ore. This is a special case applied to units which an object Enslaves=. \n (Yuri's Revenge Only)"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "C4",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this flag allows an InfantryType to instantly destroy enemy structures by entering them. Unlike Engineer=yes , the infantry isn't consumed, and can enter another building afterwards. \n  In Red Alert , Counterstrike and Aftermath \n  Infiltrate=yes must be set, otherwise C4=yes will not work. \n  In Tiberian Sun and Firestorm \n  Infantry with C4=no can still gain the ability to blow up buildings through VeteranAbilities=C4 or EliteAbilities=C4 . \n  In Red Alert 2 and Yuri's Revenge \n  Infantry with C4=yes cannot destroy buildings that have CanC4=no , but can still attack them with regular weapons. \n  C4=no has some impact on the movement area of the unit. \n  For example, if you specify any ground movement method other than Walk for a certain amphibious infantry's Locomotor type, when the unit stops on the water, it will directly die and leave an air wall behind \n  See also \n  Infiltrate VeteranAbilities EliteAbilities Locomotor"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Civilian",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this object is considered as being civilian regardless of its Owner= meaning it is not considered by default in unit threat scans. In map files, all objects with this set are tested for when the 'Civilians Evacuated' Event= is used if CivEvac=yes is set on the map (see the Map Editing Guide)."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Engineer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines an InfantryType that will spawn from a destroyed construction yard. However, Red Alert 2 (and Yuri's Revenge) do not distinguish between factions so the Engineer spawned will always be the infantry defined by this tag. \n  Flag: Engineer File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: InfantryTypes Determines whether this InfantryType has the properties of an engineer, which allows that infantry to enter any structure that has BridgeRepairHut=yes set, capture any structure that has Capturable=yes set and to repair any structures owned by that player. In Red Alert 2 and Yuri's Revenge , this also prevents infantry from using a weapon on any object, should they be given one, except if the weapon has a warhead with BombDisarm=yes set, in which case it will be able to target and successfully be used on objects which have an IvanBomb attached. Weapons of any kind can be force-fired on the ground."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TiberiumProof",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines whether infantry units are immune to the effect of Tiberium and can walk over Tiberium without taking damage. \n This does not prevent the infantry from 'transmogrifying' into a small Visceroid when killed by BehavesLike=Gas particles. \n Tiberium damage does not exist in Red Alert 2 and Yuri's Revenge , thus this tag is obsolete. \n  See also \n  SmallVisceroid TiberiumDeathToVisceroid TiberiumTransmogrify"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Agent",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In TS \n  Can be set to 'yes' or 'no'. An InfantryType with this and Infiltrate set to 'yes' gain the ability to enter enemy structures to various effects: \n If an Agent enters a... \n  Building with Factory = set to any valid type, the cameo of whatever object the owning player is currently constructing will be displayed to the infiltrating player above the selected building whenever the infiltrated building is selected by the infiltrating player. The cameo will however be displayed in a wrong palette, palette.pal (Red Alert used the same palette for cameos, and since this function is a left-over from RA, it is obvious that TS uses the same palette). Building with Radar set to 'yes', the infiltrating player will not only see all terrain the owner of the infiltrated building has yet discovered, but will also see all terrain that player discovers after his building was infiltrated. Through a bug in this logic, the terrain that is discovered by other players will also be seen. Building with Refinery set to 'yes', the player that owns the infiltrator unit can now see the financial situation (i. e. amount of credits) of the player whose refinery was infiltrated. Building with Power set to a number greater than \"0\" - Shows the power levels of the infiltrated player. \n  In TS, this is only used on the Chameleon Spy, which is only available to the player in one single player mission in the unmodded game. in this mission, the flag does not show its entire potential, because the mission objective is the infiltration of only one structure. The effect of the flag is actually much more extensive and might hint to a feature that the game designers possibly planned, but cut from the final game. \n Note that this logic may cause IEs when an InfantryType is an Agent and Engineer , C4 bomber or Thief at the same time, though this needs further testing. The Thief is the less likely to cause IEs in this respect. \n  In RA2 \n  Specifies that this InfantryType is a \"Spy\" and special \" infiltration \" logic should be used when it enters enemy buildings. \n  Notes \n  A unit cannot have both Agent=yes and Assaulter=yes - only one or the other. If an infantry has both Agent=yes and a weapon (primary or secondary) with IvanBomb=yes , it will prefer to use its weapon on buildings when ordered to attack, instead of infiltrating the building targetted. If an infantry has both Agent=yes and C4=yes , it will prefer to use C4 rather than infiltrate a structure. Even if the building has CanC4=no , infantry will also choose to use weapons to destroy it"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Thief",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In Red Alert , the Thief was an infantry unit that could enter a Refinery or Silo and steal 50% of the credits it contains. \n  In Tiberian Sun and Firestorm \n  The Thief flag was introduced in Tiberian Sun, and as its name and rules.ini description suggests, it was supposed to make the unit able to steal credits just like the Thief in Red Alert. Unfortunately, the flag does nothing at all. \n  In Red Alert 2 and Yuri's Revenge \n  Thief=yes allows the infantry to enter a refinery when used with Infiltrate=yes in RA2 but it does not steal any money. For the same in YR, the infantry is rejected from entering, so it cannot enter the buildings. Stealing credits is now achieved by using Agent=yes in RA2/YR. \n Thief=yes is also required for VehicleThief=yes to work correctly. \n  Bugs/Side-Effects/Unexpected Limitations \n In Yuri's Revenge at least, if Thief=yes is set on an InfantryType then that InfantryType will be unable to enter guard mode. For example, setting Thief=yes on an Attack Dog will prevent the Attack Dog from detecting and attacking disguised enemy units automatically."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VehicleThief",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether or not this InfantryType can enter an enemy VehicleType and capture it in a similar manner to an Engineer capturing a BuildingType . Also referred to as 'hijacking'. \n In Red Alert 2 and Yuri's Revenge , the InfantryType must also have Thief=yes set otherwise it will get the 'enter' cursor on the target VehicleType but will not, in fact, be able to enter it. Thief=yes also allows the InfantryType to enter enemy ore refineries, so the InfantryType also needs to be given Agent=yes and Infiltrate=yes (giving it full Red Alert 2 Spy capabilities), or Infiltrate=no \n NonVehicle=yes set on a VehicleType prevents a VehicleThief from capturing it, however this also invokes additional, possibly undesirable logic. \n  See also \n  Thief - this must be set to yes for VehicleThief=yes to work correctly, however there is a bug with Thief that you should be aware of."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Doggie",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Used on the Tiberium Fiend in Tiberian Sun . Among other things this tag controls the hunting behavior and increases the panic duration when in red health with Fearless=no even if Fraidycat=no . \n Doggie=yes infantry on a guard mission will turn south-east and sit down (go prone) on cells containing any type of Tiberium. Tiberian Fiend art must have Crawls=yes for this to work. To make the Tiberian Fiend not fire when prone, use FireProne=0,0,0 . \n If hurt severely, the unit will stop attacking and run for a nearby cell containing Tiberium. This makes the Tiberium Fiend regenerate health if TiberiumHeal=yes . Consider at least setting TiberiumProof=yes , so the Fiend is not hurt more when fleeing. \n When dying, infantry with Doggie=yes plays Die5 sequence instead of using FlamingInfantry or the electro animation, and they do not leave any DeadBodies behind. \n This tag is obsolete in Red Alert 2 and Yuri's Revenge. It is parsed but does not do anything."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Deployer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether or not this InfantryType can deploy. \n The infantry Sequence used by this InfantryType should specify the SHP file frames to use for its various deploy animations. \n  See Also \n  DeployFire DeploySound UndeploySound UndeployDelay DeployedCrushable"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployedCrushable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "InfantryTypes with DeployedCrushable=no set cannot be crushed when in a deployed state except by applicable TechnoTypes with OmniCrusher=yes . \n This flag is redundant if Crushable=no or OmniCrushResistant=yes are set; the logics from those flags overrides this one. \n \n  See Also \n  who crushes whom"
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UseOwnName",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set, this InfantryType will display its UIName when inside a Gunner=yes unit, instead of the generic \"Machinegun IFV\", \"Repair IFV\" labels. For more information, see Transforming Tooltips ."
    },
    {
      "category": "InfantryTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "JumpJetTurn",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether this JumpJet=yes infantry will be drawn using 8 facings and will be unable to fire while moving or turning. \n This setting is only respected if the infantry uses the Jumpjet locomotor. \n  See also \n  JumpJet"
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Crawls",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "FireUp",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the frames that the infantry's SHP file should use when this infantry is firing its Primary weapon or Secondary weapon on the ground standing still. \n In infantry art, specifies the number of frames to delay the weapon firing within the FireUp frames of the sequence. \n  See Also \n  Ready WetAttack FireProne InfantrySequences Sequence"
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "FireProne",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SecondaryFire",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SecondaryProne",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "InfantryTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Sequence",
      "value_type": "Sequence Name",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "FreeMCV",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if a player will get an MCV in a crate if they have no buildings but still have sufficient money to re-establish a base (i.e. contstruct an Ore Refinery). Applies only to multiplayer games."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "WoodCrateImg",
      "value_type": "OverlayType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This determines the OverlayType to use as an image for the wood crate. Can be any valid type from the [OverlayTypes] section."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "CrateImg",
      "value_type": "OverlayType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This determines the OverlayType to use as an image for the standard crate. Can be any valid type from the [OverlayTypes] section."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "WaterCrateImg",
      "value_type": "OverlayType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": null
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "HealCrateSound",
      "value_type": "Sound",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Sound effect to play when a 'Heal Base' crate is picked up. This can be any valid sound defined in SOUND.INI."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "CrateMinimum",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Mimimum number of crates to be on the map at any given time. This is normally one crate per human player although it will never be below this number."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "CrateMaximum",
      "value_type": "int",
      "default_value": "255",
      "adds_to_list": "",
      "desc": "The maximum number of crates which can be on the map at any one time. For internal table reasons and stability, I recommend sticking with the default value of 255."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "CrateRadius",
      "value_type": "float",
      "default_value": "640",
      "adds_to_list": "",
      "desc": "The radius, in cells, that crate powerup bonuses (e.g. armor or speed) will affect."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "CrateRegen",
      "value_type": "float",
      "default_value": "10",
      "adds_to_list": "",
      "desc": "Average time, in minutes, between which random crate generation occurs."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "UnitCrateType",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Can be used to specify the unit which a player gets from a crate. If this is set to 'none' then the game will pick a unit randomly from all of those units which do not have CrateGoodie=no set in their entry. This means that you do not have to put CrateGoodie=yes in a units entry to render it eligible to be a crate goodie."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "SoloCrateMoney",
      "value_type": "int",
      "default_value": "2000",
      "adds_to_list": "",
      "desc": "Amount of money to give a player from a money crate in the single player campaign."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "SilverCrate",
      "value_type": "Powerup",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "The type of powerup found in single player campaign games. This can be any valid type from the [Powerups] section."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "WoodCrate",
      "value_type": "Powerup",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Type of crate powerup for the standard wood crate in the single player campaign. This can be any valid type from the [Powerups] section."
    },
    {
      "category": "CrateRules",
      "filename": "Rules(md).ini",
      "section": "[CrateRules]",
      "key": "WaterCrate",
      "value_type": "Powerup",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Image",
      "value_type": "string (31 symbol)",
      "default_value": "Object's ID",
      "adds_to_list": "",
      "desc": "Specifies the section from art(md).ini which contains this object's graphical representation parameters such as cameos, firing offsets, and the like.\n(See also How The Engine Uses Files .) \n  On Tiberiums \n  Flag: Image File(s): rules(md).ini Values: Unsigned integers : All non-negative whole numbers from 0 to either 32767, 2147483647 or 4294967295. Default: ? Applicable to: Tiberiums This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. Depending on the value given (0 to 4), the game will use a certain index in the OverlayTypes array, plus the following 11 entries. in TS Image=0 and Image=1 will use OverlayType index #102. Image=2 will use OverlayType index #28 and will only use that one entry, it is hardcoded to use only one entry. Image=3 will use OverlayType index #127. Image=4 will use OverlayType index #150. In YR Image=2 will use OverlayType index #27 and will only use that one entry, it is hardcoded to use only one entry. Image=3 will use OverlayType index #127. Image=4 will use OverlayType index #147. All other values will use OverlayType index #102. On Animations and other objects in art(md).ini Flag: Image File(s): art(md).ini Values: Strings : Normal text. (Limited to: art(md).ini sections) Default: same as section name Applicable to: BuildingTypes , Animations When used in art(md).ini, this flag also refers to an art(md).ini section as well, but it only uses the referred section to derive a filename of the SHP file to use. This flag does not work on InfantryTypes, VehicleTypes and AircraftTypes in art(md).ini sections. This is evident by looking at the following code snippets from unmodded artmd.ini: [CAML]\nImage=JOSH\n \n[BFRT]\nImage=SREF"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AlphaImage",
      "value_type": "string (31 symbol)",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Contents 1 About Alpha Images 2 Bugs/Side-Effects/Unexpected Limitations 2.1 Limitations 3 Using Alpha Images 4 The Alpha Image Palette 5 Examples 6 Related files 7 See also \n  About Alpha Images \n  Simple lightpost test, using the original alphatst.shp \n  Alpha images are a very nice lighting feature used in Tiberian Sun , but left unused in Red Alert 2 and Yuri's Revenge . Alpha images are grayscale SHPs that are attached to, for example, a lightpost. If one is attached to an object, the object automatically starts emitting light, with the brightness of the light at a given pixel determined by the index number of the corresponding pixel of the alpha image. In other words: The light is modeled after the image and its brightness is defined by the brightness of the pixels. This allows a total customization of the light's shape. \n \n  Bugs/Side-Effects/Unexpected Limitations \n  Comparison with standard lights Benefits Drawbacks No lag at all . \"Tiled\" lights cause lag when placing them down, overlapping, destroying, etc. Alpha images do not. Only affects brightness, not coloring. Looks much better than the standard \"tiled\" light. Remains active even when the owner object is powered down, or when 'Turn off building' map action is applied. Customizable shape/amount/area of effect. Is known to cause building selection bracket discoloration, as well as discoloration of line trails. 1 \n \n  1 ↑ These are, however, barely visible, and usually don't affect your perception of the game. \n  Limitations \n  This light does not follow around moving objects. So while it is possible to create shiny headlights for Grizzly Tanks, the light itself will be left behind where the Grizzly was spawned - while the Grizzly moves around the map just as always. Cannot be animated. \n  Using Alpha Images \n  Using an alpha image is fairly easy: First of all, you need the actual image. Create it, turn it into an SHP, and store it your expand(md)##.mix. Once you have that, just put AlphaImage=yourAlphaImageFileName (without the .shp extension) on your object, and everything should be fine. \n The original, unused, lightpost alpha image should be called alphatst.shp, and is included in the game. It seems, however, to be wrongly named (sibmlr.shp). A correctly named alphatst.shp can be found at the bottom of this page. \n Note : AlphaImages should be saved using Compression 1, like the mouse cursors, to work properly. \n A note on XCC Mod Creator Alpha images seem to get corrupted when read from an ecache*.mix. Since XMC automatically puts SHPs in that file, you have to abuse a category like Video to have your alpha image(s) placed directly in the game directory. As long as it doesn't end up in ecache*.mix, there's no problem using alpha images with XMC. \n  The Alpha Image Palette \n  Alpha images are normal SHPs, but they do not have an associated palette. Rather, their color index is mapped to brightness values, making index #127 neutral, i.e. no light change, and #128-#255 gradually becoming brighter, with #255 being the brightest. The best way to illustrate this is to use a greyscale palette from black (index 0) to white (index 255) (see here ) - the brighter the color is, the brighter the light will be. Using any color below #127 apparently requires Compression 1 to work properly, otherwise crashes and/or distortions will happen. \n  Examples \n  LOOK DADDY, NO LAG! \n  The most prominent example of alpha image usage is DCoder's \"LOOK DADDY, NO LAG!\" screenshot. Other screenshots to note are Renegade's alpha test screenshots, illustrating not only how good correct alphas can look ingame, but also what happens if you use index 126 and below (without using Compression 1). Important to note here is that the full-palette screenshot was taken on Arena, after the same image had crashed the game to desktop (just by scrolling to where it was) on Bay of Pigs. \n  Image used as SHP Ingame screenshot Image used as SHP Ingame screenshot Everything can be used as AlphaImage! Darkening works - have a look! download here http://www.ppmsite.com/forum/viewtopic.php?t=33068 \n  This section is rather small and research-centered; if you have more, actual-mod-screenshots, please add them. \n  Related files \n  Grey scale palette, JASC format Grey scale palette, RA2 format Original alphatst.shp, correctly named \n  See also \n  (dead link) Thread on C-GEN including ecache*.mix problematic discovery \n  Tiled light specific flags: \n  LightVisibility LightIntensity LightRedTint LightGreenTint LightBlueTint"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CrushSound",
      "value_type": "Sound (128 symbols)",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound this object makes when it is crushed. The object must have Crushable=yes set and the sound must be a valid entry from the [SoundList] in SOUND.INI."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AmbientSound",
      "value_type": "Sound (128 symbols)",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this object is in existence on the map. This should be set to a valid entry from SOUND.INI and is usually one of the 'ambient' type sounds which loops continually for as long as the object exists. This is used as a 'background' effect and is utilized on the Naval Yards to give the impression of waves on the water and also on the Cow (although on the Cow, the VoiceComment= statement could have been used to the same effect)."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Crushable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether or not this object can be crushed by a unit with Crusher=yes . The crushing unit must have a MovementZone that allows it to move onto the crushable object. \n This value does not affect OmniCrusher s for it will crush anything except units with OmniCrushResistant=yes set. \n  Bugs/Side-Effects/Unexpected Limitations \n TerrainTypes (e.g. trees) with Crushable=yes can be crushed like any other object, but with some visual bugs/limitations. When crushed, the terrain object becomes passable, but its sprite lingers on the map until the view is \"refreshed\" (for example by moving the camera away from the object and back, or by changing map lighting). In addition, vehicles do not tilt when crushing TerrainTypes. See Also \n  who crushes whom"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Bombable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether or not this object can be attacked by InfantryTypes that have Ivan=yes set."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NoSpawnAlt",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If AltImage is set on this VehicleType then the vehicle will use a different image when it runs out of spawns. Examples include the Dreadnought , Destroyer , and V3 Rocket Launcher . The image is internally stored in the same memory buffer as the turret so a unit cannot have both a turret and an alternate image. The AltImage filename is derived from the normal Image by suffixing it with WO (\"without\"). For example, the Destroyer ( DEST.vxl ) has an alternate image of DESTWO.vxl . AltImage only works on voxel-based units. \n  In Ares 3.0, it can be used for vehicles with turret. \n  This will cause an Internal Error if set on a vehicle that does not have the ability to spawn objects. \n  Bugs/Side-Effects/Unexpected Limitations \n  these units always show **WO.vxl when attacked by Temporal weapons. \n  This bug has been fixed in ares 3.0."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AlternateArcticArt",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Although this flag is parsed on all object types, it only works properly on SHP art. \n Specifies if an alternate image should be loaded when the current map uses the snow theatre . If this is set, the game will add the A suffix to the filename (example: Image=SEAL will use SEAL.SHP on most theatres, and SEAL A .SHP on snow). Both images must have the same amount of frames and be defined in the art(md).ini file like all objects."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RadarInvisible",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used to specify whether or not this overlay appears on the players radar map. This acts as an override, as overlay is not normally visible on the radar screen (this is only used for Ore and Gems so the player can see where to find it). NOTE: despite its presence, the RadarColor= tag does not appear to get parsed when assigned to an overlay, thus you can't specify what color to use for it on the radar - only whether or not it appears there. \n \n  On *Types \n Flag: RadarInvisible File(s): rules(md).ini Values: ERROR – No value types set! Please edit this page and fix the Flag template ! This entry was copied from DeeZire's Red Alert 2 and Yuris Revenge INI Editing Guide for the sake of completeness. As it is not our intention to rip off DeeZire 's work, this article is subject to a re-write and update with the latest community knowledge. For further information, please read Inclusion of The Guide . Can be set to 'yes' or 'no' and determines whether or not this object is totally invisible on radar maps. Defaults to 'no'."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Selectable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Set Selectable=no to an object that should not be selected by the player. \n Usually this is combined with uncontrollable objects and/or spawns, to prevent the player from selecting objects that they should not have control over. Examples include the V3 Rockets and Dreadnought Missiles (the actual missiles, not their launcher units). \n  Bugs/Side-Effects/Unexpected Limitations \n  Adding Selectable=no to spawned AircraftTypes with aircraft Locomotor randomly causes them to fly over the map border instead of landing, and thus crashing the game. If that AircraftType has to land on it's spawner for reloads, sometimes it just starts hovering over the VehicleType and never fully lands. You'll have to move it first. With luck, you'll need to do that only once ot twice. \n  See Also \n  IsSelectableCombatant"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LegalTarget",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object can be targeted or fired upon. Acts as an over-ride as all objects in the game default to 'yes'. With this set, firing at the object is completely disabled although it will still be vulnerable to collateral damage (e.g. from nearby explosions with a CellSpread= set or from Radiation sites)."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Armor",
      "value_type": "Armor",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Damage dealt to player-owned TechnoTypes is divided by this value when the game difficulty setting corresponds with the Difficulty for which this flag is set. \n  For Houses \n  Flag: Armor File(s): rules(md).ini Values: Floating point values : Any decimal number (clearer range should be added in Template:Values ). Default: 1.0 Applicable to: Houses In Red Alert This is the multiplier to damage taken by TechnoTypes belonging to this country. Higher values (i.e. greater than 1.0) result in greater damage dealt per shot against TechnoTypes belonging to this country. Lower values (i.e. less than 1.0) result in less damage dealt per shot to TechnoTypes belonging to this country. In Tiberian Sun Damage dealt to all TechnoTypes owned by this House is divided by this value. Country Armor Modifiers in Red Alert 2 Though obsolete in Red Alert 2 , several other flags allow for even better control over Country armor modifiers: ArmorAircraftMult ArmorUnitsMult ArmorInfantryMult ArmorBuildingsMult ArmorDefensesMult For [Powerups] Flag: Armor File(s): rules(md).ini Values: X , Y , Z , S (For an explanation of this flag's parameters, see [Powerups] ) Default: unknown Applicable to: Powerups Values for S are Floating point values : Any decimal number (clearer range should be added in Template:Values ). If the unit collecting this powerup crate already has upgraded armor, the crate will give the effect defined by the Money powerup. Otherwise, all units within CrateRadius cells from this powerup crate gain upgraded armor if they haven't already. In Red Alert Strength of units with upgraded armor is multiplied by S . In Tiberian Sun Damage dealt to units with upgraded armor is multiplied by S . Upgraded units also get an alternate selection box if S is between 0.0 and 1.0. Fun Fact: The following code is from unmodded Tiberian Sun : Armor=33,ARMOR,2.0 This means that the armor powerup is actually detrimental, as it causes units to take twice as much damage. A value of 0.5 would yield the intended effect of halving damage received. In Red Alert 2 Damage dealt to units with upgraded armor is divided by S . For TechnoTypes Flag: Armor File(s): rules(md).ini Values: Strings : Normal text. (Limited to: hardcoded values ↓ ) Default: none Applicable to: TechnoTypes : AircraftTypes , BuildingTypes , InfantryTypes and VehicleTypes For TechnoTypes , this flag specifies the armor class of the object. Accepted Values Value Game Availability none flak plate light medium heavy wood steel concrete special_1 special_2"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Strength",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of 'hitpoints' this object has. When it reaches zero, the object is destroyed."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Immune",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object is immune to normal combat damage. BuildingTypes will still get 'damaged' if this is set to 'yes' and the structure has Powered=true when it is low on power (the rate at which that damage is inflicted is determined by the DamageDelay= statement). \n Weapons with the \"Temporal=yes\" flag can still kill immune units."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Insignificant",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Setting this tag makes the object ignored for scoring and killing purposes. Although still owned by the player, the object isn't treated as such for the purpose of winning condition. Furthermore, enemy attackers will ignore this object when scanning for targets. \n  In Yuri's Revenge \n  Units that are affected by a weapon with MindControl=yes are still considered valid targets by the AI. \n  Notes \n  Setting it to 'yes' for a building will make some Super Weapons unable to fire or fire incorrectly from it. Also, if the building has a dock , units won't be able to automatically dock on it, even if the structure is listed in their docking list. All objects with this tag ignore their BuildLimit , if they have any. Using an object with Insignificant=yes with a trigger event will cause the event to be ignored. Hence if the trigger is dependent on this event , it will not be able to spring."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HasRadialIndicator",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines if this structure has a radial indicator which is displayed when the player selects it. Prior to Ares 3.0, it was restricted to BuildingTypes which also have CloakRadiusInCells=, GapRadiusInCells=, SuperGapRadiusInCells=, or PsychicDetectionRadius= set as those properties determine the radius (range) of the indicator. With Ares, it can be used on any TechnoType, although units only support non-sweeping, non-concentric radial indicators. \n Editor's note: In the base games, the radial indicator is also restricted to a BuildingType's Primary (as can be seen with Yuri's Gattling Turret when it has HasRadialIndicator=yes).\nAlso, this doesn't do ANYthing when the weapon has an infinite range (Range=-2), as in: the indicator is not displayed at all. \n All of these limitations can be overcome by using RadialIndicatorRadius to specify the radius of the indicator. \n On BuildingTypes, the type of indicator can be controlled with ConcentricRadialIndicator . \n  See also \n  RadialIndicatorRadius ConcentricRadialIndicator"
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RadialColor",
      "value_type": "Color",
      "default_value": "0,0,0",
      "adds_to_list": "",
      "desc": "Specifies the color, in 24-bit RGB, of the 'radial indicator' on this BuildingType if it has one. Defaults to the owners house color."
    },
    {
      "category": "ObjectTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IgnoresFirestorm",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether or not this unit, aircraft, infantry, or projectile ignores active FirestormWall=yes sections. If no , the object is destroyed when it comes in contact with the Firestorm, otherwise it is allowed to pass unharmed. \n This tag is parsed in Red Alert 2 and Yuri's Revenge , but as Firestorm Walls cannot be activated, it serves no purpose. \n  See also \n  FirestormWall FirestormWarhead"
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "UseLineTrail",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "When this flag is set to yes, the game will draw a line following the path of this object. \n The LineTrail still has the same restrictions as Trailer , i.e. it can be used on AircraftTypes, or VehicleTypes with JumpJet=yes or VehicleTypes that spawn flying units. \n This flag requires the presence of both LineTrailColor and LineTrailColorDecrement on the same object, with valid values."
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LineTrailColor",
      "value_type": "Color",
      "default_value": "0,0,0",
      "adds_to_list": "",
      "desc": "This flag controls the colour of the LineTrail of this projectile, which is invoked by UseLineTrail . The values are standard RGB. \n  See also: \n  UseLineTrail LineTrailColorDecrement"
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LineTrailColorDecrement",
      "value_type": "int",
      "default_value": "16",
      "adds_to_list": "",
      "desc": "If this object has UseLineTrail=yes , then this flag defines the decrement (fadeout) of the Line Trail applied every frame. \n If the player is using the Low Detail Level, the value specified in this flag is multiplied by 2. \n  See also \n  UseLineTrail LineTrailColor"
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Theater",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Although this flag is parsed on all object types, it only works properly on SHP art. \n  Specifies if an alternate image should be loaded for the object based on the map's theatre . If this is set, the game will discard the SHP extension of the filename and use the same extension this theatre's terrain tiles use. The characters used for each theatre can be found on the Theatres page. \n In Red Alert 2 / Yuri's Revenge , Theater=yes essentially hardcodes the object to be a terrain object . Ore can spawn and grow in their Foundation range, and they can use the relevant SpawnsTiberium , IsAnimated , AnimationRate , and AnimationProbability flags associated with spawning ore. Furthermore, the game regards them as a 'tree' in terms of pathfinding such that the area in their foundation range becomes unbuildable and impassable to vehicles, but infantry can pass through them. Flags controlling infantry movement through the object, TemperateOccupationBits / SnowOccupationBits , apply. Objects with Theater=yes will furthermore not accept most art flags such as ActiveAnim or Palette ."
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "NewTheater",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Although this flag is parsed on all object types, it only works properly on SHP art. \n  This tag specifies whether or not the game uses special naming logic to get the objects image based on the theater of the map; .shp assets formatted with alternate snow art utilizing this tag should have their files organized such that the second letter of the file corresponds to the theater type. A for \"Arctic\" and G for \"Generic\". in a snow map, the game will look for files with the A prefix first, and if there are none, it will fall back to using files with the G prefix. In the games art and rules .ini entries, the A prefix is always used. \n For example, if one were to make a new refinery and made separate snow and temperate art for it, then the files would be named as so \n Temperate version: \n  mgrefn\nmgrefnbb\nmgrefn_a ; and so on \n  Snow version: \n  marefn  \nmarefnbb\nmarefn_a \n  And in the rules and art.ini entries for this building, the name [MAREFN] would always be used (whether or not there actually is the optional snow art files) \n Additionally, this tag means the unit palette is used to draw this image. \n In Tiberian Sun and Red Alert 2, the tag would only work if the first letter of the buildings name started with G, N, or C; Yuri's Revenge adds the functionality to Y prefix letter. File names can also use this logic for the other four theaters in YR, though doing so is mostly redundant as special art is typically not made for any theater besides snow.\nAres DLL expands logic onto all prefixes, not just G, N, C, Y. \n \n  See also \n  Theatres"
    },
    {
      "category": "ObjectTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Voxel",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This article or section is a stub . You can help ModEnc by expanding it . \n  A voxel, or volumetric pixel, is a three-dimensional analogy of a pixel. Voxel files end in \".VXL\".Voxels may be virtually any colour (assuming the colour is utilised in the palette of the game or voxel editor)and can use surface normals. Voxels may also be animated with the use of an HVA file, but there are limits in the Tiberian Sun and Red Alert 2 engines as to what unit types may use certain types of animations. For example, in Tiberian Sun, an aircraft type may not utilise a turret animation. \n Voxels are usually used to render vehicles and turrets in the Tiberian Sun and Red Alert 2 engines, whereas SHP files are generally used for infantry units and buildings. This is due to hard-coded restrictions in the game engines, and also because SHPs are usually of a higher in-game quality than voxels. \n It is worth noting that units which are comprised of voxels will tilt while walking up a slope in the aforementioned engines, whereas an SHP unit, such as the Titan or Wolverine, will not. Voxels are generally used for the turrets of SHP buildings such as the Sentry Gun or Grand Cannon, because they allow 360 degree rotation of the turret, without the need for the facings that would be used in an SHP. \n  Format \n  [insert more info here, re: sections and stuff] The individual voxels (in terms of volumetric pixels) are stored as a series of five values in WW's voxel format: The X, Y and Z position of the voxel, the color index, and the normal index. The what color which the color index stands for depends on the palette the voxel is displayed with; what angle a normals value indicates depends on the normals generation and the normals array value for the index. \n Voxels cannot be larger than 255x255x255, and have severe graphical problems, such as artifacting and palette errors at such a length on any axis 1 .  This could be a major setback for some types of voxel, such as especially long ships or aircraft, but not a big problem with most voxels which are generally no larger than 100 on the z axis. \n In addition to the .VXL file, all voxels must have a .HVA file, which defines the location the voxel occupies in 3 dimensional space relative to 0 on the X,Y,Z axes.  THe HVA is also used to line up turrets and barrels vertically and change the point around which the voxels rotate, and to animate multi-sectioned voxels.\nWithout an HVA, voxels cause an internal error. \n Multi-sectioned voxels are made up of a hierarchy of voxels within on .VXL  This is most obvious in Tiberian Sun's Mammoth MK2, which was a singe .VXL file comprising the body, each upper and each lower leg, and each foot, for a total of 13 voxel objects in the file.  This was paired with a more involved HVA that usual to give the unit a walking animation.  The same process is used on a much smaller scale in the construction of helicopter units for RA2/YR, where the rotors are a separate section but not a separate file, making it easy to animate.\nThere are no other examples in the vanilla games, but there have been a substantial number of multisectioned voxels released in the modding community. \n  See also \n  Normals Brief explanation of how WW's voxel format looks like Perfect normals discovery thread \n  Footnotes \n  1 ↑ Only conclusively tested in Tiberian Sun, but there is no reason to conclude that it is not a problem in RA2 - might require testing \n  NewPP limit report\nCached time: 20231028184053\nCache expiry: 86400\nDynamic content: false\nCPU time usage: 0.019 seconds\nReal time usage: 0.036 seconds\nPreprocessor visited node count: 83/1000000\nPreprocessor generated node count: 338/1000000\nPost‐expand include size: 1526/2097152 bytes\nTemplate argument size: 450/2097152 bytes\nHighest expansion depth: 5/40\nExpensive parser function count: 0/100  Transclusion expansion time report (%,ms,calls,template)\n100.00%   20.472      1 -total\n 42.91%    8.785      1 Template:Meanings\n 30.29%    6.202      1 Template:Fn\n 26.72%    5.470      2 Template:HorizontalBar\n 14.96%    3.062      1 Template:Stub\n  9.96%    2.039      1 Template:Fnl\n  9.70%    1.985      1 Template:Sup\n  9.41%    1.926      1 Template:Arr\n  9.32%    1.907      2 Template:Clr"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CrateGoodie",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether the VehicleType is able to be procured as a crate goodie. Also requires UnitCrateType=none to be set in the [CrateRules] section; though this is true by default. \n  Note \n In Red Alert 2, any VehicleType with Naval=yes should have CrateGoodie=no \n set. While the logic works with naval units, maps with no water invariably lead to an Internal Error when a naval goodie is procured."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployToFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set on a vehicle, the vehicle will never fire its weapons. Instead, when acquiring a target, it will approach that target until it is within range of that weapon from its attached weapons that would use against that target and then, instead of firing that weapon, deploy into the structure defined by its DeploysInto statement. Alternatively, if it IsSimpleDeployer , it will simple-deploy, becoming stationary and changing to its UnloadingClass , before firing its weapon. \n  Notes \n  It appears that vehicles on which this flag is set will also never autonomously acquire a target to attack. They will only acquire a target when retaliating against an attacker who is within the range of the weapon that they would use against that attacker, or when ordered to attack by the owning player/house. It is possible to give a building weapons that are entirely different from those of the vehicle it deploys from (or no weapons at all), which means that after transforming into a building, it may no longer have the necessary range, projectile characteristics or warhead to actually attack the target that it had acquired before deploying. This does not cause any errors or glitches and the building will simply 'forget' the attack command against that target. If a unit that has to DeployToFire is on a cell that does not allow the placement of the structure that the unit deploys into (for example because the cell holds ore) and the unit then acquires a target, it will look for nearby clear cells that it can deploy in, move there and then deploy. This is in contrast with the manual Deploy order, which simply fails to function if a unit is on a cell in which it cannot deploy. At least this happens if there are any clear cells from which its intended target would still be within range of its current weapon. It is uncertain what happens if no such cells are available. This bug can be avoided by using the Phobos If the target moves out of range of the intended cell while the unit is still en-route to deploy there, it seems to move to that cell regardless, and deploy there. (Unconfirmed) \n  See also \n  Deployer DeploysInto IsSimpleDeployer"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsSimpleDeployer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether or not this object is allowed to deploy to change its weapon (specified by the DeployFireWeapon tag on the unit) and its Image (taken from the unit specified by the UnloadingClass tag). If specified, the unit will be able to fire its' DeployFireWeapon normally when deployed. If a vehicle only has DeployFire , it will fire its' DeployFireWeapon directly at the ground underneath itself when deployed (although the weapon can also be fired at other targets by the unit's owner). \n The game will also play DeployingAnim when the unit is ordered to deploy or undeploy. Units which only have DeployFire will simply fire at the ground at their position when deployed and can be aimed at other targets and ordered to move as any other unit, while units which have IsSimpleDeployer will also be unable to move in this form, until ordered to deploy again. \n  Notes \n  If the unit is JumpJet=yes and has DeployToLand set, it will first turn to face the direction specified by [AudioVisual] → PoseDir= , and land to deploy only after. If the original vehicle has Turret=yes , but the UnloadingClass does not, the game will still try to look for a turret graphic corresponding to the UnloadingClass image when the unit deploys, and will use an invisible turret if it doesn't find one. If the original vehicle has Turret=no , but the UnloadingClass has Turret=yes , the turret image corresponding to the UnloadingClass image will still get loaded, but the unit itself will turn to face the target, with the turret fixed facing the same direction as the unit. \n  See also \n  Deployer DeployFire DeployFireWeapon DeployToFire DeployToLand DeploysInto"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Harvester",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this VehicleType should obey the rules for an Ore Miner. This is used for AI targeting/unit protection purposes and also indicates that this unit gains the Immune=yes ability if HarvesterImmune=yes is set in a map file. This case also applies if the 'Harvester Truce' option is enabled in a multiplayer game or HarvesterTruce=yes is set in the [MultiplayerDialogSettings] section although the Harvester Truce logic appears to be disabled in Red Alert 2. This tag also gives the unit a special 'weapon' which can be 'fired' at Ore to instantiate the mining process. \n  Under [IQ] \n Flag: Harvester File(s): rules(md).ini Values: ERROR – No value types set! Please edit this page and fix the Flag template ! This entry was copied from DeeZire's Red Alert 2 and Yuris Revenge INI Editing Guide for the sake of completeness. As it is not our intention to rip off DeeZire 's work, this article is subject to a re-write and update with the latest community knowledge. For further information, please read Inclusion of The Guide . Determines the IQ level required by a house before it will automatically replace lost Ore Miners. Note that although there is a similar statement for Aircraft=, this is residual from Red Alert and is not used in Red Alert 2 - other production/AI triggers control that."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Weeder",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In Tiberian Sun , when set on a \n  BuildingType this specifies that the structure stores veinhole weeds which are harvested by the corrosponding unit. VehicleType or InfantryType this specifies that the unit is able to 'harvest' veinhole weeds - the unit also \tneeds a Storage= value set. \n  It appears to have no effect on InfantryTypes, although it is used in the default rules.ini on [WEEDGUY], which is unbuildable and never appears in-game. \n In Red Alert 2 , veins are gone, but this tag still retains some function: Vehicles cannot dock with the structure set as their Dock if that structure has no docking-related function or only has DockUnload . Vehicles can dock with structures that have DockUnload set if both are also Weeder and the vehicle will then appropriately unload whatever it is holding, which can also be Passengers (however, these will not get passed into the structure, but simply unloaded next to it)."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsTilter",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies whether this VehicleType should be drawn tilted when driving on slopes or rocked by Rocker=yes or DirectRocker=yes warheads. Does not work on SHP objects."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CarriesCrate",
      "value_type": "boolean",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Determines whether or not this vehicle leaves a random powerup crate when it is destroyed. In skirmish/multiplayer, the crate will contain a random powerup; in singleplayer missions, the powerup is determined by WoodCrate . \n In addition, at least in Tiberian Sun singleplayer mission maps, this flag is subject to TruckCrate , unless the vehicle is a train , in which case it's subject to TrainCrate . This means that the unit will not spawn a crate if the map has TruckCrate=no ( TrainCrate=no in case of trains). \n  See Also \n  CrateBeneath"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TooBigToFitUnderBridge",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether this unit is forbidden from parking under a bridge. Attempting to park such a unit under a bridge will automatically move it away. \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n  Parking such a unit under a destroyed bridge will prevent the bridge from being repaired. DLPH lacks this, needs to be tested if preventing bridge repairs is a function of this flag or simply any VehicleType. Seems to work just fine on both voxel and SHP units. DZ note says it \" should only be used on voxel units \", however SQD has this and apparently works."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HalfDamageSmokeLocation",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, that a first smoke type particle system is displayed on this VehicleType when it is damaged to the extent that its health bar is yellow. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the unit."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UseTurretShadow",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Based on its description in art(md).ini , this flag would have enabled the use of turret shadow frames on a vehicle object shape . Unfortunately, this logic is defunct and the flag does nothing. \n If the vehicle shape has turret frames, the game expects the respective shadow frames to be present, but those frames are not actually drawn in-game."
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "WalkFrames",
      "value_type": "int",
      "default_value": "12",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "FiringFrames",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the number of frames in this unit's firing animation sequence. Only applies to SHP -based units. \n  See Also \n  StartFiringFrame FiringSyncFrame1 FiringSyncFrame2 StandingFrames StartStandFrame WalkFrames StartWalkFrame"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Passive",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object is considered 'passive', in other words it will not retaliate if attacked and will not conduct a threat scan or acquire targets."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MovementRestrictedTo",
      "value_type": "LandType",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Some units are restricted to certain terrains, say trains are restricted to railroad, ships are restricted to water, and some spawned aircraft are restricted to water(it affects only their landing). You can restrict other units to some kind of terrain, say to roads only if you so desired. To do so, use MovementRestrictedTo= with one of terrain types - Clear, Rough, Road, Water, Tiberium , Rock, Beach... \n  Bugs/Side-Effects/Unexpected Limitations \n  Trying to force two or more values will result in this logic breaking and not working for the unit. \n Example: \" MovementRestrictedTo=Clear,Rough \n \", \" MovementRestrictedTo=Clear, Rough \n \" or \" MovementRestrictedTo=Clear Rough \n \" will result in the unit just ignoring the limitation."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanBeach",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Supposed to be a special case to allow VehicleTypes with Naval=yes and MovementRestrictedTo=Water to move one cell off a water cell, in other words: onto the beach. \n Although first introduced in Red Alert 2 , it is only parsed but never used and thus it has no effects in any version of Red Alert 2 or Yuri's Revenge ."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SmallVisceroid",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The type of the unit to be created when TiberiumDeathToVisceroid=yes and infantry units either die of BehavesLike=Gas particles or of Tiberium damage if TiberiumProof=no . The units are owned by the first country of the side Neutral . \n If infantry can 'transmogrify', you have to set this tag or IEs will occur. \n SmallVisceroid is read in Red Alert 2 and Yuri's Revenge , but as there is no Tiberium damage, it is obsolete. \n  On VehicleTypes \n  Flag: SmallVisceroid File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: VehicleTypes Defines whether this unit is a small Visceroid. Visceroids randomly wander around on their own, are immune to EMP and Jellyfish , use attack animations, retreat to the nearest patch of Tiberium when damaged into yellow health, and have a few more special properties. Small Visceroids in particular merge into a single [General] → LargeVisceroid= if two units with SmallVisceroid=yes come within one cell range of each other. If you use this tag in Tiberian Sun , you have to set [General] → LargeVisceroid= to a vaild type, otherwise merging will result in an IE. In Red Alert 2 and Yuri's Revenge Visceroids will not retreat to patches of Tiberium. See also LargeVisceroid Jellyfish TiberiumProof TiberiumDeathToVisceroid TiberiumTransmogrify"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LargeVisceroid",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "The type representing the large Visceroid resulting from the merger of two small Visceroids that came within cell range of each other. \n In Tiberian Sun , this has to be set to a valid type if there are SmallVisceroid=yes units, otherwise merging will result in an IE. \n LargeVisceroid is read in Red Alert 2 and Yuri's Revenge , but as Visceroids will not merge, it is obsolete. \n  On VehicleTypes \n  Flag: LargeVisceroid File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: VehicleTypes Defines whether this unit is a small Visceroid. Visceroids randomly wander around on their own, are immune to EMP and Jellyfish , use attack animations, retreat to the nearest patch of Tiberium when damaged into yellow health, and have a few more special properties. Large Visceroids do not try to merge with other Visceroids. This can be used to trigger trains to move without needing map triggers, although they will be unstoppable. In Red Alert 2 and Yuri's Revenge Visceroids will not retreat to patches of Tiberium. See also SmallVisceroid Jellyfish"
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NonVehicle",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this VehicleType is not considered a vehicle. This is meant to prevent vehicles getting an 'enter' cursor over them when an InfantryType with VehicleThief=yes set is ordered to attack them (thus preventing them from being stolen). Appears to work correctly in Yuri's Revenge; use of this tag on a VehicleType appears to prevent: InfantryTypes with VehicleThief=yes set from hijacking them, survivors emerging from the unit if it is destroyed, and being repaired by repair weapons (Repair IFV's RepairBullet, for example). Service Depots and the like can still repair VehicleTypes with NonVehicle=yes."
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "StandingFrames",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DeathFrames",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DeathFrameRate",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Facings",
      "value_type": "int",
      "default_value": "8",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "StartStandFrame",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "StartWalkFrame",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "StartFiringFrame",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "StartDeathFrame",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "MaxDeathCounter",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "FiringSyncFrameX",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BurstDelayX",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Weapons that have a Burst greater than 1 fire that many times at short intervals (as opposed to firing them simultaneously). The delay between each burst shot is randomly selected from a range of 3–5 frames . BurstDelayX can be used to override this delay (in FS, this is a per-weapon property, in YR it has been turned into a per-unit one). \n The X should be substituted with an integer between 0 and Burst −2 (the game will only parse X from 0 to 3 inclusive). For example, if X is 0, the value represents the time in frames between the first and the second burst shots. \n  In Red Alert 2 and Yuri's Revenge \n  If any BurstDelay is omitted, it will inherit the value of the first numerically preceding one. \n For example, if Burst=3 , BurstDelay0=5 , and BurstDelay1 is not defined, it will inherit the value of BurstDelay0 , which is 5. In other words, each burst shot will fire in 5 frame intervals. \n In a slightly more complex example, if Burst=5 and BurstDelay2=10 (other BurstDelayX 's are not defined), burst shots 1 through 3 will fire in 1 frame intervals (the default behavior), however burst shots 4 and 5 will fire 10 frames after the preceding shot. \n  Notes \n  Setting BurstDelay=0 will remove any delay, allowing the bursts to be fired on consecutive frames. Interacts differently with unit shape animations depending on the unit type: On infantry , the firing animation sequence ( FireUp , FireProne , etc.) overrides BurstDelay . In other words, if the firing sequence lasts longer than the weapon's burst delay, the unit will play the full sequence regardless. It will fire again immediately after the animation sequence is over. On shape-based vehicle units without FiringSyncFrame2 , BurstDelay overrides the duration of FiringFrames . In other words, if the weapon's burst delay is shorter than the firing animation sequence, the animation will end prematurely (unless it's the last burst). Note that vehicle unit firing frames last for two time frames , so FiringFrames=2 equals BurstDelay=1 . On shape-based vehicle units with FiringSyncFrame2 , the firing animation sequence overrides BurstDelay ."
    },
    {
      "category": "VehicleTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AltImage",
      "value_type": "filename.shp",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This is used to specify the alternate image used by this unit when it is attacking. Applies only to SHP based units and should be a valid animation from the Animations list and be listed in ART.INI. . This remains residual from the Visceroid in Tiberian Sun. \n  This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. \n It is not known if the logic can work in Red Alert 2."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "MuzzleFlashX",
      "value_type": "XY",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the firing offset(s) ( FLH ) from the center of the structure for a BuildingType with CanBeOccupied=yes and CanOccupyFire=yes set, that are used for any infantry with Occupier=yes set when firing their OccupyWeapon / EliteOccupyWeapon from the building in question."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DamageFireOffsetX",
      "value_type": "XY",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Height",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": "Contents 1 In Art 2 In Rules 3 In Maps 3.1 [Header] 3.2 [RandomMap] 4 See also \n  In Art \n  In Art(md).ini , this flag is placed on BuildingTypes art entry and specifies how tall a building is. This influences how high JumpJets and AircraftTypes have to ascend to fly over this building. It also controls how high the health bracket is drawn above the building. \n  In Rules \n  In Rules(md).ini , this flag is placed on SmudgeTypes , and tells the game the amount of cells occupied by this SmudgeType along the Y axis (in map cell terms, meaning top-right -> bottom-left). \n NOTE: For some reason, for CASTL05A, St. Louis Stadium A, Height=6. \n  In Maps \n  [Header] \n  In the header of maps, this flag tells the game the length of its preview's Y-axis in pixels, i.e. its height in 2-dimensional image terms. \n  [RandomMap] \n  On saved random maps, Height also gives the \"height\" of the map in the sense of its length from north edge to south edge (i.e. diagonally from top-left to bottom-right). This is done on a scale from 1 to 5, with 1 signifying a small map, and 5 signifying a very large one. Presumably, this is done for automatic selection of maps in quick matches or something similar. (iow, so a user can select he would like to play on a \"large\" map, for example.) This value cannot be set manually - it is determined automatically by the Random Map Generator . \n \n  See also \n  Width Foundation"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "OccupyHeight",
      "value_type": "int",
      "default_value": "2",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Recoilless",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DoubleThick",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "\"If this is part of a building/anim set that double overlaps, which means that you should make it extra transparent when it gets chronoed out since there are two layers of transparency to go through\" - art(md).ini"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Flat",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "States if this building or animation lays flat on the ground. This flag helps the game's drawing logic in determining layers and where to draw it. \n For animations, this flag also moves the animation 3 pixels up on the Y-axis, and has code for disabling the animation's shadow (in TS animation shadows don't work anyway)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SiloDamage",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ChargeAnim",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IsAnimDelayedFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DelayedFireDelay",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ToOverlay",
      "value_type": "OverlayType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "When the flag ToOverlay= is used, it causes the building type to instead spawn the specified overlay type. This flag was used for walls in TS and RA2, but can also be used to spawn other overlay types. When used, a single instance of the overlay is spawned regardless of the art's Foundation = entry. However, it was not meant to be used this way; Overlay images do not render until the camera pans off and back onto the screen. When used with bridge overlays, the bridges do not perform as they should. When used with crates, the crates do not despawn and can be picked up repeatedly. Bizarrely, infantry units that have picked up any of the tainted crates will scatter whenever another tainted crate is picked up."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's ID",
      "key": "Foundation",
      "value_type": "Foundation",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines the number of cells a structure occupies, and the arrangement of those cells. \n  Contents 1 Accepted values 1.1 3x3REFINERY 1.2 6x4 1.3 0x0 2 Bugs/Side-Effects/Unexpected Limitations 2.1 AI Treatment of Foundation 0x0 2.2 Construction Yards 2.3 Weapons Factories 3 Ares's Custom Foundations 3.1 New Values and Flags 3.2 Sample Code 3.3 Notes \n  Accepted values \n  All values are case-insensitive. Any other values will simply be ignored and the default used instead; however Ares can be utilized to create custom foundations. The first number represents the cell-count along the NW-SE axis, the second along the NE-SW axis. \n  0x0, 6x4, 3x4, 4x4, 5x3, 2x5, 2x6, 1x5, 1x4, 4x3, 3x1, 1x3, 3x3REFINERY, 4x2, 3x5, 3x3, 3x2, 2x3, 2x2, 1x2, 2x1, 1x1 \n  3x3REFINERY \n  Foundation=3x3REFINERY grid illustration \n  3x3REFINERY \n is an unusual shape. While all other foundation values are rectangles, this one has an empty cell in the center of the third row. Albeit containing \"Refinery\" in the value string, this will not work for a Refinery because the harvester's docking point inside a refinery is hardcoded to be the second cell in the fourth row, which is outside of the foundation in this case. \n  6x4 \n  Foundation=6x4 grid illustration. \n  In Tiberian Sun, 6x4 produces an unusual shape. The foundation is shaped like a rectangle, but with three empty cells at the southwest side. It was used for the Scrin Ship and probably coded to match the building art. \n  0x0 \n  Foundation 0x0 works a bit differently from the others as well. Such structures are completely immune to normal weapon damage and thus cannot be destroyed in the standard way. They however are vulnerable to weapons whose warhead has Temporal=yes . 0x0 structures do not occupy physical space, which allows units to move over the cell one of these structures was placed on. They also display their appropriate UIName strings if the cursor is hovered over the cell the structure was placed on. Apart from this, they function pretty much like structures with normal foundations, although the AI has some issues handling them ↓ . \n  WARNING: 0x0 buildings do NOT expand the base even when BaseNormal=yes ! \n  Bugs/Side-Effects/Unexpected Limitations \n  This flag is read from art(md).ini twice: from section you specified in rules as [object]->Image , and from simply [object] , and the second one overrules the first if present. This causes weird behaviour, like setting \n  [GAYARD]\nImage=NAHAND \n  in rules still requires a 4x4 Foundation to place, contrary to what logic dictates - you need to remove the Foundation flag from GAYARD to get it to use NAHAND's one. \n  AI Treatment of Foundation 0x0 \n  The AI is apparently stupid enough to think that 0x0 structures don't actually exist on the battlefield, and continues to build more and more of them instead of just one. \n  Construction Yards \n  The AI seems to have a problem using a Construction Yard with any Foundation smaller than 2x2, it will deploy the construction yard but will not build anything. \n  Weapons Factories \n  The preferred exit point for a unit exiting a Weapons Factory is hardcoded to be the 8th and 11th cells in TS and RA2/YR respectively (counted from the building origin by increasing X, then Y). \n  Ares's Custom Foundations \n  Ares introduced custom foundations with version 0.1. Building Foundations can now be any shape and size, not just the few predefined options previously available. For example, you can now recreate the old Red Alert Repair Depot foundation. The INI coding is rather complex, so instead of writing it manually, it’s recommended to use the Custom Foundation Generator developed by Renegade. \n When creating foundations, don’t forget to create the outlines. \n  New Values and Flags \n  Foundation=custom ; Initiates the custom foundation logic. Foundation.X ; Length of the foundation along the X axis. Foundation.Y ; Length of the foundation along the Y axis. Foundation.# ; Replace # with an integer starting from 0. The coordinates of each cell in the foundation. FoundationOutline.Length ; The 'perimeter' of the foundation's outline. FoundationOutline.# ; Replace # with an integer starting from 0 up to ( FoundationOutline.Length - 1). The coordinates of each cell in the foundation's outline. \n  Sample Code \n  The code below represents a foundation in the form of a cross. \n  Foundation = Custom\nFoundation.X = 5\nFoundation.Y = 5\nFoundation.0 = 1,0\nFoundation.1 = 0,1\nFoundation.2 = 1,1\nFoundation.3 = 2,1\nFoundation.4 = 1,2\nFoundationOutline.Length = 16\nFoundationOutline.0 = 0,-1\nFoundationOutline.1 = 1,-1\nFoundationOutline.2 = 2,-1\nFoundationOutline.3 = -1,0\nFoundationOutline.4 = 0,0\nFoundationOutline.5 = 2,0\nFoundationOutline.6 = 3,0\nFoundationOutline.7 = -1,1\nFoundationOutline.8 = 3,1\nFoundationOutline.9 = -1,2\nFoundationOutline.10 = 0,2\nFoundationOutline.11 = 2,2\nFoundationOutline.12 = 3,2\nFoundationOutline.13 = 0,3\nFoundationOutline.14 = 1,3\nFoundationOutline.15 = 2,3 \n  Notes \n  Weapons Factories are hard-coded to use the unit exit paths from the original game so changing the foundation for these buildings is not recommended. \n The Custom Foundation Generator located with the Renegade Project Network is incompatible with Google Chrome, and results in gibberish. Be advised."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "MidPoint",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the frame in this animation where certain logics are executed. For example, craters , scorch marks , and fires are spawned at this point. \n By default, the game auto-detects the midpoint based on the largest frame in the shape file ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DoorStages",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DamagedDoor",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "TerrainPalette",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "GateStages",
      "value_type": "int",
      "default_value": "9",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PrimaryFirePixelOffset",
      "value_type": "XY",
      "default_value": "65535",
      "adds_to_list": "",
      "desc": "Determines the offset, in pixels, from this building's origin 1 to fire the building's primary weapon from. Expressed in X,Y format where X shifts the offset on the X-axis (positive values move the point to the right, negative values move to the left) and Y shifts on the Y-axis (positive values move the point down, negative values move up). \n Assumes the building has no turret . If the building has a turret, use PrimaryFireFLH instead. \n  1 ↑ The top corner in the building foundation . \n  See Also \n  SecondaryFirePixelOffset PrimaryFireDualOffset PrimaryFireFLH"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SecondaryFirePixelOffset",
      "value_type": "XY",
      "default_value": "65535",
      "adds_to_list": "",
      "desc": "Determines the offset, in pixels, from this building's origin 1 to fire the building's secondary weapon from. Expressed in X,Y format where X shifts the offset on the X-axis (positive values move the point to the right, negative values move to the left) and Y shifts on the Y-axis (positive values move the point down, negative values move up). \n Assumes the building has no turret . If the building has a turret, use SecondaryFireFLH instead. \n  1 ↑ The top corner in the building foundation . \n  See Also \n  PrimaryFirePixelOffset PrimaryFireDualOffset SecondaryFireFLH"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PrimaryFireDualOffset",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ExtraDamageStage",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialZOverlayZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "NormalZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag adjusts the building's location on the Z-axis (depth), measured in leptons . Positive values move the building \"away from the screen\" or \"closer to the ground\". Negative values do the opposite. \n Adjusting the Z-offset is sometimes necessary to correctly render the building behind or in front of other objects or animations. \n  See also \n  ZAdjust – equivalent flag for normal Animations ActiveAnimZAdjust – equivalent flag for BuildingTypes 's ActiveAnims"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ZShapePointMove",
      "value_type": "XY",
      "default_value": "{0;0}",
      "adds_to_list": "",
      "desc": "Although this flag is parsed on all object types, it only works properly on SHP art. \n  Buildings are overlayed with the special file buildingz.shp to assign depth values to each pixel of the building. Normally this buildingz.shp image aligns at the bottom-most pixel of the building. The ZShapePointMove tag can be used to shift this origin. \n This tag is mostly used for buildings which have bibs , where the size and location of the \"building\" part of the building, being different from the real size of the building, results in the bottom-most section of the building (not the bib) visually clipping. Changing the ZShapePointMove= values solve such issues."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ExtraLight",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "CanHideThings",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AddOccupyX",
      "value_type": "XY",
      "default_value": "{-1;-1}",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "RemoveOccupyX",
      "value_type": "XY",
      "default_value": "{-1;-1}",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "QueueingCell",
      "value_type": "XY",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Buildup",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AnimIdle",
      "value_type": "XYZ",
      "default_value": "{0;1;0}",
      "adds_to_list": "",
      "desc": "Warning . The logic related to this flag is deprecated. Use with caution. \n  This flag is an old leftover from early TS development, where all art related to a building was still packed into a single shape file like in TD and RA1 . Basically, it specifies which frames to play when the building is \"idle\". \n The format is AnimIdle=A,B,C where \n  A = index of the first frame to play - 1 B = number of frames to play + 2 C = frame rate (contrary to Rate , smaller means faster) \n  See also \n  AnimActive AnimAux1 AnimAux2"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AnimActive",
      "value_type": "XYZ",
      "default_value": "{0;1;0}",
      "adds_to_list": "",
      "desc": "Warning . The logic related to this flag is deprecated. See more information below. \n  This flag is an old leftover from early TS development, where all art related to a building was still packed into a single shape file like in TD and RA1 . Basically, it specifies which frames to play when the building is \"active\". \n The format is AnimActive=A,B,C where \n  A = index of the first frame to play - 1 B = number of frames to play + 2 C = frame rate (contrary to Rate , smaller means faster) \n  Bugs \n  Damage frames are displayed incorrectly. \n  See also \n  AnimIdle AnimAux1 AnimAux2"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AnimAux1",
      "value_type": "XYZ",
      "default_value": "{0;1;0}",
      "adds_to_list": "",
      "desc": "Warning . The logic related to this flag is deprecated. Use with caution. \n  This flag is an old leftover from early TS development, where all art related to a building was still packed into a single shape file like in TD and RA1 . It specifies which frames to play for additional building animations. \n The format is AnimAux1=A,B,C where \n  A = index of the first frame to play - 1 B = number of frames to play + 2 C = frame rate (contrary to Rate , smaller means faster) \n  See also \n  AnimActive AnimIdle AnimAux2"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "AnimAux2",
      "value_type": "XYZ",
      "default_value": "{0;1;0}",
      "adds_to_list": "",
      "desc": "Warning . The logic related to this flag is deprecated. Use with caution. \n  This flag is an old leftover from early TS development, where all art related to a building was still packed into a single shape file like in TD and RA1 . It specifies which frames to play for additional building animations. \n The format is AnimAux2=A,B,C where \n  A = index of the first frame to play - 1 B = number of frames to play + 2 C = frame rate (contrary to Rate , smaller means faster) \n  See also \n  AnimActive AnimIdle AnimAux1"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use when this building is active. The following rules apply: \n  a building can have only up to four different active animations, defined by the keys ActiveAnim , ActiveAnimTwo , ActiveAnimThree , ActiveAnimFour , and their derivatives. any remappable parts of the animation will be remapped according the building owner's house color. if the building is powered , then the ActiveAnimPowered and/or ActiveAnimPoweredLight flags apply. when the building is damaged, this animation is replaced by the one defined by ActiveAnimDamaged . the animation is removed as soon as the building is destroyed, whether it loops or not. \n  See Also \n  ActiveAnimDamaged ActiveAnimPowered ActiveAnimPoweredLight ActiveAnimZAdjust ActiveAnimX ActiveAnimY ActiveAnimYSort ActiveAnimTwo ActiveAnimThree ActiveAnimFour"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use for when this building is active, but damaged to or below the ConditionYellow threshold. See ActiveAnim for more information on building active animations. \n  See Also \n  ActiveAnim ActiveAnimTwoDamaged"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use for when this building is active, but is occupied by infantry . See ActiveAnim for more information on building active animations. \n  See Also \n  ActiveAnim ActiveAnimDamaged ActiveAnimPowered"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the horizontal offset, in pixels, for this building 's ActiveAnim and ActiveAnimDamaged animations. Negative numbers move the animations to the left and positive numbers to the right, relative to the structure's origin (top left corner). \n  See also \n  ZAdjust ActiveAnimZAdjust ActiveAnimY ActiveAnimYSort"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the vertical offset, in pixels, for this building 's ActiveAnim and ActiveAnimDamaged animations. Negative numbers move the animations to up and positive numbers down, relative to the structure's origin (top left corner). \n  See also \n  ZAdjust ActiveAnimZAdjust ActiveAnimX ActiveAnimYSort"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Used in a building's art(md).ini entry and adjusts the Z-draw offset for the building's ActiveAnim and ActiveAnimDamaged animations. Negative values cause the animation to be drawn \"closer to the screen\" and positive values \"away\" from the screen, measured in leptons . \n The ActiveAnimZAdjust= value is particularly useful for keeping building animations from layering improperly with other animations and with other buildings, but less useful for solving layering issues between building animations and units. For that see ActiveAnimYSort \n The related flags ActiveAnimTwoZAdjust , ActiveAnimThreeZAdjust , and ActiveAnimFourZAdjust do the same and apply to their respective ActiveAnim# and ActiveAnim#Damaged animations. \n  See also \n  ZAdjust ActiveAnimX ActiveAnimY ActiveAnimYSort"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the adjustment to use when sorting this building 's active and damaged active animations relative to other objects (including other animations) on the same layer . By default, objects are sorted based on the sum of their X and Y coordinates, on which ActiveAnimYSort is directly applied. Therefore, negative numbers sort the animation behind and positive numbers sort the animation in front of other objects. \n ActiveAnimYSort is useful for solving layering issues between building animations and units, but less useful for solving layering issues between building animations and other animations / buildings. For that see ActiveAnimZAdjust . \n  See also \n  ActiveAnimZAdjust YSortAdjust"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Determines whether or not the ActiveAnim and ActiveAnimDamaged of this building should play their animations instead of freezing them in the event that the building is both underpowered and has Powered =yes set in rules.ini. \n  See Also \n  ActiveAnim ActiveAnimPoweredLight Powered"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag, if set to yes, will render an active animation as invisible if the building it is attached to is underpowered. The flag only works in the specific events that the building is Powered =yes, and the active animation is also ActiveAnimPowered =no. \n  Bugs/Side-Effects/Unexpected Limitations \n  In Tiberian Sun and Firestorm , if set on a building, this flag causes the building's ActiveAnim to play as soon as the building is deployed, instead of waiting for the buildup animation to be finished first. \n  See Also \n  ActiveAnim ActiveAnimPowered Powered"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Turns off the animation on low power. If the animation is SuperAnimThree, SuperLowPower is enabled for duration of low power.\n\"SuperAnimThreePoweredLight\" needs to be set to \"no\" for this to function correctly. \n  See Also \n  ActiveAnim ActiveAnimPowered Powered"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwo",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines a second animation to use when this building is active. \n  See Also \n  ActiveAnim ActiveAnimTwoDamaged ActiveAnimTwoPowered ActiveAnimTwoPoweredLight ActiveAnimTwoZAdjust ActiveAnimTwoX ActiveAnimTwoY ActiveAnimTwoYSort ActiveAnimThree"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use instead of ActiveAnimTwo when this building is active, but damaged to or below the ConditionYellow threshold. \n  See Also \n  ActiveAnim ActiveAnimTwo"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag, if set to yes, will render an active animation as invisible if the building it is attached to is underpowered. The flag only works in the specific events that the building is Powered =yes, and the active animation is also ActiveAnimTwoPowered =no. \n  Bugs/Side-Effects/Unexpected Limitations \n  In Tiberian Sun and Firestorm , if set on a building, this flag causes the building's ActiveAnimTwo to play as soon as the building is deployed, instead of waiting for the buildup animation to be finished first. \n  See Also \n  ActiveAnimTwo ActiveAnimTwoPowered Powered"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimTwoPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThree",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines a third animation to use when this building is active. \n  See Also \n  ActiveAnim ActiveAnimThreeDamaged ActiveAnimThreePowered ActiveAnimThreePoweredLight ActiveAnimThreeZAdjust ActiveAnimThreeX ActiveAnimThreeY ActiveAnimThreeYSort ActiveAnimFour"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use instead of ActiveAnimThree when this building is active, but damaged to or below the ConditionYellow threshold. \n  See Also \n  ActiveAnim ActiveAnimThree"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreeYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreePowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreePoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreePoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimThreePoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFour",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines a fourth animation to use when this building is active. \n  See Also \n  ActiveAnim ActiveAnimFourDamaged ActiveAnimFourPowered ActiveAnimFourPoweredLight ActiveAnimFourZAdjust ActiveAnimFourX ActiveAnimFourY ActiveAnimFourYSort"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Defines the animation to use instead of ActiveAnimFour when this building is active, but damaged to or below the ConditionYellow threshold. \n  See Also \n  ActiveAnim ActiveAnimFour"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ActiveAnimFourPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Productions animations (production anims for short) are special animations that play whenever certain buildings are producing something, e.g. when a construction yard produces a building or a war factory produces a unit. Unlike pre-production anims , production anims are used and fully functional in Red Alert 2 . \n A test on con. yards, barracks, war factories, airpads, repair depots, and refineries in Red Alert 2 shows that: \n  Construction yards play this animation once every time a building is created War factories play this animation once every time a vehicle is created Refineries play this animation once every time a harvester docks. The harvester will be unable to leave until the animation has finished playing. Repair depots do nothing ( SpecialAnim is used instead) Barracks do nothing Airpads do nothing \n  See Also \n  ProductionAnimDamaged ProductionAnimX ProductionAnimY ProductionAnimZAdjust ProductionAnimYSort PreProductionAnim SpecialAnim"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimPowered(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimPoweredLight(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimPoweredEffect(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "ProductionAnimPoweredSpecial(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimPowered(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimPoweredLight(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimPoweredEffect(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PreProductionAnimPoweredSpecial(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwo",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimTwoPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThree",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreeYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreePowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreePoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreePoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimThreePoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFour",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialAnimFourPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwo",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimTwoPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThree",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreeYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreePowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreePoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreePoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimThreePoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFour",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperAnimFourPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "IdleAnimPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPower",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "LowPowerPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPower",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerPowered",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerPoweredLight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerPoweredEffect",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SuperLowPowerPoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This tag was supposed to act like any other animation entry for buildings which have upgrades, but it appears to be defunct as any value put into here is ignored, and instead the anim listed as the image on the respective \"plug\", as specified in rules.ini, is played. Despite this, the corresponding tags PowerUpXLocXX , PowerUpXLocYY , PowerUpXLocZZ , and PowerUpXYSort are still respected. \n  See Also \n  PowerUpXDamagedAnim PowerUpXLocXX PowerUpXLocYY PowerUpXLocZZ PowerUpXYSort \n  IsPlug PowersUpBuilding PowersUpToLevel"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXDamagedAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the upgrade animation to play when this building is damaged. Unlike PowerUpXAnim , this flag is still read and used. If this flag is not specified, the regular upgrade animation is displayed regardless of the building status. \n  See Also \n  PowerUpXAnim PowerUpXLocXX PowerUpXLocYY PowerUpXLocZZ PowerUpXYSort \n  IsPlug PowersUpBuilding PowersUpToLevel \n  ActiveAnimDamaged"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXLocXX",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Specifies the X-axis (horizontal) offset for this building upgrade animation. Positive values move the animation to the right, negative values to the left. \n  See Also \n  PowerUpXLocYY PowerUpXLocZZ PowerUpXYSort \n  IsPlug PowersUpBuilding PowersUpToLevel \n  ActiveAnimX"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXLocYY",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Specifies the Y-axis (vertical) offset for this building upgrade animation. Positive values move the animation down, negative values up. \n  See Also \n  PowerUpXLocXX PowerUpXLocZZ PowerUpXYSort \n  IsPlug PowersUpBuilding PowersUpToLevel \n  ActiveAnimY"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXLocZZ",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Although the naming convention is different, this tag acts exactly like ActiveAnimZAdjust and is used to adjust the layering of this building upgrade animation. Values that are too low will result in the upgrade animation appearing behind the building it upgrades, or in front of the building that it upgrades but behind other nearby buildings. \n The tag does not change the actual position of the animation. \n  See Also \n  PowerUpXLocXX PowerUpXLocYY PowerUpXYSort \n  IsPlug PowersUpBuilding PowersUpToLevel \n  ActiveAnimZAdjust NormalZAdjust ZAdjust"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "PowerUpXYSort",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "Acts exactly like YSortAdjust and is used to adjust the layering of this building upgrade animation. In general, animations with larger YSort values will layer over ones with lower values, and using lower numbers can result in units appearing through the animation. \n Does not change the actual position of the animation. \n  See Also \n  PowerUpXLocXX PowerUpXLocYY PowerUpXLocZZ \n  IsPlug PowersUpBuilding PowersUpToLevel \n  ActiveAnimYSort YSortAdjust"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DeployingAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the animation to use when this object deploys into another. \n  In Art(md).ini \n  Flag: DeployingAnim File(s): Art(md).ini Values: Strings : Normal text. (Limited to: Shape filename without the .shp file extension) Default: none Applicable to: BuildingTypes When this building produces a unit (any non- jumpjet vehicle in in RA2 and YR ), this flag specifies the building shape that is rendered above the unit as it leaves through the building's front door. Typically, this represents all of the building's 'static' art that should appear above the unit, like the roof and the west/south side walls, while the door and any parts that should be rendered under the unit are transparent. Applies only to factory buildings with WeaponsFactory enabled. Automatic List Inclusion Objects used as values for this flag are automatically listed under the appropriate internal array. However no harm can be done by listing them manually. See Also DoorAnim UnderDoorAnim – Building shape rendered under the produced unit RoofDeployingAnim – Building shape rendered above a jumpjet unit as it leaves through the top door (RA2 and YR only) UnderRoofDoorAnim – Building shape rendered below a jumpjet unit as it leaves through the top door (RA2 and YR only) BibShape – Building shape that is always rendered below units"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "RoofDeployingAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "DoorAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "DoorAnim is a Tiberian Sun era feature used on weapons factories to play the factory door animation. The animation listed in this flag is played the moment that a unit is created from the factory, and the unit will wait for the animation to complete before exiting, after which the animation is played again in reverse. \n Note that this flag does not refer to usual animation types , instead the given shape file is drawn directly by the engine on the building similar to gate animations . This means door animations cannot be tweaked by INI controls in any way except for the duration ( DeployTime ) and number of normal (non-shadow) frames ( DoorStages ). As such, the animation's layering cannot be altered (via ZAdjust nor YSortAdjust ). It is always drawn above the produced unit and the building's DeployingAnim and UnderDoorAnim animations, but behind the building's normal image. In addition, the game will draw the shape file's remaining frames as shadow frames. \n Like gate animations, door animations will play from the first frame to the last normal frame, and then play backwards from that frame back to the first. In both cases, the animation rate is not normalized; the length of the animation (in one direction) is determined by the building's DeployTime value. \n In Red Alert 2 , the door animation logic is still functional but highly obsolete since door animations cannot accomodate aircraft leaving the top of the factory, and conflicts with the DeployingAnim and UnderDoorAnim animations that now render the layers of the factory which have also unfortunately been hardcoded to play a single frame. \n  See Also \n  DoorStages DeployingAnim UnderDoorAnim DeployTime"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "UnderDoorAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "When this building produces a unit (any non- jumpjet vehicle in in RA2 and YR ), this flag specifies the building shape that is rendered under the unit as it leaves through the building's front door. It is also rendered behind related animations like door , deploy , and bib animations, if any. \n Typically, this represents the building's 'static' art that should appear under the unit and behind the factory door, like the walls and floor inside the factory. Any parts that should be rendered above the unit are typically transparent. \n Despite having the abbreviation 'anim' in the flag name, the shape is not animated in the sense that normal animations are. Only four frames are supported: The first frame is used for the building's normal state, the second for the damaged state, and the remaining two frames for the respective shadow frames. \n Applies only to factory buildings with WeaponsFactory enabled. \n  In Red Alert 2 and Yuri's Revenge \n  In RA2 , weapons factories were changed such that they can support aircraft (technically jumpjet vehicles) leaving through the top of the building. Weapons factories in RA2 have four 'anim' types for handling this: \n  UnderDoorAnim – a shape for the front door when a unit leaves through the front door DeployingAnim – a shape for the rest of the building when a unit leaves through the front door UnderRoofDoorAnim – a shape for the top door when a unit leaves through the top door RoofDeployingAnim – a shape for the rest of the building when a unit leaves through the top door \n  Automatic List Inclusion \n  Objects used as values for this flag are automatically listed under the appropriate internal array. However no harm can be done by listing them manually. \n  See Also \n  DoorAnim DeployingAnim UnderRoofDoorAnim BibShape"
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Rubble",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "UnderRoofDoorAnim",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpecialZOverlay",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "BibShape",
      "value_type": "filename.anim",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the image to use for the bib section of this building . \n  Automatic List Inclusion \n Objects used as values for this flag are automatically listed under the appropriate internal array. However no harm can be done by listing them manually."
    },
    {
      "category": "BuildingTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Image",
      "value_type": "filename.anim",
      "default_value": "Self->Image",
      "adds_to_list": "",
      "desc": "Specifies the section from art(md).ini which contains this object's graphical representation parameters such as cameos, firing offsets, and the like.\n(See also How The Engine Uses Files .) \n  On Tiberiums \n  Flag: Image File(s): rules(md).ini Values: Unsigned integers : All non-negative whole numbers from 0 to either 32767, 2147483647 or 4294967295. Default: ? Applicable to: Tiberiums This needs testing The following section contains information that has not been personally confirmed by the revision's author; readers are encouraged to test it themselves and update the section accordingly. Depending on the value given (0 to 4), the game will use a certain index in the OverlayTypes array, plus the following 11 entries. in TS Image=0 and Image=1 will use OverlayType index #102. Image=2 will use OverlayType index #28 and will only use that one entry, it is hardcoded to use only one entry. Image=3 will use OverlayType index #127. Image=4 will use OverlayType index #150. In YR Image=2 will use OverlayType index #27 and will only use that one entry, it is hardcoded to use only one entry. Image=3 will use OverlayType index #127. Image=4 will use OverlayType index #147. All other values will use OverlayType index #102. On Animations and other objects in art(md).ini Flag: Image File(s): art(md).ini Values: Strings : Normal text. (Limited to: art(md).ini sections) Default: same as section name Applicable to: BuildingTypes , Animations When used in art(md).ini, this flag also refers to an art(md).ini section as well, but it only uses the referred section to derive a filename of the SHP file to use. This flag does not work on InfantryTypes, VehicleTypes and AircraftTypes in art(md).ini sections. This is evident by looking at the following code snippets from unmodded artmd.ini: [CAML]\nImage=JOSH\n \n[BFRT]\nImage=SREF"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ToTile",
      "value_type": "Terrain Tile Name",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the explicit isometric tile type filename (which must exist in every theater MIX file) that this structure will be converted to when constructed and placed on the map. This was used in Tiberian Sun to enable players to build pavement (an isometric tile type rather than a structure) and can also be used for the same effect in Red Alert 2. \n In fact, it will be filled according to the general square of the FoundationType, rather than strictly according to which cell it occupies. \n  For Ares' Custom Foundation Logic, you can directly use the labels Foundation.X= and Foundation.Y= to determine the length and width of the rectangle, without writing any labels such as Foundation.N=N,N FoundationOutline.0=N,N \n  See Also \n  Foundation"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BuildCat",
      "value_type": "BuildCategory",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "It has not been fully determined exactly how this is used although it is new to the Red Alert 2 game engine which suggests it could be employed to determine which 'category' the icon appears in on the sidebar. This can be set to any of the following: \n  Combat\t\tThe structure is used specifically for a combat or defensive purpose\n\tInfrastructure\tNot known, appears to have no significant effect\n\tResource\tThe structure provides the player with the ability to store or use money\n\tPower\t\tThe structure supplies power to the player\n\tTech\t\tThe structure provides new construction options\n\tDontCare\tStrange one, the objects Cameo= displays as if it is partly built \n ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AntiInfantryValue",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This is a 'rating' for the effectiveness of this structure's weapon(s) against infantry. The 'ratings' are in abstract units and just help the AI pick the right base defense. See the AIForcePredictionFudge= tag for more details. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AntiArmorValue",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This is a 'rating' for the effectiveness of this structure's weapon(s) against vehicles. The 'ratings' are in abstract units and just help the AI pick the right base defense. See the AIForcePredictionFudge= tag for more details. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AntiAirValue",
      "value_type": "int",
      "default_value": "?",
      "adds_to_list": "",
      "desc": "This is a 'rating' for the effectiveness of this structure's weapon(s) against aircraft. The 'ratings' are in abstract units and just help the AI pick the right base defense. See the AIForcePredictionFudge= tag for more details. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HasSpotlight",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines if this structure has a 'spotlight' (or 'searchlight'). This is residual from Tiberian Sun and it has not been determined if this logic fully works or not in Red Alert 2 although it is restricted to BuildingTypes. Setting this to 'yes' simply causes an instantaneous Internal Error."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HalfDamageSmokeLocation1",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, that a first smoke type particle system is displayed on this BuildingType when it is damaged to the extent that its health bar is yellow. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the unit."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HalfDamageSmokeLocation2",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "The offset, in pixels, that a second smoke type particle system is displayed on this BuildingType when it is damaged to the extent that its health bar is yellow. Expressed in X,Y,Z format with 0,0,0 representing the exact center of the unit."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Radar",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType provides radar to the player when it is built. The radar will not function if the player is in a low power situation, even if this structure has a zero power requirement."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SpySat",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType reveals the whole shroud to the player when it is constructed. Note that it will not provide radar to the player unless you also set Radar=yes. \n Editor's note: \n  Bugs/Side-Effects/Unexpected Limitations \n  Event 4 (maybe 5 too) is irreversibly bugged for the remainder of the mission if the player built a SpySat=yes building; only a mission restart fixes it."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Adjacent",
      "value_type": "int",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "After constructing a building in-game you are only allowed to place it near your existing structures. \n Adjacent specifies the maximum number of cells away from one of your existing buildings (that does not have BaseNormal=no set) that you may place the new building. Adjacent=0 means the new building must be placed in contact with an existing building - there must be no gap. Adjacent=1 means there can be at most a 1 cell gap between an existing building and the new building. And so on. \n A building with Adjacent=1 set can be placed both 1 cell North-East and 1 cell North-West of an existing building at the same time (i.e. diagonally). \n For AI building placements, AIBaseSpacing is used instead of Adjacent . \n  See also \n  BaseNormal EligibileForAllyBuilding"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Capturable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether the structure is able to be captured by any InfantryType that has Engineer=yes set."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Powered",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not this building requires power to function. Enabling this will cause all of the building's active animations to freeze by default whenever it is underpowered. Setting ActiveAnimPowered=no in the building's art entry will negate the freezing effect for that animation. Underpowered buildings with Powered enabled will also stop emitting light if it is a lightpost, and will also not fire its weapons. \n  Bugs/Side-Effects/Unexpected Limitations \n  This tag breaks ProductionAnim logic such that, if the building has low power, the first frame of the production anim is played for the duration of the animation, then the animation disappears. The animation re-appears and goes through the remainder of it's frames as soon as the building regains power. \n  See Also \n  ActiveAnimPowered ActiveAnimPoweredLight"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PoweredSpecial",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Overpowerable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this object can be 'overpowered' - the effect of this is that its Primary= weapon actually becomes its Secondary= weapon if the object is continually fired at by a friendly unit with a weapon whose Warhead= has ElectricAssault=yes set. By not specifying a Primary= weapon on the object but giving it a Secondary=, this is one way to give it a weapon only if 'charged' by a friendly unit. \n  Editor's note: In the event a Techno has both [Primary] and [Secondary] and Overpowerable=yes set, the [ROF] of both must be the same; else the Secondary weapon may also fire."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Spyable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType triggers special logic when infiltrated by an InfantryType with Agent=yes set. This is set to 'no' by default as the effects are dependant upon the structure on which this is set (most trigger no effects at all) although the following are known to work in Red Alert 2;- If the structure has Radar=yes set then the shroud is reset for the player who owns it. \n If the structure has a positive Power= value set (i.e. it supplies power) then power is cut to the player who owns it. \n If the structure has Factory=InfantryType set then the player who infiltrated it gets to build veteran InfantryTypes. \n If the structure has Factory=VehicleType set then the player who infiltrated it gets to build veteran VehicleTypes. \n If the structure is listed in the PrerequisiteTech= statement then the player who infiltrated it gets access to new technology (typically units). \n If the structure has a SuperWeapon= attached then its RechargeTime= is reset. \n If the structure has Refinery=yes \n set then credits are stolen from the player who owns it and transferred to the player who infiltrated it."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanC4",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Determines whether or not this building can be destroyed by a unit with C4=yes . This does not prevent it from being destroyed by the various \"fake\" C4 weapons in RA2/YR on the Chrono Commando, Navy Seal, and Tanya (against vehicles). \n This tag also overrides the cursor sabotage effect of MigAttackCursor . \n  Bugs/Side-Effects/Unexpected Limitations \n A building with CanC4=no will always take at least one hitpoint of damage. This means negative values (after factoring in Verses and Damage ) are forced to become positive."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WantsExtraSpace",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType requires extra space when built by the AI due its purpose (eg a War Factory so it does not get blocked with created units). The effect is that the game adds 1 to the value defined with the AIBaseSpacing= statement in the [AI]section to ensure more space is left between this and other structures. NOTE: this was added to the Weapons Factories, Barracks and Refineries but was commented out as it can cause severe slowdown on (it can even impede) AI base building as it vainly strives to place the structure in limited space - if the AI cant build a Weapons Factory, Barracks or Refinery within the space it has, it obviously won't get very far."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Bib",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "In Red Alert to Aftermath \n  Any building with this flag set to yes gains an additional \"bib\" as a part of its image. A bib is a special smudge attached to the south side of the building. When placing the building, the bib makes up a part of the building's footprint . However, it is not considered part of the building's \"hitbox\", meaning it cannot be targeted nor damaged, although it will disappear once the building is destroyed. \n Note : There's no 'bib' image for building foundations with a width of 1. \n  In Tiberian Sun to Yuri's Revenge \n  If set, all cells on the east (bottom-right) edge of this building's foundation are rendered passable to vehicles (note: not infantry ). This is particularly used by Refineries and War Factories in the unmodified games, but works on any building and foundation. \n Unlike in Red Alert , here the bib is simply a section of the building rendered passable, not an external object. This also means the bib is still part of the building's hitbox and can be damaged. \n  See Also \n  BibShape"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Unsellable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines whether or not this object can be sold. Obvious enough for BuildingTypes however a little known fact is that, unlike previous C&C games, this defaults to 'false' for VehicleTypes so setting it to 'true' for them allows them to be sold from a Service Depot for half of their initial cost unless you determine the 'refund' by specifying a Soylent= value. NOTE: that ability to sell units from a Service Depot is disabled in Yuri's Revenge V1.001 and later."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ClickRepairable",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This states whether or not your can repair this building by clicking on the wrench icon then on this building to have it slowly repaired over time. This does not affect the engineer's ability to repair the building. If it has Repairable=no set, the building will not be able to be repaired by either of these methods."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanBeOccupied",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not a building can be garrisoned by infantry controlled by the same player. Buildings owned by the neutral house can be garrisoned by infantry controlled by any player, but never by multiple players at once. \n In order for this logic to work as desired, the building will also need MaxNumberOccupants set to a positive integer greater than 0. \n  Red Alert 2 \n  In non-expanded Red Alert 2 , CanBeOccupied was intended to be used for civilian structures only. If a building with CanBeOccupied=yes is constructed by a player, it will revert to being owned by the neutral house . If that building's Art(md).ini entry also has a Buildup animation, the AI of the neutral house will sell the building immediately upon construction. \n  See also \n  MaxNumberOccupants CanOccupyFire OccupyPip"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CanOccupyFire",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not a building with CanBeOccupied=yes and MaxNumberOccupants set to a positive integer greater than 0, will allow its occupants to fire weapons from inside of it. \n An infantry with Occupier=yes that is occupying the building will fire OccupyWeapon if its veterancy status is \"green\" or \"veteran\", and EliteOccupyWeapon if \"elite\". \n  See also \n  CanBeOccupied MaxNumberOccupants"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ShowOccupantPips",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This flag determines whether or not a building with MaxNumberOccupants set to a positive integer greater than 0, will have pips representing its occupants rendered beneath it. \n  See also \n  CanBeOccupied MaxNumberOccupants PipsDrawForAll CanOccupyFire"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "MaxNumberOccupants",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the maximum number of infantry that can be garrisoned within a building with CanBeOccupied=yes . \n If MaxNumberOccupants is set to a positive integer greater than 0, that many pips will be rendered beneath the building for the player controlling it and his allies. If PipsDrawForAll=yes , the pips will be displayed for all players. Infantry garrisoned within the building are represented by the icon specified by OccupyPip . Empty occupant slots are represented by the sixth frame of pips.shp . \n  See also \n  CanBeOccupied CanOccupyFire PipsDrawForAll OccupyPip"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NumImpassableRows",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ProduceCashStartup",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of credits given to the player who captures this building from a neutral owner. This is part of the oil derrick tech structure logic. \n The credits are granted each time a building is captured from a MultiplayPassive=yes house, not only the first time. The credits are transferred even if the new owner's power level is low and the building is Powered=yes . \n Negative values to take credits from the capturing player are not supported in Vanilla RA2 or YR. However Ares.dll adds its support since 0.9. \n  Bugs/Side-Effects/Unexpected Limitations \n  See ProduceCashDelay . \n  See also \n  ProduceCashAmount ProduceCashDelay"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ProduceCashAmount",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of credits given to the owning player every ProduceCashDelay - 1 frames. This is part of the oil derrick tech structure logic. \n The credits are granted only if the building is owned by a MultiplayPassive=no house and only if the player suffices the building's power and NeedsEngineer requirements. Otherwise, no credits are granted and the delay starts anew. \n Negative values can be used to withdraw credits from the owning player's bank account. \n  Bugs/Side-Effects/Unexpected Limitations \n  See ProduceCashDelay . \n  See also \n  ProduceCashStartup ProduceCashDelay"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ProduceCashDelay",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the interval in frames after which the owning player should be given ProduceCashAmount of credits. This is part of the oil derrick tech structure logic. \n  Bugs/Side-Effects/Unexpected Limitations \n  Only values greater than 1 are supported, otherwise the delay timer will not work correctly and the building will not produce cash aside from the startup cash. \n The delay timer will not start if ProduceCashStartup is set to 0 . In this case the building will not produce cash. \n There's a bug in the original implementation that caused the logic to break when the building was producing cash while attacked by a Temporal weapon. The timer would not reset, effectively jamming the building until it is captured by and recaptured from a MultiplayPassive=yes house. \n  See also \n  ProduceCashStartup ProduceCashAmount"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "InfantryGainSelfHeal",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to a value greater than zero, the BuildingType periodically heals all of the owner's InfantryTypes on the map after each SelfHealInfantryFrames by SelfHealInfantryAmount multiplied by this flag's value.  Additionally, all of the player's InfantryTypes receive a red cross pip next to their health bar which blinks every time the InfantryType is healed by this logic. The effect is constant for as long as the BuildingType is intact and owned by the player, effectively rendering the still-valid Hospital flag obsolete. \n If set to zero, it completely disables the flag (the health bar pip doesn't even appear) as opposed to simply not healing. \n \n  Notes \n  The effects of this flag stack for every additional building a player has with this flag set (eg. the more Tech Hospitals a player owns, the faster their infantry heal). \n  See also \n  SelfHealing SelfHealInfantryFrames SelfHealInfantryAmount UnitsGainSelfHeal"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitsGainSelfHeal",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to a value greater than zero, the BuildingType periodically heals all of the owner's UnitTypes on the map after each SelfHealUnitFrames by SelfHealUnitAmount multiplied by this flag's value.  Additionally, all of the player's UnitTypes receive a wrench pip next to their health bar which blinks every time the UnitType is healed by this logic. The effect is constant for as long as the BuildingType is intact and owned by the player. \n If set to zero, it completely disables the flag (the health bar pip doesn't even appear) as opposed to simply not healing. \n  Notes \n  The effects of this flag stack for every additional building a player has with this flag set. This means that for example, even in vanilla Yuri's Revenge, it is beneficial to capture several Tech Machine Shops, as the vehicle healing effect becomes greater with each additional Machine Shop. \n  See also \n  SelfHealing SelfHealUnitFrames SelfHealUnitAmount InfantryGainSelfHeal"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "RefinerySmokeFrames",
      "value_type": "int",
      "default_value": "25",
      "adds_to_list": "",
      "desc": "Specifies the number of frames for which the RefinerySmokeParticleSystem= is displayed. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BaseNormal",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies whether or not this building type expands the area in which you can place further buildings. Generally, base defenses do not expand the player's build area while production buildings do. \n The distance you may place new buildings away from a building type with BaseNormal=yes set is determined by the new building type's Adjacent flag. \n  Inconsistencies in Yuri's Revenge \n  It seems that the developers forgot to add BaseNormal=no to some building types that should not have had the default BaseNormal=yes . The most obvious examples of this are two of the defense buildings, Yuri's Psychic Tower ( YAPSYT ) and the Allied Gap Generator ( GAGAP ), both of which expand the player's build area whilst the Tesla Coil and the Prism Tower do not. This was corrected in the UMP . \n  See also \n  Adjacent EligibileForAllyBuilding IsBase"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EligibileForAllyBuilding",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Note that this flag was misspelled by the game's developers. The flag does work and is correctly parsed by the game using the above spelling. \n  After constructing a building in-game you are only allowed to place it near your existing structures . \n If EligibileForAllyBuilding=yes is set on a BuildingType then you will be able to place the new building near to it even if you don't own it, provided it is instead owned by one of your allies. The eligible building must also have BaseNormal=yes set. \n Note that 'eligible' buildings are only actually considered eligible if [ MultiplayerDialogSettings ]→ BuildOffAlly=yes is set (by enabling the corresponding checkbox on the multiplayer/skirmish screen prior to starting a game). \n Note that, in the unmodded game, the only buildings that have EligibileForAllyBuilding=yes set are the Construction Yards. The checkbox that controls this functionality is labelled \"Build Off Ally ConYards\".\nIf you choose to enable eligibility for all buildings then you could relabel the checkbox \"Build Off Ally Bases\" by amending the string table entry gui:buildoffally . \n  See also \n  BaseNormal"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EligibleForDelayKill",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType will explode after a timed delay rather than instantly if hit by a weapon with CausesDelayKill=yes set. Is used for explosion effects from objects like oil drums which will also cause collateral damage when they explode."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NeedsEngineer",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType must be captured in order for a player to gain ownership of it. This is only used on the NeutralTechBuildings= in Red Alert 2. Setting this tag to 'yes' also serves as an override to the EVA announcement used when it is captured or lost (the EVA_Tech BuildingCaptured and EVA_TechBuildingLost voices are used instead of the EVA_BuildingCaptured voice). \n Note: NeedsEngineer also prevents a neutral structure from auto acquiring and firing upon units - as seen on the Tech Outpost structure. \n Additionally, since targeting of engineers by the AI is remarkably bogus, the tag NeedsEngineer=yes will cause engineers to target it when given any generic attack mission. The tag will also prevent the AI from immediately selling the building after an engineer captures it. \n Another effect of the tag is to prevent a building from playing its ActiveAnim or WorkingSound until captured and is tied to the logics ProduceCashStartup , ProduceCashAmount , and ProduceCashDelay as per oil derrick logic"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CaptureEvaEvent",
      "value_type": "EVAVoice",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the voice from the EVAMD.INI file to be played when this BuildingType is captured by any player. The structure should also have NeedsEngineer= set to 'yes' for this to work. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ProtectWithWall",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType should automatically have a wall constructed around it at sometime after the AI builds it - if the AI gains ownership of this structure through any other means, it will not build a wall around it even if this is set to 'yes'. Does not apply to player-constructed objects."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Wall",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether or not a building should have special wall construction logic, which will convert it to overlay object when it is created. \n In order for this logic to work as desired—and not throw an IE —it is necessary for the building's corresponding Art(md).ini entry to have ToOverlay set to a valid overlay object with Wall=yes ↓ . It is not necessary for the overlay object to share the same object name as the building, though doing so is certainly an acceptable shortcut. \n As a special case, GuardRange can be used to facilitate faster wall construction. \n  See also \n  FirestormWall LaserFencePost GuardRange \n  Overlay objects \n  Flag: Wall File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: OverlayTypes This flag determines whether or not an overlay object should have special logic classifying it as a wall. An overlay object with Wall=yes and can be damaged by warheads in the following ways: Flag on warhead Result on overlay object Wood=yes Damage, but only if overlay object has Armor=wood Wall=yes ↓ Damage, regardless of Armor WallAbsoluteDestroyer=yes Instant destruction, regardless of the damage dealt Combinations of these flags results in the most inclusive case. Remap Bug Although wall overlay can use remap , such overlay are always rendered in the house color of the current player instead of using the color of the wall’s actual owner. For Yuri's Revenge , this is fixed in Ares version 0.2 . Warheads Flag: Wall File(s): rules(md).ini Values: Boolean values : yes or no, true or false, 1 or 0 Default: no Applicable to: Warheads This flag determines whether or not a warhead can inflict damage on overlay objects with Wall=yes ↑ as well as bridges (provided that [SpecialFlags] → DestroyableBridges=yes ) and ice. See also Wood WallAbsoluteDestroyer"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Helipad",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType acts as a Helipad, i.e. a structure where AircraftTypes can take off and land as well be reloaded. All aircraft which can dock with this structure should be listed in the PadAircraft= statement. This is also used to label the structure for AI production and targeting purposes."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "OrePurifier",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "When a structure with OrePurifier =yes \n is present, its owner receives extra funds (specified by the [General] → PurifierBonus= tag) each time a unit unloads ore on a structure with ResourceDestination =yes \n ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FactoryPlant",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies whether or not a BuildingType should modify the cost of certain categories of units for the player that controls that BuildingType. \n The actual modifiers are specified by the following flags: \n  InfantryCostBonus UnitsCostBonus AircraftCostBonus BuildingsCostBonus DefensesCostBonus \n  See Also \n  FreeUnit"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Factory",
      "value_type": "AbstractID",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This tag determines what type of object a BuildingType produces.\nAlthough it accepts any string from the list ↓ , only four of them will actually work after going through a filtering routine: \n  AircraftType BuildingType InfantryType UnitType \n  Contents 1 Allowed values 1.1 AircraftType 1.2 BuildingType 1.3 InfantryType 1.4 UnitType 2 Internal meaning 3 See also \n  Allowed values \n  AircraftType \n  This value indicates that this building can manufacture AircraftTypes . It is not required for this structure to double as an aircraft docking structure. \n  BuildingType \n  This value indicates that this building can manufacture other BuildingTypes . \n  InfantryType \n  This value indicates that this building can manufacture InfantryTypes . ExitCoord is not obeyed, and actual exit coords are controlled by the GDIBarracks , NODBarracks and YuriBarracks flags. \n  UnitType \n  This value indicates that this building can manufacture ground vehicles (with Naval=no ) or naval ships (with Naval=yes ). Mind that a ground vehicle factory without WeaponsFactory=yes will have certain side-effects. \n Be aware that all vehicles associated with this factory MUST specifically list this factory in its Prerequisite list, or there is a possibility that you will be faced with the NCO Bug . \n  Internal meaning \n  This section is in need of revision . \n  Internally, the value of Factory is used to determine what something is.\nIf - for instance - a pointer to a TechnoType (by origin) is given over to a function, the function could get the TechnoType's \"Factory\" and determine whether it's a Building or an Infantry, Unit or Aircraft. This works using an RTTI ID number for every Factory. \n Although VesselType as well as CloningType are sometimes mentioned in Rules(md).ini , they are not valid values. \n  Possible values for Factory ID number INI string Comment 0x00 <none> used for parent types such as the TechnoType or Foot 0x01 Unit 0x02 Aircraft 0x03 AircraftType 0x04 Animation 0x05 AnimationType 0x06 Building 0x07 BuildingType 0x08 Bullet 0x09 BulletType 0x0A Campaign 0x0B Cell 0x0C Factory 0x0D House 0x0E HouseType 0x0F Infantry 0x10 InfantryType 0x11 IsometricTile 0x12 IsometricTileType 0x13 BuildingLight 0x14 Overlay 0x15 OverlayType 0x16 Particle 0x17 ParticleType 0x18 ParticleSystem 0x19 ParticleSystemType 0x1A Script 0x1B ScriptType 0x1C Side 0x1D Smudge 0x1E SmudgeType 0x1F Special used for cameos (SW icon types) 0x20 SuperWeaponType 0x21 TaskForce 0x22 Team 0x23 TeamType 0x24 Terrain 0x25 TerrainType 0x26 Trigger 0x27 TriggerType 0x28 UnitType 0x29 VoxelAnim 0x2A VoxelAnimType 0x2B Wave 0x2C Tag 0x2D TagType 0x2E Tiberium 0x2F TAction 0x30 TEvent 0x31 WeaponType 0x32 WarheadType 0x33 Waypoint 0x34 Abstract 0x35 Tube Tunnels? 0x36 LightSource 0x37 EMP 0x38 Tactical consider this the battlefield with all the objects on it 0x39 Super 0x3A AITrigger 0x3B AITriggerType 0x3C Neuron unused? 0x3D FoggedObject unknown meaning 0x3E AlphaShape 0x3F VeinholeMonster 0x40 NavyType unknown meaning RA2 only: 0x41 SpawnManager 0x42 CaptureManager 0x43 Parasite 0x44 Bomb 0x45 RadSite 0x46 Temporal YR only: 0x47 Airstrike 0x48 SlaveManager 0x49 DiskLaser \n  \n  See also \n  AircraftTypes BuildingTypes InfantryTypes VehicleTypes"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FreeUnit",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the vehicle that should appear beside this building when it is placed after being constructed by the player (the unit comes free with the building). In the unmodded games, this logic is only used by Tiberium/Ore Refineries to spawn free Harvesters/Miners. \n The FreeUnit Cost is not taken into account when the building is sold. In Red Alert 2 and Yuri's Revenge , the building's Soylent is based on the Cost of the building only, so you need to set the Soylent for the building manually. In the case of the Ore Refinery, Soylent is set to 300 because the Ore Refinery has Cost=2000 and its FreeUnit has Cost=1400 (in the unmodded game, you get 50% refund when you sell a building ). \n  FreeUnit and Industrial Plant logic \n  As far as Industrial Plant logic is concerned, 'free units' are not actually free.\nIn the case of the Ore Refinery ( Cost=2000 ), the game thinks you are paying for a 1400 credit ore miner and a 600 credit Ore Refinery at the same time.\nAssuming the original Industrial Plant settings are used, vehicle prices are reduced to 75% and building prices are not reduced.\nTherefore the price of the Ore Refinery becomes: \n  (0.75 x 1400) + 600 = 1650 \n  If you changed the Industrial Plant so that building prices were reduced to 50% as well (or made a new Industrial Plant ), then the price of the Ore Refinery would become: \n  (0.75 x 1400) + (0.5 x 600) = 1350 \n  Note that multiple Industrial Plants stack their bonuses. For example, owning two [unmodded] Industrial Plants would cause the price of the Ore Refinery to become: \n  (0.75 x (0.75 x 1400)) + 600 = 1387.5 \n  Bugs/Side-Effects/Unexpected Limitations \n  You cannot have a building that costs less than its FreeUnit . If the Cost of the FreeUnit is higher than the Cost of the building, then the price of the building will be overridden to match the Cost of the FreeUnit . For example, if you have a building with Cost=500 and its FreeUnit has Cost=2000 then the building will actually cost 2000 in-game. However, the construction speed of the building is not affected by this change in price. If you own an Industrial Plant that reduces the cost of vehicles and/or buildings (whether one or both of these causes the problem has not been established) using a very small multiplier, say 0.01, then FreeUnit will cease to function on all your buildings - i.e. the free unit will not appear."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HoverPad",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType acts as a Hover Pad - in other words, if a unit with the Hover Locomotor= CLSID docks with this structure, then it 'lands' on it instead of hovering over it. This is used by Service Depots and RA2's Naval Yards (since both has the ability to repair hovering units)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsTemple",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and specifies whether or not this BuildingType is a temple (of Nod) and thus is considered by the AI when choosing a target for the Weather Storm or Nuke. Residual from Tiberian Sun."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsPlug",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and specifies whether or not this BuildingType is a 'plug' (upgradeable structure) and thus is considered by the AI when choosing a target for the Weather Storm or Nuke. Residual from Tiberian Sun although the game does perform a check to see if a structure is named GAPLUG  - if it is, it is then hard coded to have its Foundation= over-ridden so that it is set to Foundation=2x3 (see the ART.INI Guide) which may invoke some additional function although this has yet to be established."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SecretInfantry",
      "value_type": "InfantryType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag specifies the InfantryTypes that can be granted as bonuses by BuildingTypes with SecretLab=yes set. \n  For [BuildingTypes] \n  Flag: SecretInfantry File(s): rules(md).ini Values: Strings : Normal text. (Limited to: InfantryTypes) Applicable to: BuildingTypes This flag specifies a single InfantryType that should be granted as a bonus by this building, if it also has SecretLab=yes . Note that if this flag is set, the secret lab loses any randomness and will always grant this InfantryType. See also SecretUnit SecretBuilding Secret Lab System"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SecretUnit",
      "value_type": "VehicleType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag defines a single VehicleType that should be granted as a bonus by this building, if it also has SecretLab=yes . \n Note : \n  if this flag is defined, the secret lab loses any randomness and will always grant this VehicleType. if SecretInfantry is also specified on the same building, it takes priority over this flag."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SecretBuilding",
      "value_type": "BuildingType",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "This flag defines a single BuildingType that should be granted as a bonus by this building, if it also has SecretLab=yes . \n Note : \n  if this flag is defined, the secret lab loses any randomness and will always grant this BuildingType. if SecretUnit or SecretInfantry are also defined on the same BuildingType, they take priority."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "InfantryCostBonus",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "If this BuildingType also has FactoryPlant=yes set, then this tag specifies a straight multiplier to the Cost= of InfantryTypes. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitsCostBonus",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "UnitsCostBonus specifies a multiplier to the adjusted cost 1 of VehicleTypes for the player that controls the BuildingType for which this flag is set. That BuildingType must also have FactoryPlant=yes set for the multiplier to take effect. \n  Footnotes \n  1 ↑ Adjusted cost is the Cost of the unit after all other multipliers."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AircraftCostBonus",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is a direct multiplier to the cost of all AircraftTypes owned by the same player. For the logic to work, the host BuildingType has to have FactoryPlant=yes set."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BuildingsCostBonus",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "This is a direct multiplier to the cost of other buildings . This requires that FactoryPlant = be set to yes on the host structure, or the logic will not work. This also affects the time it takes to build the structure."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DefensesCostBonus",
      "value_type": "float",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "If the host has FactoryPlant = \"yes\", then this number is multiplied by each of the BuildingTypes the owner can build with BuildCat = \"combat\". Note that the effect is cumulative (two structures with .8 set results in the Cost = of each of the owner's defenses being multiplied by .64)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TogglePower",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType can be toggled 'on' and 'off' as with the power toggle function from Tiberian Sun - this can be made to work in Red Alert 2 as a 'super weapon' of sorts although there are restrictions and inherent problems. Also dictates whether or not the structure can be affected by a low-power situation. \n Editor's Note: \n According to the INI-comment regarding this flag, the default is 'yes'."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BuildupSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to play from the [SoundList] in SOUND.INI when this BuildingType is placed on the map and its Buildup= animation runs. Appears not to work and may be over-ridden by the Construction=, BuildingSlam= or BuildingPlace= statements in the [AudioVisual] section so setting those to Dummy may enable this as a structure specific sound. You can actually achieve a similar effect by specifying a WorkingSound= but no NotWorkingSound=."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PackupSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when this BuildingType undeploys into a VehicleType. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CreateUnitSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "This specifies the sound to make every time a VehicleType is created and can be any sound as defined in the SOUND.INI file. Although this works, it is unused in the game presumably because it gets a little annoying. Gets overridden by the presence of a units CreateSound=."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitExitSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when an InfantryType leaves this BuildingType. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitEnterSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound to make when an InfantryType enters this BuildingType. Should be set to a valid entry from SOUND.INI."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WorkingSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this BuildingType when it is re-powered (after being in a low power situation) or constructed. Can be set to any valid entry from the SOUND.INI file. \n There are no keywords under this heading."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NotWorkingSound",
      "value_type": "Sound",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the sound made by this BuildingType when it is powered down or sold. Can be set to any valid entry from the SOUND.INI file."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitRepair",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to yes, VehicleTypes are able to dock with this structure and get repaired. Repair rate and cost is determined by the [General] → URepairRate= and [General] → RepairStep= flags. \n  Bugs/Side-Effects/Unexpected Limitations \n  In unmodded RA2 and YR, this flag is commented out from the entries for the Allied Airforce Command Center and its American equivalent, along with a comment ;gs this is part of reloading + being an aircraft (Repair code is oogly, only Reload got rewritten for four ports.) . \n The comment fails to mention any bugs, but reenabling it on such a structure will have adverse side-effects and even cause an Internal Error - when an AI's unit is damaged, it will attempt to find the closest structure it has with this flag enabled (regardless of whether the unit can actually enter it), and send the unit there for repairs. If that destination structure happens to be an airpad, the game will enter an infinite loop and crash. \n In addition to this, even aircraft that can legitimately land in this structure will trigger its repair loop after landing, and this loop will kick them off once they're fully repaired, meaning that an aircraft sent to dock with such a structure will never manage to do it. \n  Other notes \n The AI is extremely dumb about using repair bays of any kind - it will blindly send Kirovs and Siege Choppers there despite the fact that they can never actually get repaired, and it will not differentiate between a land-based and water-based repair bay when a unit can reach both (e.g. Robot Tank). In some cases, a non Naval unit will enter a Shipyard for repairs, but the Shipyard will not repair it. So, it would be wise not to give the AI any repair bays."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitReload",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType will reload any units that dock with it if they have an Ammo= setting and ManualReload=yes set."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Bunker",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType acts as a 'Tank Bunker' thus allowing VehicleTypes to enter it for protection. This tag also ensures that the structure also uses a variant of the 'gate' logic to ensure that the walls around the bunker raise and lower when the unit enters or leaves. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Cloning",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and specifies whether or not this BuildingType can produce a replica of the current unit being produced at a Factory=. This is used only on the Cloning Vat in Red Alert 2. \n Note that when setting this on a structure (let's call it 'Structure A') which has Factory = InfantryType set aswell, the structure will produce infantry like normal barracks, but these infantry units will not be cloned by any instance of Structure A if they are produced by an instance of Structure A. Infantry units will however be cloned by all instances of Structure A owned by a given player if that player produces these units in an instance of another type of structure (such as normal barracks). An interesting effect could thus be achieved by giving one side (or country) a building for infantry production which has Cloning=yes set. The side (or country) could produce infantry the normal way, however upon capturing or building another side's Barracks, all of their own barracks would function as Cloning Vats for every infantry unit produced in that other sides's Barracks. \n Wether instances of a structure type with Cloning =yes \n clone infantry that has been produced by an instance of another structure type with Cloning =yes \n still requires testing."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Grinding",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not this BuildingType is a Grinder. If Grinding=yes is set then any InfantryTypes or VehicleTypes under the control of the owner of the BuildingType can be sent into this BuildingType in order to destroy said units but also reimburse the owner of the BuildingType by the destroyed units' refund value . \n This feature was previously available on the Cloning Vats in Red Alert 2 however it only applied to InfantryTypes (this feature of the Cloning Vats was removed in Yuri's Revenge in favour of Yuri's Grinder). \n  Bugs/Side-Effects/Unexpected Limitations \n  Vehicles without any weapon are able to enter allied Grinders. Infantry without a weapon get a \"no enter\" cursor over an allied Grinder, but Engineer =yes will also make them able to enter. Other units won't be able to enter. \n Infantry with negative damage on its weapon are unable to enter Grinders."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "UnitAbsorb",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "UnitAbsorb is an unused yet functional feature in YR . Similar to InfantryAbsorb , it lets vehicles enter the building (e.g. bio reactor) in order to generate extra power . \n  See Also \n  InfantryAbsorb"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "InfantryAbsorb",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "InfantryAbsorb is used on the YR bio reactor and allows infantry to occupy the building, where they will increase the building's power output. This flag will also enable the bio reactor art hack where the building's active animation 1 and 2 will play only when the power plant is unoccupied and occupied, respectively. Additionally, the building's idle anim will be played on loop as an active anim, though curious to note is that active anims 3 and 4 will still work properly. \n  note \n  After buildup, the 'full' animation will play for 1 frame before reverting to the empty animation \n  See Also \n  UnitAbsorb"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SecretLab",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether this Building is a Secret Lab and thus grants the owner the ability to build a pseudorandom object. See Secret Lab System for detailed description of how it works."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DockUnload",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if the VehicleType which is set to Dock= with this BuildingType will unload. Is used only for Ore Miners and refineries in Red Alert 2 - the associated VehicleType must also have a Storage= value set."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Gate",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType is classed as a gate, which means it can 'open' and 'close' to allow and disallow passage of units across it."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SAM",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType is a SAM (surface to air missile launcher) and thus its weapons can only fire at AircraftTypes. NOTE: this is unused in Red Alert 2 as the use of this means that the structure will not fire at VehicleTypes with JumpJet=yes set or acquire them as targets - it will only target AircraftTypes."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ConstructionYard",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Enables special logic for undeployable buildings. Among several more minor things, buildings with this tag set to yes can show the construction animation when a structure is placed, and support the MCV Redeploy feature. Also, the Center Base keyboard command searches for buildings with this tag enabled. \n If the AI deploys a vehicle into a building with ConstructionYard=yes , base building and auto-production is enabled in non-campaign game modes. \n If ConstructionYard=yes , structures distinguish between selling and undeploying, also respecting the MCV Redeploy setting. If ConstructionYard=no , structures will be converted into a unit even if sold. That is, instead of disappearing, the crew is ejected and the unit defined by UndeploysInto is placed also. \n In Tiberian Sun , Vehicle Thieves can only steal buildings that are ConstructionYard=no . In Red Alert 2 and Yuri's Revenge , this tag is not checked; instead, the buildings foundation has to be 1x1."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NukeSilo",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This tag makes - if set to \"yes\" - the BuildingType to which this tag is applied a nuke silo. \n Once a nuclear missile is about to be launched, the game checks every building the firing player owns for NukeSilo=yes. The first building to be found to be a nuke silo will fire the nuclear missile and play the corresponding animations. \n This is also why multiple nuke silos do not work (only the first one found by the game would fire the nuke)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Refinery",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines that this BuildingType is an Ore Refinery (i.e. it holds and processes Ore and Gems and transfers that to the player in terms of Credits). Also used for AI targeting."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "WeaponsFactory",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "WeaponsFactory=yes is a value attached to all ground vehicle manufacturing facilities. This tells the game to have the vehicle exit from a place inside the building and come out of a door, instead of just spawning outside the factory. If you are making a naval factory (RA2/YR Only) with Naval=yes you CANNOT have this value present, as this will cause a multitude of errors."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LaserFencePost",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": ""
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LaserFence",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Residual from Tiberian Sun. Can be set to 'yes' or 'no' and determines if this BuildingType acts as a Laser Fence. This means the structure acts like a wall and will automatically be created between two structures with LaserFencePost=yes set if they are present. The structure's SHP sequence must also be structured so that there are an equal number of frames for its enabled (supplied with power) and disabled (has no power) states. This is special case for the 'wall' logic, where this structure acts purely as the 'lengths' of the wall."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FirestormWall",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Whether or not this BuildingType is part of the Firestorm Defense system. Buildings can be placed like walls, connecting to each other over a distance, and changing their appearance depending on whether neighbouring cells also contain Firestorm Wall sections. \n The Firestorm logic does not exist in Red Alert 2 and Yuri's Revenge , but this tag is still parsed. All functions related to activation are not available. \n  Properties \n  Firestorm Wall sections have properties that change depending on whether the Firestorm Defense is active or not. \n If the Firestorm is active, the Wall cannot be traversed by units, and units entering the wall section are destroyed using FirestormWarhead if they are IgnoresFirestorm=no . Otherwise the wall section behaves like an open gate. \n Active Firestorm Wall sections burn IgnoresFirestorm=no projectiles targeting or traversing the wall. Ambient and spread damage is converted and reduces the charge of the super weapon. Inactive Wall sections take damage like normal buildings. \n Only inactive Firestorm Wall sections can be sold. \n  Frame order \n  The shape file for this building type is expected to have 64 frames followed by 64 shadow frames in this order: 16 for the inactive state, 16 for the damaged inactive state, 16 for the active state and another 16 for the damaged active state. The damaged frames are unused. \n Each block of 16 images represent all possible combinations of neighbouring cells containing another Firestorm Wall to connect to. The connection points can be viewed as bits, so frame 0 connects to no other walls, 1 connects to the top-right neighbour, 2 connects to the bottom-right neighbour, 4 to the bottom-left and 8 to the top-left. Adding these values gives the frame number for that number of connections. For example, frame 12 is a corner connecting to the two upper neighbours. \n  See also \n  DamageToFirestormDamageCoefficient FirestormActiveAnim FirestormIdleAnim FirestormWarhead IgnoresFirestorm"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Hospital",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to yes, this building heals any infantry units that enter it. The building must also have Ammo set to a value greater than 0 to specify the number of times it can heal infantry. \n Note that giving the BuildingType a weapon will use up one Ammo each time the weapon fires and makes the building permanently unusuable (no firing, no healing) once it runs out of Ammo . \n Note : While this flag is still valid in Yuri's Revenge, YR Hospitals use InfantryGainSelfHeal instead. \n  Bugs/Side-Effects/Unexpected Limitations \n Using this on a building that also has Factory=UnitType or Factory=InfantryType set causes the AI to spam only one type of unit from that factory, the first vehicle/infantry type that the AI can build (i.e. the AI house is listed as the object's Owner )."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Armory",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether the building will automatically promote any infantry that enter it to Elite veterancy status. \n The Ammo flag must be used on an armory, otherwise it can only promote one soldier. It can also be used to restrict the number of infantry that can be promoted. Once it has used up all of its \"promotions\" it will no longer function as an armory. If no restriction is desired, using a value of 999 is practical. -1 won't give it infinite ammo. The game appears to take the absolute value (positive -> positive, negative -> positive) for armories. \n If an armory has Powered=yes , it will still function even in a low-power situation. \n If an armory is placed offline via an in-game mechanism (like in Tiberian Sun ), it will not function. \n In Red Alert 2 , multiple soldiers can be selected at once and ordered into the armory; forming a queue line similar to the way multiple units enter a transport when ordered simultaneously. This makes promoting your soldiers a much less arduous task than it was in Tiberian Sun, where each soldier would have to be ordered into the armory separately. \n \n  Bugs \n  Conyard Armory: Just Don't \n  Applying Armory=yes to a construction yard ( ConstructionYard=yes ) causes glitchy behavior. When sending an infantry unit in to be promoted, the building will cycle through its image frames rapidly and the unit will never come back out. \n  Blocked Armory (RA2) \n  When an infantry unit enters an Armory it disappears and reappears a short time later in the upper left corner of the building. Unfortunately, the unit does not move away from the building when it exits. The unit is partially obscured by the building and can be difficult to mouse-over the correct part of the screen in order to click to select the unit and move it away manually.\nUnits that have just exited the building will also block other units from being ordered to enter until the offending unit is moved away. However if units are already queuing for the building (see above) then the next unit in the queue will enter automatically as soon as the unit ahead of it is moved out of the way). \n  Partial Fix Accompanied by Cloning Bug (RA2) \n  By making the Armory a barracks ( Factory=InfantryType ) you are able to set a rally point in order to avoid the above problem, however doing so will cause any BuildingTypes you have with Cloning=yes set to spawn a copy of the newly-promoted unit (not promoted of course) as if you had just trained it. \n  Screwy AI with Armory Factory \n  Using this on a building that also has Factory=UnitType or Factory=InfantryType set causes the AI to spam only one type of unit from that factory, the first vehicle/infantry type that the AI can build (i.e. the AI house is listed as the object's Owner ). \n  Armory Barracks Jackpot IE of Death (TS) \n  Not only is the aforementioned AI bug a concern, but using a combination armory barracks has other complications as well — dire complications. If a player attempts to train infantry while promoting on the same building, there is a rare chance that both soldiers will try to exit the building at the same moment. This causes an IE (debug code needed) . \n  Glitchy Ammo Logic \n  If the Armory has a weapon, both promoting infantry AND each firing of the weapon will decrease the Ammo counter. Once the counter is zero, the Armory will no longer fire OR promote infantry as the Armory tag prevents Ammo from reloading."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "GDIBarracks",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType is an Allied barracks thus acts as a production facility for their InfantryTypes. Is also used by the AI for targeting purposes."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NodBarracks",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "YuriBarracks",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this BuildingType is a Yuri barracks thus acts as a production facility for their InfantryTypes. Is also used by the AI for targeting purposes. \n (Yuri's Revenge Only)"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "EMPulseCannon",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This tag makes - if set to \"yes\" - the BuildingType to which this tag is applied an EMP cannon. \n Once the EMP is about to be fired, the game checks every building the firing player owns for EMPulseCannon =yes. The nearest building to be found to be an EMP cannon will fire the Primary weapon and play the corresponding animations. \n  Primary weapon of building with EMPulseCannon=yes set, must have valid Report value."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TickTank",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag acts similar to Artillary and IsJuggernaut as they control the direction a unit will turn to before deploying into a structure. When enabled on a building , any unit that deploys into said building will turn to face east (bottom-right) before deploying. \n  Bugs/Side-Effects/Unexpected Limitations \n  Hardcoded AI behavior \n  Although generally useful, it is worth noting that this flag affects the deployer unit behavior when AI-controlled. Whenever the unit that can deploy into this structure engages with an enemy vehicle or an armed defensive structure, it will deploy, if able. \n  Hardcoded theater-specificity \n If the building has a turret , the building's art entry requires NewTheater=yes , else the turret won't show. This in turn requires that the building shape files are found in theater-specific MIX files."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ChargedAnimTime",
      "value_type": "float",
      "default_value": "999",
      "adds_to_list": "",
      "desc": "Used on BuildingTypes that have SuperWeapon , or SuperWeapon2 , defined and determines the time in which a superweapon's charge timer should trigger the structure's SuperAnim sequences. Purely used as a visual effect to show a superweapon structure's state of readiness. \n  Note \n Should the structure house multiple superweapons, ChargedAnimTime does not work independently of each and will trigger the structure's SuperAnim when either one reaches the specified time."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SuperWeapon",
      "value_type": "SuperWeapon",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies the Super Weapon that this structure provides to the player. Should be set to a valid entry from the [SuperWeapons] list (NB: use the name of the Super Weapon, not its number in the list)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SuperWeapon2",
      "value_type": "SuperWeapon",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies the second Super Weapon that this structure provides to the player. Should be set to a valid entry from the [SuperWeapons] list (NB: use the name of the Super Weapon, not its number in the list)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CloakGenerator",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "General Information \n  Specifies whether this object has a cloaking device which can cloak it and any objects of the same owner within the radius specified by CloakRadiusInCells . \n  Exceptions \n  Cloaking will only be applied to Hover or Jumpjet locomotor units when the are built from a factory within the radius of the generator. Once they decloak they will not regain their cloaking ability. However, if a PoweredUnit=yes unit with a hover locomotor is deactivated within the radius of a generator, it will regain its cloak. The same goes for any hovering units affected by a weapon with EMEffect=yes 1 while within the radius of a generator. Aircraft in the air are also not effected until they land. \n  Footnotes \n  1 \n Only useable with Rock Patch in RA2/YR."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "SensorArray",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Contents 1 In Tiberian Sun 1.1 Note on Building ActiveAnim 2 In Red Alert 2 3 With Ares \n  In Tiberian Sun \n  This flag determines whether or not a BuildingType can detect and reveal cloaked and subterranean units within a radius in cells specified by CloakRadiusInCells . \n When a cloaked unit is detected for a player, an EVA Event will trigger and tibsun.mix → speech01.mix → 00-i172.aud ( speech02.mix for Nod ) will sound. The unit will then become visible and targetable until it is no longer within the detection range. \n Similarly, when a subterranean unit is detected, an EVA Event will trigger and tibsun.mix → speech01.mix → 00-i174.aud ( speech02.mix for Nod) will sound. The unit's selection box will be revealed until it is no longer within the detection range or it surfaces. \n  Note on Building ActiveAnim \n  When a building with this flag is deployed or placed down, there's a small delay before the building's active animation (if any) appears. \n  In Red Alert 2 \n  Logic related to SensorArray , as a whole or in part, is obsolete in Red Alert 2 and Yuri's Revenge . \n  Although this flag is parsed, it no longer allows BuildingTypes to detect cloaked and subterranean units. \n  With Ares \n This flag is parsed and fully functional; just set SensorsSight to an appropriate value too."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CloakRadiusInCells",
      "value_type": "int",
      "default_value": "20",
      "adds_to_list": "",
      "desc": "If CloakGenerator=yes is set, this specifies the radius, in cells , of the cloak generator this BuildingType has. If SensorArray=yes is set, this specifies the radius, in cells, of the sensor array this BuildingType has. (At least in TS, not confirmed for RA2/later)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PsychicDetectionRadius",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the radius, in cells, that this structure can detect and warn of enemy presence with a Psi Warning."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BarrelStartPitch",
      "value_type": "int",
      "default_value": "64",
      "adds_to_list": "",
      "desc": "Specifies the initial pitch of the barrel attached to the TurretAnim= on this BuildingType (and thus the angle of projectile launch). Should be set on a scale of 0 - 64 with 0 representing horizontal and 64 being vertical. Defaults to 50."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DeployFacing",
      "value_type": "int",
      "default_value": "128",
      "adds_to_list": "",
      "desc": "Supposed to specify the direction that this VehicleType will face before it DeploysInto= a BuildingType. This should be set to a value between 0 and 7 inclusive, with that value representing compass facings in a clockwise direction (with 0 being North). Note that due to the isometric view used in Red Alert 2, North is actually North West as you look at the screen. (Yuri's Revenge Only) \n The tag appears to be non-working"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightVisibility",
      "value_type": "int",
      "default_value": "5000",
      "adds_to_list": "",
      "desc": "Specifies the distance, in leptons , that the light emitted from this BuildingType is visible from. \n  See also \n  LightIntensity LightRedTint LightGreenTint LightBlueTint"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightIntensity",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount light radiated by this BuildingType . Positive values increase the intensity of emitted light, while negative values 'absorb' existing light. 0.0 (the default value) disables lighting. \n  Bugs/Side-Effects/Unexpected Limitations \n  If you insert this BuildingType's section into map or game mode code, you must also redefine this flag in it or the game won't read anything after the decimal point in the rules value. \n  See also \n  LightVisibility LightRedTint LightGreenTint LightBlueTint"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightRedTint",
      "value_type": "float",
      "default_value": "1000000",
      "adds_to_list": "",
      "desc": "Specifies the amount of red light emitted by this BuildingType if it emits light (i.e. its LightIntensity is greater than the default value of 0). Defaults to 1.0. \n \n  See also \n  LightVisibility LightIntensity LightGreenTint LightBlueTint"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightGreenTint",
      "value_type": "float",
      "default_value": "1000000",
      "adds_to_list": "",
      "desc": "Specifies the amount of green light emitted by this BuildingType if it emits light (i.e. its LightIntensity is greater than the default value of 0). Negative values reduce green light in the affected area. \n \n  See also \n  LightVisibility LightIntensity LightRedTint LightBlueTint"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LightBlueTint",
      "value_type": "float",
      "default_value": "1000000",
      "adds_to_list": "",
      "desc": "Specifies the amount of blue light emitted by this BuildingType if it emits light (i.e. its LightIntensity is greater than the default value of 0). Defaults to 1.0. \n \n  See also \n  LightVisibility LightIntensity LightRedTint LightGreenTint"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "GateCloseDelay",
      "value_type": "float",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Time delay, in minutes, before automatically 'closing' this BuildingType if it has Gate=true set."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "InvisibleInGame",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not this object is invisible to all players ingame, including the owner. It also cannot be targeted or destroyed by any other object on the map. \n  Bugs/Side-Effects/Unexpected Limitations \n Player-owned objects with InvisibleInGame=yes will cause reconnection errors if their presence somehow affects other players (for example, by firing a weapon). While not all uses cause problems, as a general rule, it isn't recommended to set this tag to 'yes' on anything owned by the player."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PowersUpBuilding",
      "value_type": "string",
      "default_value": "\"\"",
      "adds_to_list": "",
      "desc": "Specifies the structure that this BuildingType 'upgrades' by plugging into it."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PowersUpToLevel",
      "value_type": "int",
      "default_value": "-1",
      "adds_to_list": "",
      "desc": "Specifies the number for this power up or upgrade that gets plugged into the slots of parent bulding. A value of -1 means the upgrade is placed to the first available slot, while positive values correspond to specific upgrade graphics and positions on the parent structure as defined with the PowerUp N Anim , PowerUp N DamagedAnim , PowerUp N LocXX , PowerUp N LocYY , and PowerUp N LocZZ flags in art(md).ini . \n While the simultaneous firing of both Primary and Secondary weapons is applicable to all the upgrade numbers, in TS there is hardcoded restriction for the Component Tower to not allow this for PowersUpToLevel=2 and PowersUpToLevel=3 as those are coded for RPG and SAM Upgrades. \n Primary and Secondary usually have same weapons when used in upgrades. There are issues if different weapons are used as those would show the firing cursor depending on the range of the weapons but have problems in actually firing. \n See also Upgrades ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "BridgeRepairHut",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This simply defines whether or not this structure can be entered by an engineer in order to fix an adjacent bridge. This should be labeled accurately, as the random map generator does use this by placing a building with this as \"yes\" next to each bridge. As of yet, there is no other way to repair a broken bridge."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "HasStupidGuardMode",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Can be set to 'true' or 'false' and determines if this BuildingType can adopt a normal 'guard' mission. Structures by default are not permitted to participate in guard mode (so they are classed as 'stupid' for guard purposes or a 'dumb threat' for attacking purposes). Setting this to 'false' allows the structure to automatically acquire targets and fire at them. This is used on all base defense structures in Red Alert 2. To be certain of this logic working correctly, it is wise to add IsBaseDefense=yes to it as well."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CrateBeneath",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType leaves behind a random powerup crate when it is destroyed. A crate will only be left behind if the BuildingType was owned by a playable player (i.e. not neutral). \n  Problems \n Due to the way the RA2/YR engine handles crates, a new crate is created every time a crate is removed (either because it was picked up or it has been in existence for the length of time determined by CrateRegen ) this means that for each new crate created by this tag, there is always one more crate on the map. This can result in an unwanted surplus of crates on a map if multiple buildings with CrateBeneath are destroyed. The same results from new crates being added via CarriesCrate=yes ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "CrateBeneathIsMoney",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no'  - if CrateBeneath=yes is set on this BuildingType, this determines that the powerup crate left must only be a money type."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "LeaveRubble",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines if this BuildingType leaves residual rubble on the map (which can be traversed by units). Adding this to any structure will not work - the logic for this relies on the third frame of the structure's SHP image being the image used for the rubble (that frame is also drawn in a different palette than the structure itself) so check the SHP first or edit the third frame."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "PlaceAnywhere",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Determines whether or not a BuildingType can be placed on any cell of the map, ignoring Buildable and pre-existing objects within the foundation. Such a building can be placed on any terrain and even if the foundation is occupied by units or structures, however when constructed, it still has to obey its' Adjacent setting. The feature is used for rare pre-placed map structures (such as the dams in Tiberian Sun) and is not intended for use with structures that can actually be built by players in-game. \n  See also \n  Buildable WaterBound"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ICBMLauncher",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag acts similar to TickTank and Artillary as they control the direction a unit will turn to before deploying into a structure. When enabled on a BuildingType , any unit that deploys into said building will turn to face the South-East direction before deploying. It is curious to note that the flag TickTank has the same function."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Artillary",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag acts similar to TickTank and IsJuggernaut as they control the direction a unit will turn to before deploying into a structure. When enabled on a building , any unit that deploys into said building will turn to face the north (top-right) direction before deploying. \n Note : This tag is valid despite the spelling error. Using 'Artillery' instead of 'Artillary' will not work. \n  Bugs/Side-Effects/Unexpected Limitations \n  Instant barrel \n  Of the deployer flags, this one is unique in that the building's barrel , if any, is rendered as soon as the building is deployed (i.e. before the buildup animation has completed). \n  Buildup anim issues \n  In Tiberian Sun and Firestorm , there is a sequencing bug here which can cause graphical discrepancies when the unit is undeploying from structure form back to vehicle form: \n  step 1: the undeploy anim plays (i.e. the deploying anim but in reverse) until it is done step 2: the base structure art image is shown again step 3: the building turret returns to its neutral position (pointing top-right by default); for a low ROT, this could take a while step 4: the structure object turns into an unit object \n  In Tiberian Sun this is particularly visible on the Nod Artillery unit when it undeploys: \n  the undeploy anim will play, where the Artillery piece pulls the outrigger legs back into its body it then reverts to the normal \"deployed artillery\" structure image - which shows the outrigger legs back out again - while the turret turns back to its neutral orientation ...and then only does it turn into a vehicle."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TargetCoordOffset",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, in pixels, at which enemy fire is directed when this BuildingType is fired upon. Is specified in X,Y,Z format with 0,0,0 being the exact center of the structure."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ExitCoord",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, in leptons , for the coordinate from which units will exit this building when they have been created from it. Applies only if the structure has Factory=VehicleType or Factory=InfantryType set. \n Expressed in X,Y,Z format: \n  increasing X moves the exit coordinate to bottom-right, decreasing moves it top-left. increasing Y moves the exit coordinate to bottom-left, decreasing moves it top-right. Z appears to be unused. \n  Notes \n  The location of the exit coordinate origin ( 0,0,0 ) depends on the factory type and additional flags. The initial rally point (the cell to which units will move to after exiting the factory) is hardcoded and depends on the factory type and additional flags. \n  See this tutorial for more information . \n  See Also \n  GDIBarracks NODBarracks YuriBarracks"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AIBuildThis",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "If set to no , the AI will not build this structure. If set to yes , it will build one instance of it. For more details, see AI Base Building . \n  Note: this flag must be set to yes on all structures that serve as Construction Yards or the AI will raise an IE ."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsBaseDefense",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Contents 1 On Buildings 1.1 In Tiberian Sun and Firestorm 1.2 In Red Alert 2 1.3 In Yuri's Revenge 2 On TeamTypes 3 Bugs/Side-Effects/Unexpected Limitations \n  On Buildings \n  In Tiberian Sun and Firestorm \n  IsBaseDefense=yes on a building makes it a base defense structure. The AI uses buildings with this flag set to build base defenses. The total number of base defense structures to be built in relation to the base size is determined by the values in GDIBaseDefenseCoefficient and NodBaseDefenseCoefficient . See MaximumBaseDefenseValue for more information on how the AI distributes this number along the available defense structures. \n The AI also uses this flag to identify base defense structures for target selection used by AI scripts as well as superweapons. \n  In Red Alert 2 \n  Similar to TS, except RA2 uses AlliedBaseDefenseCounts and SovietBaseDefenseCounts to determine the base defense counts. \n  In Yuri's Revenge \n  YR doesn't use IsBaseDefense=yes for building AI base defenses. Base defense buildings are built depending on the list provided in AlliedBaseDefenses , SovietBaseDefenses and ThirdBaseDefenses . AlliedBaseDefenseCounts , SovietBaseDefenseCounts and ThirdBaseDefenseCounts determine the total counts. Proportions of these buildings is calculated based on the values of AntiInfantryValue , AntiArmorValue and AntiAirValue and influenced by AIForcePredictionFudge . \n YR AI uses both the specific base defense buildings as mentioned above and any building having IsBaseDefense=yes to identify base defense structure for target selection. \n  On TeamTypes \n  IsBaseDefense=yes on a TeamType makes it a base defense team. This type of team can be produced even without the AI choosing an enemy (see AIHateDelays for multiplayer maps and Make enemy trigger action for singleplayer maps). The total number of such teams is subject to the limits set by MinimumAIDefensiveTeams and MaximumAIDefensiveTeams under the General section. \n  Bugs/Side-Effects/Unexpected Limitations \n  Although the TS AI automatically builds buildings with IsBaseDefense=yes set, it cannot use such buildings as prerequisites for other buildings unless the defense structure also has AIBuildThis=yes set. \n As the AI tries to build base defense teams first, failure to be able to build MinimumAIDefensiveTeams with UseMinDefenseRule=yes will result in an AI that is unable to build any of its applicable teams listed in AI Triggers"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "IsThreatRatingNode",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag, when set to yes, will turn the structure into what has been called a \"Threat Rating Node\". This alters the AI of your units slightly, so that they assess incoming threats to a better extent than they did before. Basically, upon this being built, your objects will switch over from using the \"dumb threat\" coefficients defined in General and instead use the \"default threat\" coefficients instead. \n A side effect, however, due to the Threat Rating Node's somewhat broken logic, is that the effect is permanent for the rest of that game. When the Threat Rating Node is destroyed, the effect will still remain regardless of whether it is rebuilt or not, and the player's units will still have the benefits of it. \n According to an Ares developer, this flag is inactive since Tiberium Sun. The flag is globally active via house settings and the \"default threat coefficients\" are always in effect. Even the function that would deactivate the flag activates it instead."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ConcentricRadialIndicator",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Should be used only on BuildingTypes which have HasRadialIndicator=true set and specifies that the structure should display a concentric-ring effect rather than a radar sweep effect when selected."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Power",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of power produced or drained by this building . Positive values indicate that it produces power (e.g. a Power Plant) and negative values indicate that it uses (drains) power. \n  On Tiberiums \n  Flag: Power File(s): rules(md).ini Values: Unsigned integers : All non-negative whole numbers from 0 to either 32767, 2147483647 or 4294967295. Default: 0 Applicable to: Tiberiums Logic related to Power , as a whole or in part, is obsolete in Red Alert 2 and/or Yuri's Revenge . Specifies the amount of explosive power contained within this Tiberium type . Affects the following: Damage 1 dealt by Tiberium chain reaction Animations picked 2 from C4Warhead 's AnimList when this Tiberium explodes . Damage 1 dealt by exploding harvesters, refineries and silos , if they contain this Tiberium type. Damage 1 dealt to infantry passing over this Tiberium type, unless said infantry have TiberiumProof=yes Footnotes 1 ↑ Higher Power values indicate higher damage. 2 ↑ Explosion animation selection is random and depends on the number of entries in the AnimList . Generally, higher Power values result in the game choosing from animations on higher indexes on the AnimList , i.e. towards the end of the list."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "ExtraPower",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the amount of extra power required by this structure before it can be 'deployed' to perform its auxiliary function. This only appears to apply to structures that have GapGenerator=yes set and have a SuperGapRadiusInCells= defined, meaning they can be made to generate a bigger 'gap' when they have a surplus of power. In Yuri's Revenge, this is also used to indicate that a structure can provide more power if it has a positive Power= setting as well as UnitAbsorb= and/or InfantryAbsorb= set to 'yes'. \n If a building with this feature also has a Primary weapon, 'deploying' the building will also cause it to fire its primary weapon at the ground underneath it. The building will continue to fire until manually stopped via the 'Stop' keyboard shortcut or by manually ordering it to target somewhere else. It will not stop by switching back to its normal power level. Switching it back after it has manually been stopped from firing will simply cause the building to start firing at the ground again. \n  Notes \n  The weapon will not be fired if its range is below 2.2 (or 2.3, needs verification). At this range, it is also not possible for a player to forcefire the weapon (which apparently requires a range of 2.4 or 2.5), making this the ideal range for a weapon that is only supposed to be fired via ExtraPower. Actually, the minimum range for both ExtraPower's forcefire and manual forcefire may depend on the size of the building. Positive ExtraPower : ExtraPower does not work with positive power settings; if a positive power setting is used, then the 'Deploy' cursor will appear over the building at any time while enough power is present, but the building will not acctually perform its ExtraPower action when clicked. When the power 'Drain' exceeds the power production by the amount specified in ExtraPower, no deploy cursor will show anymore when the mouse is over the building."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnim",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag should be set to the animation to be rendered as a turret on this building type . The turret animation can be of three types: \n  Contents 1 Voxel Turret 2 SHP Turret 3 Charge Animation 4 See Also \n  Voxel Turret \n  To render a voxel turret on a building, simply put the voxel's file name into the TurretAnim input and give the building the additional tag TurretAnimIsVoxel=true ; the game will render the voxel directly onto the building without a need for a corresponding art(md).ini entry. \n  SHP Turret \n  Turret shape orientation should start from the ▲ direction and rotate counter-clockwise, like in this example. \n To render a turret shape on a building, list the .shp animation entry in the TurretAnim input and see that TurretAnimIsVoxel=false ; the game will expect that the turret animation has an art(md).ini entry. Turret shapes should have 32 frames and can have shadow frames, which unlike .shp-based vehicles turrets, do animate their shadows. It will also need these: \n  LoopStart=0 LoopEnd=32 LoopCount=-1 Rate=0 \n  Charge Animation \n  Here the turret logic has been \"hijacked\" for a special purpose. If the building has no turret ( Turret=no ) but has a valid TurretAnim entry and a primary weapon with Charges=yes , then this animation is used for the weapon charge-up animation. When the building acquires a target, this animation will play before the weapon can actually fire. An example of this is the Obelisk of Light in Tiberian Sun . Use TurretChargeAnimRate to specify the animation speed. \n  See Also \n  TurretAnimIsVoxel TurretAnimDamaged TurretAnimX TurretAnimY TurretAnimZAdjust TurretChargeAnimRate"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimDamaged",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the ART.INI reference (and thus the filename) of the turret to be used on this BuildingType when it is damaged (if the turret has an alternative image for its damaged state). \n  Note: This flag does not work on Voxel-Based Turrets."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's Image",
      "key": "TurretAnimGarrisoned",
      "value_type": "filename.anim",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the ART.INI reference (and thus the filename) of the turret to be used on this BuildingType when it is occupied (if the turret has an alternative image for its garrisoned state). Useful if you want to create a whole new neutral Tech Building that only gains a weapon (thus the turret) when it is garrisoned."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimX",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Offset of the structure's turret, in pixels, from the center of the structure along the X-axis. Used to position the turret correctly as the game will default to positioning it dead-center (0,0,0). Does not apply to vehicles (see the ART.INI Guide for vehicle turret positioning)."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimY",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Offset of the structure's turret, in pixels, from the center of the structure along the Y-axis (that is, height). Used to position the turret correctly as the game will default to positioning it dead-center (0,0,0). Positive numbers move the turret downwards, while negative numbers move the turret upwards. \n  Notes \n  Does not apply to vehicles (see the ART.INI Guide for vehicle turret positioning). \n  See also \n  TurretAnimX TurretAnimZAdjust"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimZAdjust",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Amount to fudge this turret animation by so that it appears further towards or away from the players view, with negative values meaning 'out of the screen' and positive values meaning 'into the screen'. Used to ensure that the structure's turret appears properly and is not obscured by either the its other animations or even the structure image itself. \n  See also \n  TurretAnimX TurretAnimY"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimYSort",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Amount to fudge this turret animation by before sorting it in its layer prior to rendering. Used to ensure that it displays properly on the structure and thus is not obscured by the structure's other animations. Values of 50 are generally acceptable for most structures."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimPowered(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "1",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimPoweredLight(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimPoweredEffect(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimPoweredSpecial(This tag doesn't actually exist.)",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "TurretAnimIsVoxel",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used as an over-ride as the ART.INI reference (and thus the filename) of structure-based turrets as they default to SHP type images (unlike vehicle turrets which default to VXL thus do not need this tag). Setting this to 'yes' forces the game to look for a VXL and matching HVA file instead."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoxelBarrelFile",
      "value_type": "filename.vxl",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Specifies the VXL (and corresponding HVA ) filename (without filename extension) to be used for the barrel attached to the TurretAnim on this building . The building must have both a valid turret (voxel or shape ) and BarrelAnimIsVoxel=yes set. \n  See Also \n  BarrelAnimIsVoxel VoxelBarrelOffsetToPitchPivotPoint VoxelBarrelOffsetToRotatePivotPoint VoxelBarrelOffsetToBuildingPivotPoint VoxelBarrelOffsetToBarrelEnd VoxelBarrelScale"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoxelBarrelOffsetToPitchPivotPoint",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, in pixels, for this building's voxel barrel from the barrel's lateral rotation (pitch) pivot point. The offset is measured from the center of the barrel to the pivot point (defined by VoxelBarrelOffsetToBuildingPivotPoint and/or TurretAnimX / TurretAnimY ). \n This offset is expressed in X,Y,Z format, with each value moving the barrel as follows: \n  X : Positive values move the barrel forward, negative values move the barrel backward. Y : Positive values move the barrel to the left, negative values move the barrel to the right. Z : Positive values move the barrel up, negative values move the barrel down. \n  See Also \n  BarrelAnimIsVoxel VoxelBarrelFile VoxelBarrelOffsetToRotatePivotPoint VoxelBarrelOffsetToBuildingPivotPoint VoxelBarrelOffsetToBarrelEnd VoxelBarrelScale"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoxelBarrelOffsetToRotatePivotPoint",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, in pixels, for this building's voxel barrel from the barrel's point of rotation around the vertical axis. In other words, it specifies the barrel's distance from the turret without changing the pitch (barrel tilt) pivot point . The offset is measured from the center of the barrel to the pivot point (defined by VoxelBarrelOffsetToBuildingPivotPoint and/or TurretAnimX / TurretAnimY ). \n This offset is expressed in X,Y,Z format, with each value moving the barrel as follows: \n  X : Positive values move the barrel forward, negative values move the barrel backward. Y : Positive values move the barrel to the left, negative values move the barrel to the right. Z : Positive values move the barrel up, negative values move the barrel down. \n  See Also \n  BarrelAnimIsVoxel VoxelBarrelFile VoxelBarrelOffsetToPitchPivotPoint VoxelBarrelOffsetToBuildingPivotPoint VoxelBarrelOffsetToBarrelEnd VoxelBarrelScale"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoxelBarrelOffsetToBuildingPivotPoint",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the offset, in pixels, for this building's voxel barrel 's pivot point. The offset is measured from the building origin, the top corner of its foundation . \n This offset is expressed in X,Y,Z format, with each value moving the pivot point as follows: \n  X : Positive values move the pivot point to bottom-right, negative values move the point to top-left. Y : Positive values move the pivot point to top-right, negative values move the point to bottom-left. Z : Positive values move the pivot point up, negative values moves the pivot point down. \n  Note that moving the offset also adjusts the barrel's drawing layer relative to the turret and other objects. \n  See Also \n  BarrelAnimIsVoxel VoxelBarrelFile VoxelBarrelOffsetToPitchPivotPoint VoxelBarrelOffsetToRotatePivotPoint VoxelBarrelOffsetToBarrelEnd VoxelBarrelScale"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "VoxelBarrelOffsetToBarrelEnd",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": "Specifies the the end point, in leptons, for this building's voxel barrel . This is the point at the barrel where the actual bullet will exit, along with a muzzle animation , if any. The offset is measured from the barrel pivot point defined by VoxelBarrelOffsetToBuildingPivotPoint and/or TurretAnimX / TurretAnimY ). \n This offset is expressed in F,L,H (Forward, Lateral, Height) format, with each value moving the barrel end point as follows: \n  F : Positive values move the point forward, negative values move the point backward. L : Positive values move the point to the left, negative values move the point to the right. H : Positive values move the point up, negative values move the point down. \n  See FLH for more information. \n  Bugs/Side-Effects/Unexpected Limitations \n  Similar to PrimaryFireFLH , if the building's weapon has Burst=2 or higher, the second shot uses a mirror of the lateral offset. However, unlike PrimaryFireFLH , the third and any subsequent burst shots are always fired from the middle. This seems specifically coded with the Juggernaut's triple-barrel configuration in mind. \n Also note that, due to using special voxel barrel logic , normal firing offset adjustments like PrimaryFireFLH and PBarrelLength do not apply. \n  See Also \n  PrimaryFireFLH PBarrelLength BarrelAnimIsVoxel VoxelBarrelFile VoxelBarrelOffsetToPitchPivotPoint VoxelBarrelOffsetToRotatePivotPoint VoxelBarrelOffsetToBuildingPivotPoint VoxelBarrelScale"
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Upgrades",
      "value_type": "int",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag specifies the number of upgrades this BuildingType can accept. \n  Contents 1 Tutorial 1.1 What Upgrades CAN Have or Do 1.2 What Upgrades CANNOT Have or Do 1.3 Known Upgrade Problems \n  Tutorial \n  If you have ever played Tiberian Sun, you should remember the upgrade system that GDI had. Upgrades are buildable animations placed on top of buildings that provide additional features such as extra power or different weapons. Although not used, this system also works in RA2 and YR. \n  ;Rules(md).ini\n[Animations]\nxx= (whatever you call your PowerUp#Anim)\n\n; Rules(md).ini\n[PARENT_BUILDING]\nUpgrades=3 ;how many upgrade slots does this building have? [UPGRADE_BUILDING] PowersUpBuilding =parent_building ;which building can be upgraded by this upgrade? Takes one building and one building only. PowersUpToLevel =-1 ;-1 means \"take first available slot\", whereas positive values specify the exact slot# to use. ; Art(md).ini\n[PARENT_BUILDING] PowerUp#Anim = ;The animation to add to this building when powered up by one level PowerUp#DamagedAnim = ;Damaged version of the animation to add to this building when powered up by one level PowerUp#LocXX = ;The x offset from the buildings draw position for this powerup animation PowerUp#LocYY = ;The y offset from the buildings draw position for this powerup animation PowerUp#LocZZ = ;Adjustment to normal Z when rendering this animation. This could be used to make the animation appear behind the building. PowerUp#YSort = ;Amount to add to anims sorting position so that it renders in the correct order relative to other objects \n  Where # references a specific upgrade slot (numbered from 1 to rules(md).ini -> [PARENT] -> Upgrades= ). \n If the PowerUp#Anim(Damaged) is not specified, it will simply use [UPGRADE]Image= animation. The PowerUp#Anim(Damaged) should be omitted, because specifying the Image= on the upgrade itself is the correct way to do this. \n If the Location is unspecified, (0,0,0) will be used. \n  What Upgrades CAN Have or Do \n  Superweapons (this will add to the structure's superweapons, not override them) Power output/drain Weapon (Note: Superweapons override weapons, so structures may not have both) AIBuildThis : In TS it works. In YR, AI has problem in building/rebuilding this if the parent building does not have positive power or being powerplants. AIBasePlanningSide (in RA2 and beyond) \n  What Upgrades CANNOT Have or Do \n  BuildLimit Credit production/drain Radar SpySat GapGenerator / GapRadiusInCells CloakGenerator / CloakRadiusInCells Sensors / SensorArray / SensorsSight DetectDisguise / DetectDisguiseRange PsychicDetectionRadius HasRadialIndicator / ConcentricRadialIndicator PowersUnit Upgrades cannot add to (or take away from) the Sight of their parent structure. Upgrades cannot add to (or take away from) the DebrisAnims list of their parent structure. Alter, add to, or take away from the Explosion , Explodes statement and DeathWeapon of their parent structure. Alter, add to, or take away from the maximum Strength of the parent structure. However, if a structure is upgraded, regardless of its maximum Strength, current Strength and the Strength of the upgrade structure, its' current Strength will be set to its maximum Strength. In effect, this means that upgrades do not require a Strength value at all, as they cannot be independently damaged anyway. Alter the Armor of its' parent structure. Likewise, upgrades cannot override the ImmuneTo* statements on their parent structure. Override the Crew statement of the parent structure. Using Ares , upgrades cannot add to, take away from, or alter in any way, the Survivors listing, TechnicianChance and EngineerChance settings. RevealToAll \n  Known Upgrade Problems \n  Upgrades can not add/override the DeploysInto / UndeploysInto = on their parent building. Upgrades can not have two different weapons. Both Primary and Secondary must point to the same weapon if the upgrade is to provide it. If you set them to be two different weapons, they will fire only if both weapons can hit the target. Upgrades with no Secondary defined will not fire when attacking. If you wish to use just the Primary weapon, you must specify \" Secondary =none\" Upgrades can not give the player ability to build new unit(s). If you attempt to do so, each building built after the plugin causes the new unit(s) to disappear from the sidebar, making them unbuildable again. The AuxBuilding superweapon logic does not work when upgrades are involved (either AuxBuilding = upgrade or the upgrade has the superweapon itself). A building can provide a maximum of two superweapons - if a building has more than two superweapons when adding up the superweapons from the building itself with those provided from upgrades, only the first two superweapons will get considered. Although unused in the vanilla games, the flags PowerUp#DamagedAnim are listed in art(md).ini – albeit with a spelling error. The last two words of the flags are switched around: e.g. they are listed as PowerUp# AnimDamaged while the correct format is PowerUp# DamagedAnim . The flags themselves, when typed in correctly, work as expected."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "NumberOfDocks",
      "value_type": "int",
      "default_value": "1",
      "adds_to_list": "",
      "desc": "Specifies the number of points on this BuildingType with which units can dock with it. For each docking point, there should be a DockingOffsetN= offset defined in the structure's entry in ART.INI."
    },
    {
      "category": "BuildingTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "DockingOffsetX",
      "value_type": "XYZ",
      "default_value": "{0;0;0}",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Landable",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this AircraftType is able to land either on the map or a structure with Helipad=yes set. Strangely, this defaults to 'no' so you must set this to 'yes' to get aircraft to land. Is only set to 'no' for the Paradrop plane in Red Alert 2 to make sure it never actually tries to land."
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "AirportBound",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag determines whether the attached AircraftType needs to dock with its associated structure after completing a mission. This structure will usually have Helipad=yes . With this set to yes, an AircraftType cannot land anywhere but at a structure listed in their Dock tag. If the only or last structure that the AircraftType is capable of landing at is destroyed, then the AircraftType will crash and be destroyed. \n Any air unit that needs to dock at an 'Airport' needs to be listed in the PadAircraft list, otherwise the game will experience problems when constructing units from that structure."
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Fighter",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used to set a flag on an AircraftType provided it has the 'fly' Locomotor=. In that case, setting this to 'yes' specifies that the aircraft should strafe over its target rather than hover above it to attack, thus ignoring the ROF= on its weapon(s). It will also cause the aircraft to crash in a curve rather than vertically."
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "Carryall",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and determines whether or not this AircraftType can 'tote' VehicleTypes around the map - in other words, it can be commanded to pick them up and ferry them instead of having the relevant unit 'enter' it as if it was a transport. Note that this only works when attached to a true AircraftType - it will not work if attached to a jump jet type unit (which is a special case VehicleType). An inherent problem in Red Alert 2 is that the cursor you get with this unit is the default 'stop' cursor although this can be changed by editing MOUSE.SHP. This is also used to set a flag on the 'fly' Locomotor= to specify the use of a 'landing' animation. \n EDITOR's NOTE: When going through the original Rules (both RA2 and YR), you'll find this flag for the Hind Chopper, which was implemented as a JumpJet VehicleType, as opposed to an Aircraft. This could mean that Westwood was planning on extending the Carryall-logic, but either didn't manage it or just decided to scrap the chopper. The Hind is still usable as-is and has its own VXL and HVA in the original MIXs. Do note that the chopper lacks HVA-Animations and seperated sections, and has ridiculous JumpJet-stats."
    },
    {
      "category": "AircraftTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Rotors",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "AircraftTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "CustomRotor",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": null
    },
    {
      "category": "AircraftTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "Trailer",
      "value_type": "Animation",
      "default_value": "0",
      "adds_to_list": "+",
      "desc": "Specifies the Animation to play as a trailer behind this aircraft or projectile object. For attaching trailers to other animation types, see TrailerAnim . \n  See also \n  TrailerAnim TrailerSeperation \n  Automatic List Inclusion \n  Animations used as values for this flag are automatically listed under the internal [Animations] array. However no harm can be done by listing them manually."
    },
    {
      "category": "AircraftTypes",
      "filename": "Art(md).ini",
      "section": "Object's Image",
      "key": "SpawnDelay",
      "value_type": "int",
      "default_value": "3",
      "adds_to_list": "",
      "desc": "Specifies the number of frames to wait before the next instance of the trailer anim is drawn. Smaller numbers mean a denser trail and generally a cooler effect, but results in lower performance. \n  Notes \n  This should be set lower for fast-moving projectiles, otherwise inordinately large gaps will occur between each drawing of the trailer animation. This flag and Trailer can only be used on AircraftType and Projectile images (such as torpedo [SUBT] ) If you want to use a trailer for Animations (including Bouncer anims), see TrailerAnim and TrailerSeperation As this is a divisor, setting it to 0 will cause an IE . \n  See also \n  Trailer TrailerAnim TrailerSeperation"
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FlyBy",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "Can be set to 'yes' or 'no' and is used to set a flag on an AircraftType provided it has the 'fly' Locomotor=. In that case, setting this to 'yes' specifies that the aircraft should not slow down over its target, thus ignoring the ROF= and Range= on its weapon(s). This has also been known to make units face east rather than north when they land on a Helipad= again. \n (Yuri's Revenge Only)"
    },
    {
      "category": "AircraftTypes",
      "filename": "Rules(md).ini",
      "section": "Object's ID",
      "key": "FlyBack",
      "value_type": "boolean",
      "default_value": "0",
      "adds_to_list": "",
      "desc": "This flag, if set to yes, \"locks\" an AircraftType to its flight path, so it will not deviate from it because of height differences or similar disturbances. It is only used on the Dreadnought's and Boomer's missiles in unmodified Yuri's Revenge . \n \n  See also \n  LazyCurve FlyBy"
    }
  ]
}